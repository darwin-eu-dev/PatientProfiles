[{"path":[]},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/CONTRIBUTING.html","id":"filing-issues","dir":"","previous_headings":"","what":"Filing issues","title":"Contributing to PatientProfiles","text":"found bug, question, want suggest new feature please open issue. reporting bug, reprex much appreciated. contributing either documentation code, please make sure open issue beforehand identify needs done .","code":""},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/CONTRIBUTING.html","id":"documenting-the-package","dir":"","previous_headings":"Filing issues","what":"Documenting the package","title":"Contributing to PatientProfiles","text":"Run update check package documentation: Note devtools::check_man() return warnings. commit limited package documentation, running sufficient (although running devtools::check() always generally good idea submitting pull request.","code":"devtools::document()  devtools::run_examples() devtools::build_readme() devtools::build_vignettes() devtools::check_man()"},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/CONTRIBUTING.html","id":"run-tests","dir":"","previous_headings":"Filing issues","what":"Run tests","title":"Contributing to PatientProfiles","text":"starting contribute code, first make sure package tests passing. raise issue going (although please first make sure packages imports suggests installed). contribute code, make sure current tests add continue pass. package tests can run together : Code add new functionality accompanied tests. Code coverage can checked using:","code":"devtools::test() # note, you may first have to detach the package # detach(\"package:PatientProfiles\", unload=TRUE) devtools::test_coverage()"},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/CONTRIBUTING.html","id":"adhere-to-code-style","dir":"","previous_headings":"Filing issues","what":"Adhere to code style","title":"Contributing to PatientProfiles","text":"Please adhere code style adding new code. though restyle code unrelated pull request make code review difficult.","code":"lintr::lint_package(\".\",                     linters = lintr::linters_with_defaults(                       lintr::object_name_linter(styles = \"camelCase\")                     ) )"},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/CONTRIBUTING.html","id":"run-check-before-opening-a-pull-request","dir":"","previous_headings":"Filing issues","what":"Run check() before opening a pull request","title":"Contributing to PatientProfiles","text":"opening pull request please make sure run: warnings seen.","code":"devtools::check()"},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"Apache License","title":"Apache License","text":"Version 2.0, January 2004 <http://www.apache.org/licenses/>","code":""},{"path":[]},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/LICENSE.html","id":"id_1-definitions","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"1. Definitions","title":"Apache License","text":"“License” shall mean terms conditions use, reproduction, distribution defined Sections 1 9 document. “Licensor” shall mean copyright owner entity authorized copyright owner granting License. “Legal Entity” shall mean union acting entity entities control, controlled , common control entity. purposes definition, “control” means () power, direct indirect, cause direction management entity, whether contract otherwise, (ii) ownership fifty percent (50%) outstanding shares, (iii) beneficial ownership entity. “” (“”) shall mean individual Legal Entity exercising permissions granted License. “Source” form shall mean preferred form making modifications, including limited software source code, documentation source, configuration files. “Object” form shall mean form resulting mechanical transformation translation Source form, including limited compiled object code, generated documentation, conversions media types. “Work” shall mean work authorship, whether Source Object form, made available License, indicated copyright notice included attached work (example provided Appendix ). “Derivative Works” shall mean work, whether Source Object form, based (derived ) Work editorial revisions, annotations, elaborations, modifications represent, whole, original work authorship. purposes License, Derivative Works shall include works remain separable , merely link (bind name) interfaces , Work Derivative Works thereof. “Contribution” shall mean work authorship, including original version Work modifications additions Work Derivative Works thereof, intentionally submitted Licensor inclusion Work copyright owner individual Legal Entity authorized submit behalf copyright owner. purposes definition, “submitted” means form electronic, verbal, written communication sent Licensor representatives, including limited communication electronic mailing lists, source code control systems, issue tracking systems managed , behalf , Licensor purpose discussing improving Work, excluding communication conspicuously marked otherwise designated writing copyright owner “Contribution.” “Contributor” shall mean Licensor individual Legal Entity behalf Contribution received Licensor subsequently incorporated within Work.","code":""},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/LICENSE.html","id":"id_2-grant-of-copyright-license","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"2. Grant of Copyright License","title":"Apache License","text":"Subject terms conditions License, Contributor hereby grants perpetual, worldwide, non-exclusive, -charge, royalty-free, irrevocable copyright license reproduce, prepare Derivative Works , publicly display, publicly perform, sublicense, distribute Work Derivative Works Source Object form.","code":""},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/LICENSE.html","id":"id_3-grant-of-patent-license","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"3. Grant of Patent License","title":"Apache License","text":"Subject terms conditions License, Contributor hereby grants perpetual, worldwide, non-exclusive, -charge, royalty-free, irrevocable (except stated section) patent license make, made, use, offer sell, sell, import, otherwise transfer Work, license applies patent claims licensable Contributor necessarily infringed Contribution(s) alone combination Contribution(s) Work Contribution(s) submitted. institute patent litigation entity (including cross-claim counterclaim lawsuit) alleging Work Contribution incorporated within Work constitutes direct contributory patent infringement, patent licenses granted License Work shall terminate date litigation filed.","code":""},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/LICENSE.html","id":"id_4-redistribution","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"4. Redistribution","title":"Apache License","text":"may reproduce distribute copies Work Derivative Works thereof medium, without modifications, Source Object form, provided meet following conditions: () must give recipients Work Derivative Works copy License; (b) must cause modified files carry prominent notices stating changed files; (c) must retain, Source form Derivative Works distribute, copyright, patent, trademark, attribution notices Source form Work, excluding notices pertain part Derivative Works; (d) Work includes “NOTICE” text file part distribution, Derivative Works distribute must include readable copy attribution notices contained within NOTICE file, excluding notices pertain part Derivative Works, least one following places: within NOTICE text file distributed part Derivative Works; within Source form documentation, provided along Derivative Works; , within display generated Derivative Works, wherever third-party notices normally appear. contents NOTICE file informational purposes modify License. may add attribution notices within Derivative Works distribute, alongside addendum NOTICE text Work, provided additional attribution notices construed modifying License. may add copyright statement modifications may provide additional different license terms conditions use, reproduction, distribution modifications, Derivative Works whole, provided use, reproduction, distribution Work otherwise complies conditions stated License.","code":""},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/LICENSE.html","id":"id_5-submission-of-contributions","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"5. Submission of Contributions","title":"Apache License","text":"Unless explicitly state otherwise, Contribution intentionally submitted inclusion Work Licensor shall terms conditions License, without additional terms conditions. Notwithstanding , nothing herein shall supersede modify terms separate license agreement may executed Licensor regarding Contributions.","code":""},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/LICENSE.html","id":"id_6-trademarks","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"6. Trademarks","title":"Apache License","text":"License grant permission use trade names, trademarks, service marks, product names Licensor, except required reasonable customary use describing origin Work reproducing content NOTICE file.","code":""},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/LICENSE.html","id":"id_7-disclaimer-of-warranty","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"7. Disclaimer of Warranty","title":"Apache License","text":"Unless required applicable law agreed writing, Licensor provides Work (Contributor provides Contributions) “” BASIS, WITHOUT WARRANTIES CONDITIONS KIND, either express implied, including, without limitation, warranties conditions TITLE, NON-INFRINGEMENT, MERCHANTABILITY, FITNESS PARTICULAR PURPOSE. solely responsible determining appropriateness using redistributing Work assume risks associated exercise permissions License.","code":""},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/LICENSE.html","id":"id_8-limitation-of-liability","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"8. Limitation of Liability","title":"Apache License","text":"event legal theory, whether tort (including negligence), contract, otherwise, unless required applicable law (deliberate grossly negligent acts) agreed writing, shall Contributor liable damages, including direct, indirect, special, incidental, consequential damages character arising result License use inability use Work (including limited damages loss goodwill, work stoppage, computer failure malfunction, commercial damages losses), even Contributor advised possibility damages.","code":""},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/LICENSE.html","id":"id_9-accepting-warranty-or-additional-liability","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"9. Accepting Warranty or Additional Liability","title":"Apache License","text":"redistributing Work Derivative Works thereof, may choose offer, charge fee , acceptance support, warranty, indemnity, liability obligations /rights consistent License. However, accepting obligations, may act behalf sole responsibility, behalf Contributor, agree indemnify, defend, hold Contributor harmless liability incurred , claims asserted , Contributor reason accepting warranty additional liability. END TERMS CONDITIONS","code":""},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/LICENSE.html","id":"appendix-how-to-apply-the-apache-license-to-your-work","dir":"","previous_headings":"","what":"APPENDIX: How to apply the Apache License to your work","title":"Apache License","text":"apply Apache License work, attach following boilerplate notice, fields enclosed brackets [] replaced identifying information. (Don’t include brackets!) text enclosed appropriate comment syntax file format. also recommend file class name description purpose included “printed page” copyright notice easier identification within third-party archives.","code":"Copyright [yyyy] [name of copyright owner]  Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at    http://www.apache.org/licenses/LICENSE-2.0  Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License."},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/articles/ExampleAnalysis.html","id":"set-up","dir":"Articles","previous_headings":"","what":"Set up","title":"Using PatientProfiles for analysis","text":"Let’s start loading required packages creating cdm reference Eunomia dataset.","code":"library(DBI) library(duckdb) library(CDMConnector) library(CodelistGenerator) library(dplyr) library(PatientProfiles) library(ggplot2)  con <- DBI::dbConnect(duckdb::duckdb(), eunomia_dir())  cdm <- CDMConnector::cdm_from_con(   con = con,   cdm_schema = \"main\",   write_schema = \"main\" )"},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/articles/ExampleAnalysis.html","id":"create-bespoke-cohorts","dir":"Articles","previous_headings":"","what":"Create bespoke cohorts","title":"Using PatientProfiles for analysis","text":"start, ’ll define two drug cohorts. cohorts include drug exposures celecoxib diclofenac, respectively. keep things simple cohort entry correspond drug exposure record (.e. individual can enter cohort multiple times won’t concatenate records). ’ll include two cohorts cohort table, cohort definition id 1 celecoxib 2 diclofenac. cohorts ’ll also require included aged 40 50. addAge function facilitate incorporating requirement. well two drug cohorts, ’ll define cohort people condition occurrence gastrointestinal (GI) bleeding.","code":"celecoxibCodes <- getDescendants(cdm, conceptId = 1118084) diclofenacCodes <- getDescendants(cdm, conceptId = 1124300)  # celecoxib cdm$celecoxib <- cdm$drug_era %>%   inner_join(     celecoxibCodes %>%       select(concept_id),     by = c(\"drug_concept_id\" = \"concept_id\"),     copy = TRUE   ) %>%   addAge(cdm, indexDate = \"drug_era_start_date\") %>%   filter(age >= 40 & age <= 50) %>%   rename(     \"subject_id\" = \"person_id\",     \"cohort_start_date\" = \"drug_era_start_date\",     \"cohort_end_date\" = \"drug_era_end_date\"   ) %>%   mutate(cohort_definition_id = 1L) %>%   select(     \"cohort_definition_id\", \"subject_id\",     \"cohort_start_date\", \"cohort_end_date\"   ) %>%   compute()  # diclofenac cdm$diclofenac <- cdm$drug_era %>%   inner_join(     diclofenacCodes %>%       select(concept_id),     by = c(\"drug_concept_id\" = \"concept_id\"),     copy = TRUE   ) %>%   addAge(cdm, indexDate = \"drug_era_start_date\") %>%   filter(age >= 40 & age <= 50) %>%   rename(     \"subject_id\" = \"person_id\",     \"cohort_start_date\" = \"drug_era_start_date\",     \"cohort_end_date\" = \"drug_era_end_date\"   ) %>%   mutate(cohort_definition_id = 2L) %>%   select(     \"cohort_definition_id\", \"subject_id\",     \"cohort_start_date\", \"cohort_end_date\"   ) %>%   compute()  cdm$exposure_cohort <- union_all(   cdm$celecoxib,   cdm$diclofenac ) %>%   computeQuery(name = \"exposure_cohort\") giBleedCodes <- getDescendants(cdm, conceptId = 192671)  # gi_bleed cdm$gi_bleed <- cdm$condition_occurrence %>%   inner_join(     giBleedCodes %>%       select(concept_id),     by = c(\"condition_concept_id\" = \"concept_id\"),     copy = TRUE   ) %>%   rename(     \"subject_id\" = \"person_id\",     \"cohort_start_date\" = \"condition_start_date\"   ) %>%   mutate(cohort_end_date = cohort_start_date) %>%   mutate(cohort_definition_id = 1L) %>%   select(     \"cohort_definition_id\", \"subject_id\",     \"cohort_start_date\", \"cohort_end_date\"   ) %>%   computeQuery(name = \"gi_bleed\")"},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/articles/ExampleAnalysis.html","id":"summarising-cohort-characteristics","dir":"Articles","previous_headings":"Create bespoke cohorts","what":"Summarising cohort characteristics","title":"Using PatientProfiles for analysis","text":"can use addDemographics help describe characteristics cohorts","code":"cdm$exposure_cohort %>%   addDemographics(cdm) %>%   collect() %>%   mutate(name = case_when(     cohort_definition_id == 1 ~ \"celecoxib\",     cohort_definition_id == 2 ~ \"diclofenac\",     .default = as.character(cohort_definition_id)   )) %>%   collect() %>%   ggplot() +   facet_grid(sex ~ name) +   geom_histogram(aes(age),     binwidth = 1,     colour = \"black\"   ) +   theme_bw() cdm$gi_bleed %>%   addDemographics(cdm) %>%   collect() %>%   mutate(name = case_when(     cohort_definition_id == 1 ~ \"gi_bleed\",     .default = as.character(cohort_definition_id)   )) %>%   collect() %>%   ggplot() +   facet_grid(sex ~ name) +   geom_histogram(aes(age),     binwidth = 1,     colour = \"black\"   ) +   theme_bw()"},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/articles/ExampleAnalysis.html","id":"cohort-intersection","dir":"Articles","previous_headings":"Create bespoke cohorts","what":"Cohort intersection","title":"Using PatientProfiles for analysis","text":"can also see whether individuals GI bleeding time period relative cohort start date using flagCohortPresence function. case ’ll look two time periods, cohort start date . can also see time GI bleeding using timeToCohort","code":"cdm$exposure_cohort <- cdm$exposure_cohort %>%   addCohortIntersectFlag(     targetCohortTable = \"gi_bleed\",     indexDate = \"cohort_start_date\",     window = c(-Inf, -1),     nameStyle = \"gi_bleed_history\"   ) %>%   addCohortIntersectFlag(     targetCohortTable = \"gi_bleed\",     indexDate = \"cohort_start_date\",     window = c(0, Inf),     nameStyle = \"gi_bleed_outcome\"   ) cdm$exposure_cohort %>%   group_by(gi_bleed_history, gi_bleed_outcome) %>%   count() %>%   collect() #> # A tibble: 2 × 3 #> # Groups:   gi_bleed_history, gi_bleed_outcome [2] #>   gi_bleed_history gi_bleed_outcome     n #>              <dbl>            <dbl> <dbl> #> 1                0                0   777 #> 2                0                1   176 cdm$exposure_cohort %>%   addCohortIntersectDays(     targetCohortTable = \"gi_bleed\",     window = c(0, Inf),     nameStyle = \"time_to_event\"   ) %>%   mutate(name = case_when(     cohort_definition_id == 1 ~ \"celecoxib\",     cohort_definition_id == 2 ~ \"diclofenac\",     .default = as.character(cohort_definition_id)   )) %>%   group_by(name) %>%   summarise(     min_time_to_event = min(time_to_event, na.rm = TRUE),     q25_time_to_event = quantile(time_to_event, 0.25, na.rm = TRUE),     median_time_to_event = median(time_to_event, na.rm = TRUE),     q75_time_to_event = quantile(time_to_event, 0.75, na.rm = TRUE),     max_time_to_event = max(time_to_event, na.rm = TRUE)   ) %>%   collect() %>%   ggplot(aes(     x = name, group = name,     fill = name   )) +   geom_boxplot(     aes(       lower = q25_time_to_event,       upper = q75_time_to_event,       middle = median_time_to_event,       ymin = min_time_to_event,       ymax = max_time_to_event     ),     stat = \"identity\", width = 0.5   ) +   theme_bw() +   theme(legend.position = \"none\") +   ylim(0, NA) +   xlab(\"\") +   ylab(\"Time to GI bleeding\")"},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/articles/addCohortIntersections.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Get cohort intersections","text":"vignette present functions package can used get intersections cohorts. can useful, instance, want identify patients previous conditions. PatientProfiles package designed work data OMOP CDM format, first step create reference data using DBI CDMConnector packages. connection Postgres database look like: vignette work simulated data generated mockPatientProfiles() function provided package, mimics database formatted OMOP. mock dataset following cohort tables:","code":"library(DBI) library(CDMConnector)  # The input arguments provided are for illustrative purposes only and do not provide access to any database.  con <- DBI::dbConnect(RPostgres::Postgres(),   dbname = \"omop_cdm\",   host = \"10.80.192.00\",   user = \"user_name\",   password = \"user_pasword\" )  cdm <- CDMConnector::cdm_from_con(con,   cdm_schema = \"main\",   write_schema = \"main\",   cohort_tables = \"cohort_example\" ) library(PatientProfiles) library(duckdb) library(dplyr)  cdm <- mockPatientProfiles(   patient_size = 1000,   drug_exposure_size = 1000 ) cdm$cohort1 %>%   glimpse() ## Rows: ?? ## Columns: 4 ## Database: DuckDB v0.9.1 [unknown@Linux 6.2.0-1015-azure:R 4.3.2/:memory:] ## $ cohort_definition_id <dbl> 1, 1, 1, 2 ## $ subject_id           <dbl> 1, 1, 2, 3 ## $ cohort_start_date    <date> 2020-01-01, 2020-06-01, 2020-01-02, 2020-01-01 ## $ cohort_end_date      <date> 2020-04-01, 2020-08-01, 2020-02-02, 2020-03-01 cdm$cohort2 %>%   glimpse() ## Rows: ?? ## Columns: 4 ## Database: DuckDB v0.9.1 [unknown@Linux 6.2.0-1015-azure:R 4.3.2/:memory:] ## $ cohort_definition_id <dbl> 1, 1, 2, 3, 1 ## $ subject_id           <dbl> 1, 3, 1, 2, 1 ## $ cohort_start_date    <date> 2019-12-30, 2020-01-01, 2020-05-25, 2020-01-01, 2… ## $ cohort_end_date      <date> 2019-12-30, 2020-01-01, 2020-05-25, 2020-01-01, 2…"},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/articles/addCohortIntersections.html","id":"example-addcohortintersectflag-and-addcohortintersectcount-functions","dir":"Articles","previous_headings":"","what":"Example: addCohortIntersectFlag and addCohortIntersectCount functions","title":"Get cohort intersections","text":"addCohortIntersectFlag(): adds binary column indicate intersection cohort time frame. Suppose cohort2 definition_id = 1 contains stroke occurrences. want exclude patients cohort1 stroke event last 180 days entering cohort, can use addCohortIntersectFlag() like : addCohortIntersectCount(): adds column indicates number intersections certain time window. can use function count number occurrences event interest different time windows entering study population. example, can look number strokes 0-90 day, 90-365 day, prior history windows: Let us comment targetEndDate functionality found addCohortIntersectCount() addCohortIntersectFlag() functions. , three reference dates can specified: * indexDate: date primary cohort table, contains individuals want find intersection events * targetStartDate: date events table used intersection * targetEndDate: date events table used intersection default, indexDate = cohort_start_date, targetStartDate = cohort_start_date targetEndDate = cohort_end_date. means , intersecting two cohorts specify window = c(-30,-1), get events intersecting cohort happening 30 days previous cohort start date main cohort. Namely: get two events subject_id = 1, one starting ending 2010-02-27, within window index date 2010-03-01; one starting 2010-01-25 ending 2012-03-25. individual subject_id = 2 intersecting events interest. Note , specifications default, pick one event (second one), incident window interest, overlaps . Indeed, event start date index date main cohort end date , regarded intersecting. However, interested events starting window interest. screen , can set targetEndDate = cohort_start_date. Now pick event starts 2010-01-25, 30 days index date main cohort, 2010-03-01. input targetEndDate allows, therefore, select whether perform intersection “overlapping” “incident” way. functions addCohortIntersectDays() addCohortIntersectDate(), need specific date target cohort calculate time outputs. Therefore, targetDate needs specified, set “cohort_start_date” default.","code":"cdm$cohort1WashOut <- cdm$cohort1 %>%   addCohortIntersectFlag(     targetCohortTable = \"cohort2\",     window = list(c(-180, -1)),     targetCohortId = 1,   ) %>%   filter(cohort_1_m180_to_m1 == 0)  cdm$cohort1WashOut %>%   glimpse() ## Rows: ?? ## Columns: 5 ## Database: DuckDB v0.9.1 [unknown@Linux 6.2.0-1015-azure:R 4.3.2/:memory:] ## $ cohort_definition_id <dbl> 2, 1 ## $ subject_id           <dbl> 3, 2 ## $ cohort_start_date    <date> 2020-01-01, 2020-01-02 ## $ cohort_end_date      <date> 2020-03-01, 2020-02-02 ## $ cohort_1_m180_to_m1  <dbl> 0, 0 cdm$cohort1StrokeCounts <- cdm$cohort1 %>%   addCohortIntersectCount(     targetCohortTable = \"cohort2\",     window = list(c(-Inf, -366), c(-365, -181), c(-180, -1)),     targetCohortId = 1   )  cdm$cohort1StrokeCounts %>%   glimpse() ## Rows: ?? ## Columns: 7 ## Database: DuckDB v0.9.1 [unknown@Linux 6.2.0-1015-azure:R 4.3.2/:memory:] ## $ cohort_definition_id  <dbl> 1, 2, 1, 1 ## $ subject_id            <dbl> 1, 3, 1, 2 ## $ cohort_start_date     <date> 2020-06-01, 2020-01-01, 2020-01-01, 2020-01-02 ## $ cohort_end_date       <date> 2020-08-01, 2020-03-01, 2020-04-01, 2020-02-02 ## $ cohort_1_m365_to_m181 <dbl> 0, 0, 0, 0 ## $ cohort_1_m180_to_m1   <dbl> 2, 0, 1, 0 ## $ cohort_1_minf_to_m366 <dbl> 0, 0, 0, 0 # This will be our \"main\" cohort cohort1 <- dplyr::tibble(   cohort_definition_id = 1,   subject_id = c(\"1\", \"2\"),   cohort_start_date = c(     as.Date(\"2010-03-01\"),     as.Date(\"2012-03-01\")   ),   cohort_end_date = c(     as.Date(\"2015-01-01\"),     as.Date(\"2016-03-01\")   ) )  # This is the cohort with the events we are interested in cohort2 <- dplyr::tibble(   cohort_definition_id = 1,   subject_id = c(\"1\", \"1\", \"1\", \"2\"),   cohort_start_date = c(     as.Date(\"2010-03-03\"),     as.Date(\"2010-02-27\"),     as.Date(\"2010-01-25\"),     as.Date(\"2013-01-03\")   ),   cohort_end_date = c(     as.Date(\"2010-03-03\"),     as.Date(\"2010-02-27\"),     as.Date(\"2012-03-25\"),     as.Date(\"2013-01-03\")   ) )  cdm <- mockPatientProfiles(   cohort1 = cohort1,   cohort2 = cohort2 )  cdm$cohort1 <- cdm$cohort1 %>% addCohortIntersectCount(cdm, targetCohortTable = \"cohort2\", window = list(c(-30, -1))) cdm$cohort1 ## # Source:   table<dbplyr_011> [2 x 5] ## # Database: DuckDB v0.9.1 [unknown@Linux 6.2.0-1015-azure:R 4.3.2/:memory:] ##   cohort_definition_id subject_id cohort_start_date cohort_end_date ##                  <dbl> <chr>      <date>            <date>          ## 1                    1 1          2010-03-01        2015-01-01      ## 2                    1 2          2012-03-01        2016-03-01      ## # ℹ 1 more variable: cohort_1_m30_to_m1 <dbl> cdm$cohort1 <- cdm$cohort1 %>% addCohortIntersectCount(cdm, targetCohortTable = \"cohort2\", window = list(c(-30, -1)), targetEndDate = \"cohort_start_date\") cdm$cohort1 ## # Source:   table<dbplyr_014> [2 x 5] ## # Database: DuckDB v0.9.1 [unknown@Linux 6.2.0-1015-azure:R 4.3.2/:memory:] ##   cohort_definition_id subject_id cohort_start_date cohort_end_date ##                  <dbl> <chr>      <date>            <date>          ## 1                    1 1          2010-03-01        2015-01-01      ## 2                    1 2          2012-03-01        2016-03-01      ## # ℹ 1 more variable: cohort_1_m30_to_m1 <dbl>"},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/articles/addCohortIntersections.html","id":"example-addcohortintersectdays-function","dir":"Articles","previous_headings":"","what":"Example: addCohortIntersectDays function","title":"Get cohort intersections","text":"addCohortIntersectDays(): adds new column indicates number days subject intersects another cohort specific time frame. multiple intersections, one computed, either first latest one time window (“order” argument). function can utilized calculate time event interest, time first stroke index date. patient experience event, function return NA.","code":"cdm$cohort1TimeTo <- cdm$cohort1 %>%   addCohortIntersectDays(     targetCohortTable = \"cohort2\",     targetCohortId = 1,     order = \"first\"   )  cdm$cohort1TimeTo %>%   glimpse() ## Rows: ?? ## Columns: 6 ## Database: DuckDB v0.9.1 [unknown@Linux 6.2.0-1015-azure:R 4.3.2/:memory:] ## $ cohort_definition_id <dbl> 1, 1 ## $ subject_id           <chr> \"1\", \"2\" ## $ cohort_start_date    <date> 2010-03-01, 2012-03-01 ## $ cohort_end_date      <date> 2015-01-01, 2016-03-01 ## $ cohort_1_m30_to_m1   <dbl> 1, 0 ## $ cohort_1_0_to_inf    <dbl> 2, NA"},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/articles/addCohortIntersections.html","id":"example-addcohortintersectdate-function","dir":"Articles","previous_headings":"","what":"Example: addCohortIntersectDate function","title":"Get cohort intersections","text":"addCohortIntersectDate(): appends column containing start date cohorts present certain window. function can handy obtaining date next occurrence specific event. instance, suppose cohort1 comprises patients enrolled received first vaccine dose. use function obtain date second dose cohort vaccine records (e.g. cohort2): Please note new columns added table (function presented) format cohort_“cohort_definition_id”_ “time window”. window number negative, “m” added front indicate sign added positive numbers.","code":"cdm$cohort1NextEvent <- cdm$cohort1 %>%   addCohortIntersectDate(     targetCohortTable = \"cohort2\",     order = \"first\",     targetCohortId = 1,     window = c(1, Inf)   )  cdm$cohort1NextEvent %>%   glimpse() ## Rows: ?? ## Columns: 6 ## Database: DuckDB v0.9.1 [unknown@Linux 6.2.0-1015-azure:R 4.3.2/:memory:] ## $ cohort_definition_id <dbl> 1, 1 ## $ subject_id           <chr> \"1\", \"2\" ## $ cohort_start_date    <date> 2010-03-01, 2012-03-01 ## $ cohort_end_date      <date> 2015-01-01, 2016-03-01 ## $ cohort_1_m30_to_m1   <dbl> 1, 0 ## $ cohort_1_1_to_inf    <date> 2010-03-03, NA"},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/articles/addCohortIntersections.html","id":"example-addcohortintersect-function","dir":"Articles","previous_headings":"","what":"Example: addCohortIntersect function","title":"Get cohort intersections","text":"addCohortIntersect(): Compute intersect target cohort, can compute number occurrences, flag presence, certain date /days difference. can use function compute intersect information target cohort. default return output addCohortIntersectCount(), addCohortIntersectFlag(), addCohortIntersectDate() addCohortIntersectDays() time frame. Use function want append intersection information function. information function , can read example. can also control columns append data using flag, count, date time options function, want everything. example want cohort count flag can use example.","code":"cdm$cohort1CohortIntersect <- cdm$cohort1 %>%   addCohortIntersect(     targetCohortTable = \"cohort2\",     order = \"first\",     targetCohortId = 1,     window = c(1, Inf)   ) cdm$cohort1CohortIntersect %>%   glimpse() ## Rows: ?? ## Columns: 9 ## Database: DuckDB v0.9.1 [unknown@Linux 6.2.0-1015-azure:R 4.3.2/:memory:] ## $ cohort_definition_id    <dbl> 1, 1 ## $ subject_id              <chr> \"1\", \"2\" ## $ cohort_start_date       <date> 2010-03-01, 2012-03-01 ## $ cohort_end_date         <date> 2015-01-01, 2016-03-01 ## $ cohort_1_m30_to_m1      <dbl> 1, 0 ## $ count_cohort_1_1_to_inf <dbl> 2, 0 ## $ flag_cohort_1_1_to_inf  <dbl> 1, 0 ## $ date_cohort_1_1_to_inf  <date> 2010-01-25, NA ## $ days_cohort_1_1_to_inf  <dbl> -35, NA cdm$cohort1CohortIntersect <- cdm$cohort1 %>%   addCohortIntersect(     targetCohortTable = \"cohort2\",     order = \"first\",     targetCohortId = 1,     window = c(1, Inf),     flag = TRUE,     count = TRUE,     date = FALSE,     days = FALSE   ) cdm$cohort1CohortIntersect %>%   glimpse() ## Rows: ?? ## Columns: 7 ## Database: DuckDB v0.9.1 [unknown@Linux 6.2.0-1015-azure:R 4.3.2/:memory:] ## $ cohort_definition_id    <dbl> 1, 1 ## $ subject_id              <chr> \"1\", \"2\" ## $ cohort_start_date       <date> 2010-03-01, 2012-03-01 ## $ cohort_end_date         <date> 2015-01-01, 2016-03-01 ## $ cohort_1_m30_to_m1      <dbl> 1, 0 ## $ flag_cohort_1_1_to_inf  <dbl> 1, 0 ## $ count_cohort_1_1_to_inf <dbl> 2, 0"},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/articles/addPatientCharacteristics.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Get patients' characteristics","text":"vignette show different functions get characteristics (e.g. age, sex, prior history…) subjects OMOP CDM tables cohort tables. can useful explanatory analysis well calling functions complex analyses. PatientProfiles package designed work data OMOP CDM format, first step create reference data using DBI CDMConnector packages. connection Postgres database look like: example work simulated data generated mockPatientProfiles() function provided package, mimics database formatted OMOP:","code":"library(DBI) library(CDMConnector)  # The input arguments provided are for illustrative purposes only and do not provide access to any database.  con <- DBI::dbConnect(RPostgres::Postgres(),   dbname = \"omop_cdm\",   host = \"10.80.192.00\",   user = \"user_name\",   password = \"user_pasword\" )  cdm <- CDMConnector::cdm_from_con(con,   cdm_schema = \"main\",   write_schema = \"main\",   cohort_tables = \"cohort_example\" ) library(PatientProfiles) library(duckdb) library(dplyr)  cdm <- mockPatientProfiles(   patient_size = 1000,   drug_exposure_size = 1000 )"},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/articles/addPatientCharacteristics.html","id":"example-get-characteristics-in-tables","dir":"Articles","previous_headings":"","what":"Example: get characteristics in tables","title":"Get patients' characteristics","text":"addAge(): adds new column input table containing patient’s age certain date, specified indexDate. Function allows set month /day birth patients missings can imposed subjects. , function can classify patient’s different age groups based argument ageGroup. Suppose want calculate age condition start date records condition_occurrence table. Also, wan group patients 20-year age band 60 years old . addSex(): appends column input table indicating sex patient “Female” “Male”. First, can add sex patients table. information can used count occurrences condition_concept_id = 5 males aged 60 years older. can also stratify number events age, grouping patients 20-year age bands.","code":"cdm$condition_occurrence %>%   glimpse() ## Rows: ?? ## Columns: 5 ## Database: DuckDB v0.9.1 [unknown@Linux 6.2.0-1015-azure:R 4.3.2/:memory:] ## $ condition_occurrence_id <int> 314, 970, 349, 234, 193, 919, 113, 277, 491, 9… ## $ person_id               <int> 314, 970, 349, 234, 193, 919, 113, 277, 491, 9… ## $ condition_concept_id    <int> 4, 5, 1, 2, 3, 4, 3, 2, 1, 2, 1, 5, 3, 4, 4, 1… ## $ condition_start_date    <date> 2005-08-25, 2007-02-15, 2009-02-15, 2008-05-0… ## $ condition_end_date      <date> 2006-06-14, 2007-06-05, 2011-06-24, 2009-01-0… cdm$condition_occurrence_mod <- cdm$condition_occurrence %>%   addAge(     ageDefaultMonth = 1,     ageDefaultDay = 6,     indexDate = \"condition_start_date\",     ageGroup = list(       \"ageBand_20\" =         list(           \"0 to 19\" = c(0, 19),           \"20 to 39\" = c(20, 39),           \"40 to 59\" = c(40, 59),           \"60 to 79\" = c(60, 79),           \"80 to 99\" = c(80, 99),           \">= 100\" = c(100, 150)         ),       \"ageThreshold_60\" =         list(           \"less60\" = c(0, 59),           \"more60\" = c(60, 150)         )     )   )  cdm$condition_occurrence_mod %>%   glimpse() ## Rows: ?? ## Columns: 8 ## Database: DuckDB v0.9.1 [unknown@Linux 6.2.0-1015-azure:R 4.3.2/:memory:] ## $ condition_occurrence_id <int> 314, 349, 234, 193, 919, 113, 277, 26, 276, 65… ## $ person_id               <int> 314, 349, 234, 193, 919, 113, 277, 26, 276, 65… ## $ condition_concept_id    <int> 4, 1, 2, 3, 4, 3, 2, 1, 5, 3, 4, 1, 2, 4, 5, 2… ## $ condition_start_date    <date> 2005-08-25, 2009-02-15, 2008-05-03, 2013-10-1… ## $ condition_end_date      <date> 2006-06-14, 2011-06-24, 2009-01-05, 2014-02-1… ## $ age                     <dbl> 58, 68, 57, 62, 53, 52, 22, 9, 76, 89, 70, 69,… ## $ ageBand_20              <chr> \"40 to 59\", \"60 to 79\", \"40 to 59\", \"60 to 79\"… ## $ ageThreshold_60         <chr> \"less60\", \"more60\", \"less60\", \"more60\", \"less6… cdm$condition_occurrence_mod <- cdm$condition_occurrence_mod %>%   addSex()  cdm$condition_occurrence_mod %>%   glimpse() ## Rows: ?? ## Columns: 9 ## Database: DuckDB v0.9.1 [unknown@Linux 6.2.0-1015-azure:R 4.3.2/:memory:] ## $ condition_occurrence_id <int> 314, 349, 234, 193, 919, 113, 277, 26, 276, 65… ## $ person_id               <int> 314, 349, 234, 193, 919, 113, 277, 26, 276, 65… ## $ condition_concept_id    <int> 4, 1, 2, 3, 4, 3, 2, 1, 5, 3, 4, 1, 2, 4, 5, 2… ## $ condition_start_date    <date> 2005-08-25, 2009-02-15, 2008-05-03, 2013-10-1… ## $ condition_end_date      <date> 2006-06-14, 2011-06-24, 2009-01-05, 2014-02-1… ## $ age                     <dbl> 58, 68, 57, 62, 53, 52, 22, 9, 76, 89, 70, 69,… ## $ ageBand_20              <chr> \"40 to 59\", \"60 to 79\", \"40 to 59\", \"60 to 79\"… ## $ ageThreshold_60         <chr> \"less60\", \"more60\", \"less60\", \"more60\", \"less6… ## $ sex                     <chr> \"Male\", \"Female\", \"Male\", \"Female\", \"Female\", … numConditions <- cdm$condition_occurrence_mod %>%   filter(     sex == \"Male\"   ) %>%   filter(     ageThreshold_60 == \"more60\"   ) %>%   filter(     condition_concept_id == 5   ) %>%   group_by(     ageBand_20   ) %>%   summarise(     n = count(condition_occurrence_id)   )  numConditions ## # Source:   SQL [2 x 2] ## # Database: DuckDB v0.9.1 [unknown@Linux 6.2.0-1015-azure:R 4.3.2/:memory:] ##   ageBand_20     n ##   <chr>      <dbl> ## 1 60 to 79      29 ## 2 80 to 99      15"},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/articles/addPatientCharacteristics.html","id":"example-get-characteristics-in-cohort-tables","dir":"Articles","previous_headings":"","what":"Example: get characteristics in cohort tables","title":"Get patients' characteristics","text":"PatientProfiles functions can used OMOP CDM tables cohort tables. example see package functionalities applied cohort table: addInObservation(): adds new binary column input table, indicating whether subjects observed specific time. addPriorObservation(): appends column input table containing number days patient observation specified date. addFutureObservation(): adds column days future observation individual certain date can use first function obtain patients observation “cohort_start_date” subsequently get prior future observation days. Notice using argument “indexDate”, since already defaulted “cohort_start_date”. database allows multiple observation periods, ’s important note results previous functions based period “indexDate” falls within. patient observation specified date, addPriorObservation() addFutureObservation() functions return NA.","code":"cdm$cohort1 %>%   glimpse() ## Rows: ?? ## Columns: 4 ## Database: DuckDB v0.9.1 [unknown@Linux 6.2.0-1015-azure:R 4.3.2/:memory:] ## $ cohort_definition_id <dbl> 1, 1, 1, 2 ## $ subject_id           <dbl> 1, 1, 2, 3 ## $ cohort_start_date    <date> 2020-01-01, 2020-06-01, 2020-01-02, 2020-01-01 ## $ cohort_end_date      <date> 2020-04-01, 2020-08-01, 2020-02-02, 2020-03-01 cdm$cohort1 <- cdm$cohort1 %>%   addInObservation() %>%   filter(     in_observation == 1   ) %>%   addPriorObservation() %>%   addFutureObservation()  cdm$cohort1 %>%   glimpse() ## Rows: ?? ## Columns: 7 ## Database: DuckDB v0.9.1 [unknown@Linux 6.2.0-1015-azure:R 4.3.2/:memory:] ## $ cohort_definition_id <dbl> 2, 1, 1, 1 ## $ subject_id           <dbl> 3, 1, 2, 1 ## $ cohort_start_date    <date> 2020-01-01, 2020-06-01, 2020-01-02, 2020-01-01 ## $ cohort_end_date      <date> 2020-03-01, 2020-08-01, 2020-02-02, 2020-04-01 ## $ in_observation       <dbl> 1, 1, 1, 1 ## $ prior_observation    <dbl> 4635, 5350, 4168, 5198 ## $ future_observation   <dbl> 36925, 18232, 17348, 18384"},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/articles/addPatientCharacteristics.html","id":"example-get-all-characteristics-at-once","dir":"Articles","previous_headings":"","what":"Example: get all characteristics at once","title":"Get patients' characteristics","text":"addDemographics(): can used add features presented vignette (except addInObservation()) , tables cohort tables. want get age, sex prior history individuals day enter cohort, can use function addDemographics() follows","code":"cdm$cohort2 %>%   glimpse() ## Rows: ?? ## Columns: 4 ## Database: DuckDB v0.9.1 [unknown@Linux 6.2.0-1015-azure:R 4.3.2/:memory:] ## $ cohort_definition_id <dbl> 1, 1, 2, 3, 1 ## $ subject_id           <dbl> 1, 3, 1, 2, 1 ## $ cohort_start_date    <date> 2019-12-30, 2020-01-01, 2020-05-25, 2020-01-01, 2… ## $ cohort_end_date      <date> 2019-12-30, 2020-01-01, 2020-05-25, 2020-01-01, 2… cdm$cohort2 <- cdm$cohort2 %>%   addDemographics(     age = TRUE,     ageName = \"age\",     ageGroup = NULL,     sex = TRUE,     sexName = \"sex\",     priorObservation = TRUE,     priorObservationName = \"prior_observation\",     futureObservation = FALSE,   )  cdm$cohort2 %>%   glimpse() ## Rows: ?? ## Columns: 7 ## Database: DuckDB v0.9.1 [unknown@Linux 6.2.0-1015-azure:R 4.3.2/:memory:] ## $ cohort_definition_id <dbl> 1, 1, 3, 2, 1 ## $ subject_id           <dbl> 3, 1, 2, 1, 1 ## $ cohort_start_date    <date> 2020-01-01, 2020-05-25, 2020-01-01, 2020-05-25, 2… ## $ cohort_end_date      <date> 2020-01-01, 2020-05-25, 2020-01-01, 2020-05-25, 2… ## $ age                  <dbl> 42, 41, 50, 41, 40 ## $ sex                  <chr> \"Female\", \"Male\", \"Male\", \"Male\", \"Male\" ## $ prior_observation    <dbl> 4635, 5343, 4167, 5343, 5196"},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Marti Catala. Author, maintainer. Yuchen Guo. Author. Mike Du. Author. Kim Lopez-Guell. Author. Edward Burn. Author. Nuria Mercade-Besora. Contributor. Xintong Li. Contributor.","code":""},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Catala M, Guo Y, Du M, Lopez-Guell K, Burn E (2023). PatientProfiles: Identify Characteristics Patients OMOP Common Data Model. R package version 0.5.0, https://darwin-eu-dev.github.io/PatientProfiles/.","code":"@Manual{,   title = {PatientProfiles: Identify Characteristics of Patients in the OMOP Common Data Model},   author = {Marti Catala and Yuchen Guo and Mike Du and Kim Lopez-Guell and Edward Burn},   year = {2023},   note = {R package version 0.5.0},   url = {https://darwin-eu-dev.github.io/PatientProfiles/}, }"},{"path":[]},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/index.html","id":"package-overview","dir":"","previous_headings":"","what":"Package overview","title":"Identify Characteristics of Patients in the OMOP Common Data Model","text":"PatientProfiles contains functions adding characteristics OMOP CDM tables containing patient level data (e.g. condition occurrence, drug exposure, ) OMOP CDM cohort tables. characteristics can added include individual´s sex, age, days prior observation Time varying characteristics, age, can estimated relative date corresponding table. addition, PatientProfiles also provides functionality identifying intersections cohort table OMOP CDM tables containing patient level data cohort tables.","code":""},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/index.html","id":"package-installation","dir":"","previous_headings":"","what":"Package installation","title":"Identify Characteristics of Patients in the OMOP Common Data Model","text":"can install latest version PatientProfiles like :","code":"install.packages(\"remotes\") remotes::install_github(\"darwin-eu-dev/PatientProfiles\")"},{"path":[]},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/index.html","id":"create-a-reference-to-data-in-the-omop-cdm-format","dir":"","previous_headings":"Example usage","what":"Create a reference to data in the OMOP CDM format","title":"Identify Characteristics of Patients in the OMOP Common Data Model","text":"PatientProfiles package designed work data OMOP CDM format, first step create reference data using CDMConnector package. Creating connection Postgres database example look like: see create reference database please consult CDMConnector package documentation. example though ’ll work simulated data, ’ll generate example cdm reference like :","code":"library(CDMConnector) library(PatientProfiles) library(dplyr) con <- DBI::dbConnect(   RPostgres::Postgres(),   dbname = Sys.getenv(\"CDM5_POSTGRESQL_DBNAME\"),   host = Sys.getenv(\"CDM5_POSTGRESQL_HOST\"),   user = Sys.getenv(\"CDM5_POSTGRESQL_USER\"),   password = Sys.getenv(\"CDM5_POSTGRESQL_PASSWORD\") )  cdm <- cdm_from_con(   con,   cdm_schema = Sys.getenv(\"CDM5_POSTGRESQL_CDM_SCHEMA\"),   write_schema = Sys.getenv(\"CDM5_POSTGRESQL_RESULT_SCHEMA\") ) cdm <- mockPatientProfiles(patient_size = 1000, drug_exposure_size = 1000)"},{"path":[]},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/index.html","id":"adding-characteristics-to-patient-level-data","dir":"","previous_headings":"Example usage > Adding individuals´ characteristics","what":"Adding characteristics to patient-level data","title":"Identify Characteristics of Patients in the OMOP Common Data Model","text":"Say wanted get individuals´sex age condition start date records condition occurrence table. can use addAge addSex functions : , example, limit data males aged 18 65","code":"cdm$condition_occurrence %>%   glimpse() #> Rows: ?? #> Columns: 5 #> Database: DuckDB 0.7.1 [martics@Windows 10 x64:R 4.2.3/:memory:] #> $ condition_occurrence_id <int> 314, 970, 349, 234, 193, 919, 113, 277, 491, 9… #> $ person_id               <int> 314, 970, 349, 234, 193, 919, 113, 277, 491, 9… #> $ condition_concept_id    <int> 4, 5, 1, 2, 3, 4, 3, 2, 1, 2, 1, 5, 3, 4, 4, 1… #> $ condition_start_date    <date> 2005-08-25, 2007-02-15, 2009-02-15, 2008-05-0… #> $ condition_end_date      <date> 2006-06-14, 2007-06-05, 2011-06-24, 2009-01-0…  cdm$condition_occurrence <- cdm$condition_occurrence %>%   addAge(indexDate = \"condition_start_date\") %>%   addSex()  cdm$condition_occurrence %>%   glimpse() #> Rows: ?? #> Columns: 7 #> Database: DuckDB 0.7.1 [martics@Windows 10 x64:R 4.2.3/:memory:] #> $ condition_occurrence_id <int> 314, 234, 277, 26, 276, 656, 275, 249, 150, 9,… #> $ person_id               <int> 314, 234, 277, 26, 276, 656, 275, 249, 150, 9,… #> $ condition_concept_id    <int> 4, 2, 2, 1, 5, 3, 4, 2, 4, 5, 2, 2, 2, 3, 1, 1… #> $ condition_start_date    <date> 2005-08-25, 2008-05-03, 2007-04-26, 2009-01-0… #> $ condition_end_date      <date> 2006-06-14, 2009-01-05, 2007-05-07, 2010-02-0… #> $ age                     <dbl> 58, 57, 22, 9, 76, 89, 70, 49, 55, 17, 39, 26,… #> $ sex                     <chr> \"Male\", \"Male\", \"Male\", \"Female\", \"Male\", \"Mal… cdm$condition_occurrence %>%   filter(age >= 18 & age <= 65) %>%   filter(sex == \"Male\") #> # Source:   SQL [?? x 7] #> # Database: DuckDB 0.7.1 [martics@Windows 10 x64:R 4.2.3/:memory:] #>    condition_occurrence_id person_id condition_concept_id condition_start_date #>                      <int>     <int>                <int> <date>               #>  1                     314       314                    4 2005-08-25           #>  2                     234       234                    2 2008-05-03           #>  3                     277       277                    2 2007-04-26           #>  4                     249       249                    2 2014-12-08           #>  5                     150       150                    4 2011-08-31           #>  6                     406       406                    3 2009-02-11           #>  7                     438       438                    1 2008-09-26           #>  8                     536       536                    4 2009-11-11           #>  9                     872       872                    2 2006-10-19           #> 10                     424       424                    4 2009-01-12           #> # ℹ more rows #> # ℹ 3 more variables: condition_end_date <date>, age <dbl>, sex <chr>"},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/index.html","id":"adding-characteristics-of-a-cohort","dir":"","previous_headings":"Example usage > Adding individuals´ characteristics","what":"Adding characteristics of a cohort","title":"Identify Characteristics of Patients in the OMOP Common Data Model","text":"tables OMOP CDM, can work similar way cohort tables. example, say cohort table can add age, age groups, sex, days prior observation cohort like use information subset cohort. example limiting least 365 days prior observation available cohort start date like ","code":"cdm$cohort1 %>%   glimpse() #> Rows: ?? #> Columns: 4 #> Database: DuckDB 0.7.1 [martics@Windows 10 x64:R 4.2.3/:memory:] #> $ cohort_definition_id <dbl> 1, 1, 1, 2 #> $ subject_id           <dbl> 1, 1, 2, 3 #> $ cohort_start_date    <date> 2020-01-01, 2020-06-01, 2020-01-02, 2020-01-01 #> $ cohort_end_date      <date> 2020-04-01, 2020-08-01, 2020-02-02, 2020-03-01 cdm$cohort1 <- cdm$cohort1 %>%   addAge(     indexDate = \"cohort_start_date\",     ageGroup = list(c(0, 18), c(19, 65), c(66, 100))   ) %>%   addSex() %>%   addPriorObservation()  cdm$cohort1 %>%   glimpse() #> Rows: ?? #> Columns: 8 #> Database: DuckDB 0.7.1 [martics@Windows 10 x64:R 4.2.3/:memory:] #> $ cohort_definition_id <dbl> 2, 1, 1, 1 #> $ subject_id           <dbl> 3, 1, 2, 1 #> $ cohort_start_date    <date> 2020-01-01, 2020-06-01, 2020-01-02, 2020-01-01 #> $ cohort_end_date      <date> 2020-03-01, 2020-08-01, 2020-02-02, 2020-04-01 #> $ age                  <dbl> 42, 41, 50, 40 #> $ age_group            <chr> \"19 to 65\", \"19 to 65\", \"19 to 65\", \"19 to 65\" #> $ sex                  <chr> \"Female\", \"Male\", \"Male\", \"Male\" #> $ prior_observation    <dbl> 4635, 5350, 4168, 5198 cdm$cohort1 %>%   filter(prior_observation >= 365) #> # Source:   SQL [4 x 8] #> # Database: DuckDB 0.7.1 [martics@Windows 10 x64:R 4.2.3/:memory:] #>   cohort_definition_id subject_id cohort_start_date cohort_end_date   age #>                  <dbl>      <dbl> <date>            <date>          <dbl> #> 1                    2          3 2020-01-01        2020-03-01         42 #> 2                    1          1 2020-06-01        2020-08-01         41 #> 3                    1          2 2020-01-02        2020-02-02         50 #> 4                    1          1 2020-01-01        2020-04-01         40 #> # ℹ 3 more variables: age_group <chr>, sex <chr>, prior_observation <dbl>"},{"path":[]},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/index.html","id":"detect-the-presence-of-another-cohort-in-a-certain-window","dir":"","previous_headings":"Example usage > Cohort intersections","what":"Detect the presence of another cohort in a certain window","title":"Identify Characteristics of Patients in the OMOP Common Data Model","text":"can use addCohortIntersectFlag add flag presence () cohort certain window.","code":"cdm$cohort1 %>%   glimpse() #> Rows: ?? #> Columns: 4 #> Database: DuckDB 0.7.1 [martics@Windows 10 x64:R 4.2.3/:memory:] #> $ cohort_definition_id <dbl> 1, 1, 1, 2 #> $ subject_id           <dbl> 1, 1, 2, 3 #> $ cohort_start_date    <date> 2020-01-01, 2020-06-01, 2020-01-02, 2020-01-01 #> $ cohort_end_date      <date> 2020-04-01, 2020-08-01, 2020-02-02, 2020-03-01  cdm$cohort1 <- cdm$cohort1 %>%   addCohortIntersectFlag(     targetCohortTable = \"cohort2\",     window = c(-Inf, -1)   )  cdm$cohort1 %>%   glimpse() #> Rows: ?? #> Columns: 7 #> Database: DuckDB 0.7.1 [martics@Windows 10 x64:R 4.2.3/:memory:] #> $ cohort_definition_id <dbl> 1, 1, 1, 2 #> $ subject_id           <dbl> 1, 1, 2, 3 #> $ cohort_start_date    <date> 2020-01-01, 2020-06-01, 2020-01-02, 2020-01-01 #> $ cohort_end_date      <date> 2020-04-01, 2020-08-01, 2020-02-02, 2020-03-01 #> $ cohort_1_minf_to_m1  <dbl> 1, 1, 0, 0 #> $ cohort_2_minf_to_m1  <dbl> 0, 1, 0, 0 #> $ cohort_3_minf_to_m1  <dbl> 0, 0, 0, 0"},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/index.html","id":"count-appearances-of-a-certain-cohort-in-a-certain-window","dir":"","previous_headings":"Example usage > Cohort intersections","what":"Count appearances of a certain cohort in a certain window","title":"Identify Characteristics of Patients in the OMOP Common Data Model","text":"wanted number appearances, instead use addCohortIntersectCount function","code":"cdm$cohort1 %>%   glimpse() #> Rows: ?? #> Columns: 4 #> Database: DuckDB 0.7.1 [martics@Windows 10 x64:R 4.2.3/:memory:] #> $ cohort_definition_id <dbl> 1, 1, 1, 2 #> $ subject_id           <dbl> 1, 1, 2, 3 #> $ cohort_start_date    <date> 2020-01-01, 2020-06-01, 2020-01-02, 2020-01-01 #> $ cohort_end_date      <date> 2020-04-01, 2020-08-01, 2020-02-02, 2020-03-01  cdm$cohort1 <- cdm$cohort1 %>%   addCohortIntersectCount(     targetCohortTable = \"cohort2\",     targetCohortId = 1,     window = list(\"short_term\" = c(1, 30), \"mid_term\" = c(31, 180))   )  cdm$cohort1 %>%   glimpse() #> Rows: ?? #> Columns: 6 #> Database: DuckDB 0.7.1 [martics@Windows 10 x64:R 4.2.3/:memory:] #> $ cohort_definition_id <dbl> 1, 1, 2, 1 #> $ subject_id           <dbl> 1, 1, 3, 2 #> $ cohort_start_date    <date> 2020-01-01, 2020-06-01, 2020-01-01, 2020-01-02 #> $ cohort_end_date      <date> 2020-04-01, 2020-08-01, 2020-03-01, 2020-02-02 #> $ cohort_1_short_term  <dbl> 0, 0, 0, 0 #> $ cohort_1_mid_term    <dbl> 1, 0, 0, 0"},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/index.html","id":"add-a-column-with-the-firstlast-event-in-a-certain-window","dir":"","previous_headings":"Example usage > Cohort intersections","what":"Add a column with the first/last event in a certain window","title":"Identify Characteristics of Patients in the OMOP Common Data Model","text":"Say wanted date individual another cohort can use addCohortIntersectDate function. might multiple records cohort, can also choose first last appearance cohort. First occurrence: Last occurrence:","code":"cdm$cohort1 %>%   glimpse() #> Rows: ?? #> Columns: 4 #> Database: DuckDB 0.7.1 [martics@Windows 10 x64:R 4.2.3/:memory:] #> $ cohort_definition_id <dbl> 1, 1, 1, 2 #> $ subject_id           <dbl> 1, 1, 2, 3 #> $ cohort_start_date    <date> 2020-01-01, 2020-06-01, 2020-01-02, 2020-01-01 #> $ cohort_end_date      <date> 2020-04-01, 2020-08-01, 2020-02-02, 2020-03-01  cdm$cohort1 <- cdm$cohort1 %>%   addCohortIntersectDate(     targetCohortTable = \"cohort2\",     targetCohortId = 1,     order = \"first\",     window = c(-Inf, Inf)   )  cdm$cohort1 %>%   glimpse() #> Rows: ?? #> Columns: 5 #> Database: DuckDB 0.7.1 [martics@Windows 10 x64:R 4.2.3/:memory:] #> $ cohort_definition_id <dbl> 1, 1, 2, 1 #> $ subject_id           <dbl> 1, 1, 3, 2 #> $ cohort_start_date    <date> 2020-01-01, 2020-06-01, 2020-01-01, 2020-01-02 #> $ cohort_end_date      <date> 2020-04-01, 2020-08-01, 2020-03-01, 2020-02-02 #> $ cohort_1_minf_to_inf <date> 2019-12-30, 2019-12-30, NA, NA cdm$cohort1 %>%   glimpse() #> Rows: ?? #> Columns: 4 #> Database: DuckDB 0.7.1 [martics@Windows 10 x64:R 4.2.3/:memory:] #> $ cohort_definition_id <dbl> 1, 1, 1, 2 #> $ subject_id           <dbl> 1, 1, 2, 3 #> $ cohort_start_date    <date> 2020-01-01, 2020-06-01, 2020-01-02, 2020-01-01 #> $ cohort_end_date      <date> 2020-04-01, 2020-08-01, 2020-02-02, 2020-03-01  cdm$cohort1 <- cdm$cohort1 %>%   addCohortIntersectDate(     targetCohortTable = \"cohort2\",     targetCohortId = 1,     order = \"last\",     window = c(-Inf, Inf)   )  cdm$cohort1 %>%   glimpse() #> Rows: ?? #> Columns: 5 #> Database: DuckDB 0.7.1 [martics@Windows 10 x64:R 4.2.3/:memory:] #> $ cohort_definition_id <dbl> 1, 1, 2, 1 #> $ subject_id           <dbl> 1, 1, 3, 2 #> $ cohort_start_date    <date> 2020-01-01, 2020-06-01, 2020-01-01, 2020-01-02 #> $ cohort_end_date      <date> 2020-04-01, 2020-08-01, 2020-03-01, 2020-02-02 #> $ cohort_1_minf_to_inf <date> 2020-05-25, 2020-05-25, NA, NA"},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/index.html","id":"add-the-number-of-days-instead-of-the-date","dir":"","previous_headings":"Example usage > Cohort intersections","what":"Add the number of days instead of the date","title":"Identify Characteristics of Patients in the OMOP Common Data Model","text":"Instead returning date, return days intersection using addCohortIntersectDays","code":"cdm$cohort1 %>%   glimpse() #> Rows: ?? #> Columns: 4 #> Database: DuckDB 0.7.1 [martics@Windows 10 x64:R 4.2.3/:memory:] #> $ cohort_definition_id <dbl> 1, 1, 1, 2 #> $ subject_id           <dbl> 1, 1, 2, 3 #> $ cohort_start_date    <date> 2020-01-01, 2020-06-01, 2020-01-02, 2020-01-01 #> $ cohort_end_date      <date> 2020-04-01, 2020-08-01, 2020-02-02, 2020-03-01  cdm$cohort1 <- cdm$cohort1 %>%   addCohortIntersectDays(     targetCohortTable = \"cohort2\",     targetCohortId = 1,     order = \"last\",     window = c(-Inf, Inf)   )  cdm$cohort1 %>%   glimpse() #> Rows: ?? #> Columns: 5 #> Database: DuckDB 0.7.1 [martics@Windows 10 x64:R 4.2.3/:memory:] #> $ cohort_definition_id <dbl> 1, 1, 2, 1 #> $ subject_id           <dbl> 1, 1, 3, 2 #> $ cohort_start_date    <date> 2020-01-01, 2020-06-01, 2020-01-01, 2020-01-02 #> $ cohort_end_date      <date> 2020-04-01, 2020-08-01, 2020-03-01, 2020-02-02 #> $ cohort_1_minf_to_inf <dbl> 145, -7, NA, NA"},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/index.html","id":"combine-multiple-cohort-intersects","dir":"","previous_headings":"Example usage > Cohort intersections","what":"Combine multiple cohort intersects","title":"Identify Characteristics of Patients in the OMOP Common Data Model","text":"want combine multiple cohort intersects can concatenate operations using pipe operator: efficient implementation getting multiple types intersection results provided addCohortIntersectTime","code":"cdm$cohort1 %>%   glimpse() #> Rows: ?? #> Columns: 4 #> Database: DuckDB 0.7.1 [martics@Windows 10 x64:R 4.2.3/:memory:] #> $ cohort_definition_id <dbl> 1, 1, 1, 2 #> $ subject_id           <dbl> 1, 1, 2, 3 #> $ cohort_start_date    <date> 2020-01-01, 2020-06-01, 2020-01-02, 2020-01-01 #> $ cohort_end_date      <date> 2020-04-01, 2020-08-01, 2020-02-02, 2020-03-01  cdm$cohort1 <- cdm$cohort1 %>%   addCohortIntersectDate(     targetCohortTable = \"cohort2\",     targetCohortId = 1,     order = \"last\",     window = c(-Inf, Inf)   ) %>%   addCohortIntersectCount(     targetCohortTable = \"cohort2\",     targetCohortId = 1,     window = c(-Inf, Inf)   )  cdm$cohort1 %>%   glimpse() #> Rows: ?? #> Columns: 5 #> Database: DuckDB 0.7.1 [martics@Windows 10 x64:R 4.2.3/:memory:] #> $ cohort_definition_id <dbl> 1, 1, 2, 1 #> $ subject_id           <dbl> 1, 1, 3, 2 #> $ cohort_start_date    <date> 2020-01-01, 2020-06-01, 2020-01-01, 2020-01-02 #> $ cohort_end_date      <date> 2020-04-01, 2020-08-01, 2020-03-01, 2020-02-02 #> $ cohort_1_minf_to_inf <dbl> 2, 2, NA, NA cdm$cohort1 %>%   glimpse() #> Rows: ?? #> Columns: 4 #> Database: DuckDB 0.7.1 [martics@Windows 10 x64:R 4.2.3/:memory:] #> $ cohort_definition_id <dbl> 1, 1, 1, 2 #> $ subject_id           <dbl> 1, 1, 2, 3 #> $ cohort_start_date    <date> 2020-01-01, 2020-06-01, 2020-01-02, 2020-01-01 #> $ cohort_end_date      <date> 2020-04-01, 2020-08-01, 2020-02-02, 2020-03-01  cdm$cohort1 <- cdm$cohort1 %>%   addCohortIntersect(     targetCohortTable = \"cohort2\",     targetCohortId = 1,     count = TRUE,     flag = TRUE,     days = TRUE,     date = TRUE,     window = list(\"any_time\" = c(-Inf, Inf))   )  cdm$cohort1 %>%   glimpse() #> Rows: ?? #> Columns: 8 #> Database: DuckDB 0.7.1 [martics@Windows 10 x64:R 4.2.3/:memory:] #> $ cohort_definition_id    <dbl> 1, 1, 2, 1 #> $ subject_id              <dbl> 1, 1, 3, 2 #> $ cohort_start_date       <date> 2020-01-01, 2020-06-01, 2020-01-01, 2020-01-02 #> $ cohort_end_date         <date> 2020-04-01, 2020-08-01, 2020-03-01, 2020-02-02 #> $ count_cohort_1_any_time <dbl> 2, 2, 0, 0 #> $ flag_cohort_1_any_time  <dbl> 1, 1, 0, 0 #> $ date_cohort_1_any_time  <date> 2019-12-30, 2019-12-30, NA, NA #> $ days_cohort_1_any_time  <dbl> -2, -154, NA, NA"},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/PatientProfiles-package.html","id":null,"dir":"Reference","previous_headings":"","what":"PatientProfiles: Identify Characteristics of Patients in the OMOP Common Data Model — PatientProfiles-package","title":"PatientProfiles: Identify Characteristics of Patients in the OMOP Common Data Model — PatientProfiles-package","text":"Identify characteristics patients data mapped Observational Medical Outcomes Partnership (OMOP) common data model.","code":""},{"path":[]},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/PatientProfiles-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"PatientProfiles: Identify Characteristics of Patients in the OMOP Common Data Model — PatientProfiles-package","text":"Maintainer: Marti Catala marti.catalasabate@ndorms.ox.ac.uk (ORCID) Authors: Yuchen Guo yuchen.guo@ndorms.ox.ac.uk (ORCID) Mike Du mike.du@ndorms.ox.ac.uk (ORCID) Kim Lopez-Guell kim.lopez@spc.ox.ac.uk (ORCID) Edward Burn edward.burn@ndorms.ox.ac.uk (ORCID) contributors: Nuria Mercade-Besora nuria.mercadebesora@ndorms.ox.ac.uk (ORCID) [contributor] Xintong Li xintong.li@ndorms.ox.ac.uk (ORCID) [contributor]","code":""},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/addAge.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute the age of the individuals at a certain date — addAge","title":"Compute the age of the individuals at a certain date — addAge","text":"Compute age individuals certain date","code":""},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/addAge.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute the age of the individuals at a certain date — addAge","text":"","code":"addAge(   x,   cdm = attr(x, \"cdm_reference\"),   indexDate = \"cohort_start_date\",   ageName = \"age\",   ageGroup = NULL,   ageDefaultMonth = 1,   ageDefaultDay = 1,   ageImposeMonth = FALSE,   ageImposeDay = FALSE )"},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/addAge.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute the age of the individuals at a certain date — addAge","text":"x Table individuals cdm. cdm Object contains cdm reference. Use CDMConnector obtain cdm reference. indexDate Variable x contains date compute age. ageName Name new column contains age. ageGroup List age groups added. ageDefaultMonth Month year assigned individuals missing month birth. default: 1. ageDefaultDay day month assigned individuals missing day birth. default: 1. ageImposeMonth Whether month date birth considered missing individuals. ageImposeDay Whether day date birth considered missing individuals.","code":""},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/addAge.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute the age of the individuals at a certain date — addAge","text":"tibble age column added","code":""},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/addAge.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute the age of the individuals at a certain date — addAge","text":"","code":"# \\donttest{ library(DBI) library(duckdb) library(PatientProfiles) cohort1 <- dplyr::tibble(   cohort_definition_id = c(\"1\", \"1\", \"1\"),   subject_id = c(\"1\", \"2\", \"3\"),   cohort_start_date = c(     as.Date(\"2010-01-01\"), as.Date(\"2010-01-01\"), as.Date(\"2010-01-01\")   ),   cohort_end_date = c(     as.Date(\"2015-01-01\"), as.Date(\"2013-01-01\"), as.Date(\"2018-01-01\")   ) )  person <- dplyr::tibble(   person_id = c(\"1\", \"2\", \"3\"),   gender_concept_id = c(\"8507\", \"8532\", \"8507\"),   year_of_birth = c(2000, 1995, NA),   month_of_birth = c(NA, 07, 08),   day_of_birth = c(01, 25, 03) ) cdm <- mockPatientProfiles(person = person, cohort1 = cohort1) addAge(x = cdm[[\"cohort1\"]], cdm = cdm) #> # Source:   table<dbplyr_001> [3 x 5] #> # Database: DuckDB v0.9.1 [unknown@Linux 6.2.0-1015-azure:R 4.3.2/:memory:] #>   cohort_definition_id subject_id cohort_start_date cohort_end_date   age #>   <chr>                <chr>      <date>            <date>          <dbl> #> 1 1                    1          2010-01-01        2015-01-01         10 #> 2 1                    2          2010-01-01        2013-01-01         14 #> 3 1                    3          2010-01-01        2018-01-01         NA # }"},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/addAttributes.html","id":null,"dir":"Reference","previous_headings":"","what":"Get attributes from one cohort to another — addAttributes","title":"Get attributes from one cohort to another — addAttributes","text":"Get attributes one cohort another","code":""},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/addAttributes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get attributes from one cohort to another — addAttributes","text":"","code":"addAttributes(newcohort, oldcohort)"},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/addAttributes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get attributes from one cohort to another — addAttributes","text":"newcohort cohort attach attributes oldcohort cohort get attributes","code":""},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/addAttributes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get attributes from one cohort to another — addAttributes","text":"new cohort added attributes given cohort","code":""},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/addAttributes.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get attributes from one cohort to another — addAttributes","text":"","code":"# \\donttest{ library(CDMConnector) library(PatientProfiles) library(dplyr) #>  #> Attaching package: ‘dplyr’ #> The following objects are masked from ‘package:stats’: #>  #>     filter, lag #> The following objects are masked from ‘package:base’: #>  #>     intersect, setdiff, setequal, union  cdm <- mockPatientProfiles() attributes(cdm$cohort1) #> $names #> [1] \"src\"        \"lazy_query\" #>  #> $class #> [1] \"GeneratedCohortSet\"    \"tbl_duckdb_connection\" \"tbl_dbi\"               #> [4] \"tbl_sql\"               \"tbl_lazy\"              \"tbl\"                   #>  #> $cohort_set #> # Source:   table<cohort1_set> [2 x 2] #> # Database: DuckDB v0.9.1 [unknown@Linux 6.2.0-1015-azure:R 4.3.2/:memory:] #>   cohort_definition_id cohort_name #>                  <dbl> <chr>       #> 1                    1 cohort_1    #> 2                    2 cohort_2    #>  #> $cohort_attrition #> # Source:   table<cohort1_attrition> [2 x 7] #> # Database: DuckDB v0.9.1 [unknown@Linux 6.2.0-1015-azure:R 4.3.2/:memory:] #>   cohort_definition_id number_records number_subjects reason           reason_id #>                  <dbl>          <int>           <int> <chr>                <dbl> #> 1                    1              3               2 Qualifying init…         1 #> 2                    2              1               1 Qualifying init…         1 #> # ℹ 2 more variables: excluded_records <dbl>, excluded_subjects <dbl> #>  #> $cohort_count #> # Source:   table<cohort1_count> [2 x 3] #> # Database: DuckDB v0.9.1 [unknown@Linux 6.2.0-1015-azure:R 4.3.2/:memory:] #>   cohort_definition_id number_records number_subjects #>                  <dbl>          <int>           <int> #> 1                    1              3               2 #> 2                    2              1               1 #>  #> $tbl_name #> [1] \"cohort1\" #>  #> $cdm_reference #> # OMOP CDM reference (tbl_duckdb_connection) #>  #> Tables: person, observation_period, visit_occurrence, condition_occurrence, drug_exposure, concept_ancestor, drug_strength, cohort1, cohort2 #>  x <- cdm$cohort1 %>%   filter(cohort_definition_id == 1) %>%   computeQuery() attributes(x) #> $names #> [1] \"src\"        \"lazy_query\" #>  #> $class #> [1] \"GeneratedCohortSet\"    \"tbl_duckdb_connection\" \"tbl_dbi\"               #> [4] \"tbl_sql\"               \"tbl_lazy\"              \"tbl\"                   #>  #> $cohort_set #> # Source:   table<cohort1_set> [2 x 2] #> # Database: DuckDB v0.9.1 [unknown@Linux 6.2.0-1015-azure:R 4.3.2/:memory:] #>   cohort_definition_id cohort_name #>                  <dbl> <chr>       #> 1                    1 cohort_1    #> 2                    2 cohort_2    #>  #> $cohort_attrition #> # Source:   table<cohort1_attrition> [2 x 7] #> # Database: DuckDB v0.9.1 [unknown@Linux 6.2.0-1015-azure:R 4.3.2/:memory:] #>   cohort_definition_id number_records number_subjects reason           reason_id #>                  <dbl>          <int>           <int> <chr>                <dbl> #> 1                    1              3               2 Qualifying init…         1 #> 2                    2              1               1 Qualifying init…         1 #> # ℹ 2 more variables: excluded_records <dbl>, excluded_subjects <dbl> #>  #> $cohort_count #> # Source:   table<cohort1_count> [2 x 3] #> # Database: DuckDB v0.9.1 [unknown@Linux 6.2.0-1015-azure:R 4.3.2/:memory:] #>   cohort_definition_id number_records number_subjects #>                  <dbl>          <int>           <int> #> 1                    1              3               2 #> 2                    2              1               1 #>  #> $tbl_name #> [1] \"cohort1\" #>  #> $cdm_reference #> # OMOP CDM reference (tbl_duckdb_connection) #>  #> Tables: person, observation_period, visit_occurrence, condition_occurrence, drug_exposure, concept_ancestor, drug_strength, cohort1, cohort2 #>  x <- addAttributes(x, cdm$cohort1) attributes(cdm$cohort1) #> $names #> [1] \"src\"        \"lazy_query\" #>  #> $class #> [1] \"GeneratedCohortSet\"    \"tbl_duckdb_connection\" \"tbl_dbi\"               #> [4] \"tbl_sql\"               \"tbl_lazy\"              \"tbl\"                   #>  #> $cohort_set #> # Source:   table<cohort1_set> [2 x 2] #> # Database: DuckDB v0.9.1 [unknown@Linux 6.2.0-1015-azure:R 4.3.2/:memory:] #>   cohort_definition_id cohort_name #>                  <dbl> <chr>       #> 1                    1 cohort_1    #> 2                    2 cohort_2    #>  #> $cohort_attrition #> # Source:   table<cohort1_attrition> [2 x 7] #> # Database: DuckDB v0.9.1 [unknown@Linux 6.2.0-1015-azure:R 4.3.2/:memory:] #>   cohort_definition_id number_records number_subjects reason           reason_id #>                  <dbl>          <int>           <int> <chr>                <dbl> #> 1                    1              3               2 Qualifying init…         1 #> 2                    2              1               1 Qualifying init…         1 #> # ℹ 2 more variables: excluded_records <dbl>, excluded_subjects <dbl> #>  #> $cohort_count #> # Source:   table<cohort1_count> [2 x 3] #> # Database: DuckDB v0.9.1 [unknown@Linux 6.2.0-1015-azure:R 4.3.2/:memory:] #>   cohort_definition_id number_records number_subjects #>                  <dbl>          <int>           <int> #> 1                    1              3               2 #> 2                    2              1               1 #>  #> $tbl_name #> [1] \"cohort1\" #>  #> $cdm_reference #> # OMOP CDM reference (tbl_duckdb_connection) #>  #> Tables: person, observation_period, visit_occurrence, condition_occurrence, drug_exposure, concept_ancestor, drug_strength, cohort1, cohort2 #>  # }"},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/addCategories.html","id":null,"dir":"Reference","previous_headings":"","what":"Categorize a numeric variable — addCategories","title":"Categorize a numeric variable — addCategories","text":"Categorize numeric variable","code":""},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/addCategories.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Categorize a numeric variable — addCategories","text":"","code":"addCategories(   x,   variable,   categories,   missingCategoryValue = \"None\",   overlap = FALSE )"},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/addCategories.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Categorize a numeric variable — addCategories","text":"x Table individuals cdm variable Target variable want categorize. categories List lists named categories lower upper limit. missingCategoryValue Value assign individuals named category. NULL NA, missing values given. overlap TRUE categories given overlap","code":""},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/addCategories.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Categorize a numeric variable — addCategories","text":"tibble categorical variable added.","code":""},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/addCategories.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Categorize a numeric variable — addCategories","text":"","code":"#' # \\donttest{ library(DBI) library(duckdb) library(PatientProfiles) cohort1 <- dplyr::tibble(   cohort_definition_id = c(\"1\", \"1\", \"1\"),   subject_id = c(\"1\", \"2\", \"3\"),   cohort_start_date = c(     as.Date(\"2010-03-03\"), as.Date(\"2010-03-01\"), as.Date(\"2010-02-01\")   ),   cohort_end_date = c(     as.Date(\"2015-01-01\"), as.Date(\"2013-01-01\"), as.Date(\"2013-01-01\")   ) )  person <- dplyr::tibble(   person_id = c(\"1\", \"2\", \"3\"),   gender_concept_id = c(\"8507\", \"8507\", \"8507\"),   year_of_birth = c(1980, 1970, 2000),   month_of_birth = c(03, 07, NA),   day_of_birth = c(NA, 02, 01) )  cdm <- mockPatientProfiles(person = person, cohort1 = cohort1)  result <- cdm$cohort1 %>%   addAge(cdm) %>%   addCategories(     variable = \"age\",     categories = list(\"age_group\" = list(       \"0 to 39\" = c(0, 39), \"40 to 79\" = c(40, 79), \"80 to 150\" = c(80, 150)     ))   ) # }"},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/addCdmName.html","id":null,"dir":"Reference","previous_headings":"","what":"Add cdm name — addCdmName","title":"Add cdm name — addCdmName","text":"Add cdm name","code":""},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/addCdmName.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add cdm name — addCdmName","text":"","code":"addCdmName(table, cdm = NULL)"},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/addCdmName.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add cdm name — addCdmName","text":"table Table cdm cdm cdm reference object","code":""},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/addCdmName.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add cdm name — addCdmName","text":"Table extra column cdm names","code":""},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/addCdmName.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add cdm name — addCdmName","text":"","code":"# \\donttest{ library(PatientProfiles)  cdm <- mockPatientProfiles() cdm$cohort1 %>%   addCdmName() #> # Source:   SQL [4 x 5] #> # Database: DuckDB v0.9.1 [unknown@Linux 6.2.0-1015-azure:R 4.3.2/:memory:] #>   cohort_definition_id subject_id cohort_start_date cohort_end_date cdm_name #>                  <dbl>      <dbl> <date>            <date>          <chr>    #> 1                    1          1 2020-01-01        2020-04-01      PP_MOCK  #> 2                    1          1 2020-06-01        2020-08-01      PP_MOCK  #> 3                    1          2 2020-01-02        2020-02-02      PP_MOCK  #> 4                    2          3 2020-01-01        2020-03-01      PP_MOCK  # }"},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/addCohortIntersect.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute the intersect with a target cohort, you can compute the number of\noccurrences, a flag of presence, a certain date and/or the time difference — addCohortIntersect","title":"Compute the intersect with a target cohort, you can compute the number of\noccurrences, a flag of presence, a certain date and/or the time difference — addCohortIntersect","text":"Compute intersect target cohort, can compute number occurrences, flag presence, certain date /time difference","code":""},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/addCohortIntersect.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute the intersect with a target cohort, you can compute the number of\noccurrences, a flag of presence, a certain date and/or the time difference — addCohortIntersect","text":"","code":"addCohortIntersect(   x,   cdm = attr(x, \"cdm_reference\"),   targetCohortTable,   targetCohortId = NULL,   indexDate = \"cohort_start_date\",   censorDate = NULL,   targetStartDate = \"cohort_start_date\",   targetEndDate = \"cohort_end_date\",   window = list(c(0, Inf)),   order = \"first\",   flag = TRUE,   count = TRUE,   date = TRUE,   days = TRUE,   nameStyle = \"{value}_{cohort_name}_{window_name}\" )"},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/addCohortIntersect.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute the intersect with a target cohort, you can compute the number of\noccurrences, a flag of presence, a certain date and/or the time difference — addCohortIntersect","text":"x Table individuals cdm cdm Object contains cdm reference. Use CDMConnector obtain cdm reference. targetCohortTable name cohort want check overlap targetCohortId vector cohort definition ids include indexDate Variable x contains date compute intersection. censorDate whether censor overlap events specific date column date x targetStartDate date reference cohort table, either start (overlap) (incidence) targetEndDate date reference cohort table, either end (overlap) NULL (incidence) window window consider events order record considered case multiple records flag TRUE FALSE. TRUE, flag calculated intersection count TRUE FALSE. TRUE, number counts calculated intersection date TRUE FALSE. TRUE, date calculated intersection days TRUE FALSE. TRUE, time difference days calculated intersection nameStyle naming added column columns, include required parameters","code":""},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/addCohortIntersect.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute the intersect with a target cohort, you can compute the number of\noccurrences, a flag of presence, a certain date and/or the time difference — addCohortIntersect","text":"table added columns overlap information","code":""},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/addCohortIntersect.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute the intersect with a target cohort, you can compute the number of\noccurrences, a flag of presence, a certain date and/or the time difference — addCohortIntersect","text":"","code":"# \\donttest{ cohort1 <- dplyr::tibble(   cohort_definition_id = c(1, 1, 1, 1, 1),   subject_id = c(1, 1, 1, 2, 2),   cohort_start_date = as.Date(     c(       \"2020-01-01\",       \"2020-01-15\",       \"2020-01-20\",       \"2020-01-01\",       \"2020-02-01\"     )   ),   cohort_end_date = as.Date(     c(       \"2020-01-01\",       \"2020-01-15\",       \"2020-01-20\",       \"2020-01-01\",       \"2020-02-01\"     )   ) )  cohort2 <- dplyr::tibble(   cohort_definition_id = c(1, 1, 1, 1, 1, 1, 1),   subject_id = c(1, 1, 1, 2, 2, 2, 1),   cohort_start_date = as.Date(     c(       \"2020-01-15\",       \"2020-01-25\",       \"2020-01-26\",       \"2020-01-29\",       \"2020-03-15\",       \"2020-01-24\",       \"2020-02-16\"     )   ),   cohort_end_date = as.Date(     c(       \"2020-01-15\",       \"2020-01-25\",       \"2020-01-26\",       \"2020-01-29\",       \"2020-03-15\",       \"2020-01-24\",       \"2020-02-16\"     )   ), )  cdm <- mockPatientProfiles(cohort1 = cohort1, cohort2 = cohort2)  result <- cdm$cohort1 %>%   addCohortIntersect(     targetCohortTable = \"cohort2\"   ) %>%   dplyr::collect() # }"},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/addCohortIntersectCount.html","id":null,"dir":"Reference","previous_headings":"","what":"It creates columns to indicate number of occurrences of intersection with a\ncohort — addCohortIntersectCount","title":"It creates columns to indicate number of occurrences of intersection with a\ncohort — addCohortIntersectCount","text":"creates columns indicate number occurrences intersection cohort","code":""},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/addCohortIntersectCount.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"It creates columns to indicate number of occurrences of intersection with a\ncohort — addCohortIntersectCount","text":"","code":"addCohortIntersectCount(   x,   cdm = attr(x, \"cdm_reference\"),   targetCohortTable,   targetCohortId = NULL,   indexDate = \"cohort_start_date\",   censorDate = NULL,   targetStartDate = \"cohort_start_date\",   targetEndDate = \"cohort_end_date\",   window = list(c(0, Inf)),   nameStyle = \"{cohort_name}_{window_name}\" )"},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/addCohortIntersectCount.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"It creates columns to indicate number of occurrences of intersection with a\ncohort — addCohortIntersectCount","text":"x Table individuals cdm cdm Object contains cdm reference. Use CDMConnector obtain cdm reference. targetCohortTable name cohort want check overlap targetCohortId vector cohort definition ids include indexDate Variable x contains date compute intersection. censorDate whether censor overlap events specific date column date x targetStartDate date reference cohort table, either start (overlap) (incidence) targetEndDate date reference cohort table, either end (overlap) NULL (incidence) window window consider events nameStyle naming added column columns, include required parameters","code":""},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/addCohortIntersectCount.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"It creates columns to indicate number of occurrences of intersection with a\ncohort — addCohortIntersectCount","text":"table added columns overlap information","code":""},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/addCohortIntersectCount.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"It creates columns to indicate number of occurrences of intersection with a\ncohort — addCohortIntersectCount","text":"","code":"# \\donttest{ library(PatientProfiles) library(dplyr)  cohort1 <- dplyr::tibble(   cohort_definition_id = c(1, 1, 1, 1, 1),   subject_id = c(1, 1, 1, 2, 2),   cohort_start_date = as.Date(     c(       \"2020-01-01\",       \"2020-01-15\",       \"2020-01-20\",       \"2020-01-01\",       \"2020-02-01\"     )   ),   cohort_end_date = as.Date(     c(       \"2020-01-01\",       \"2020-01-15\",       \"2020-01-20\",       \"2020-01-01\",       \"2020-02-01\"     )   ) )  cohort2 <- dplyr::tibble(   cohort_definition_id = c(1, 1, 1, 1, 1, 1, 1),   subject_id = c(1, 1, 1, 2, 2, 2, 1),   cohort_start_date = as.Date(     c(       \"2020-01-15\",       \"2020-01-25\",       \"2020-01-26\",       \"2020-01-29\",       \"2020-03-15\",       \"2020-01-24\",       \"2020-02-16\"     )   ),   cohort_end_date = as.Date(     c(       \"2020-01-15\",       \"2020-01-25\",       \"2020-01-26\",       \"2020-01-29\",       \"2020-03-15\",       \"2020-01-24\",       \"2020-02-16\"     )   ), )  cdm <- mockPatientProfiles(cohort1 = cohort1, cohort2 = cohort2)  result <- cdm$cohort1 %>%   addCohortIntersectCount(     targetCohortTable = \"cohort2\"   ) %>%   dplyr::collect() # }"},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/addCohortIntersectDate.html","id":null,"dir":"Reference","previous_headings":"","what":"Date of cohorts that are present in a certain window — addCohortIntersectDate","title":"Date of cohorts that are present in a certain window — addCohortIntersectDate","text":"Date cohorts present certain window","code":""},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/addCohortIntersectDate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Date of cohorts that are present in a certain window — addCohortIntersectDate","text":"","code":"addCohortIntersectDate(   x,   cdm = attr(x, \"cdm_reference\"),   targetCohortTable,   targetCohortId = NULL,   indexDate = \"cohort_start_date\",   censorDate = NULL,   targetDate = \"cohort_start_date\",   order = \"first\",   window = c(0, Inf),   nameStyle = \"{cohort_name}_{window_name}\" )"},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/addCohortIntersectDate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Date of cohorts that are present in a certain window — addCohortIntersectDate","text":"x Table individuals cdm cdm Object contains cdm reference. Use CDMConnector obtain cdm reference. targetCohortTable Cohort table targetCohortId Cohort IDs interest cohort table. NULL, cohorts used time variable added cohort interest indexDate Variable x contains date compute intersection. censorDate whether censor overlap events specific date column date x targetDate Date interest cohort table. Either cohort_start_date cohort_end_date order date use multiple records individual window interest. Either first last. window Window time identify records relative indexDate. Records outside time period ignored. nameStyle naming added column columns, include required parameters","code":""},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/addCohortIntersectDate.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Date of cohorts that are present in a certain window — addCohortIntersectDate","text":"x along additional columns cohort interest.","code":""},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/addCohortIntersectDate.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Date of cohorts that are present in a certain window — addCohortIntersectDate","text":"","code":"# \\donttest{ library(PatientProfiles) library(dplyr)  cohort1 <- dplyr::tibble(   cohort_definition_id = c(1, 1, 1, 1, 1),   subject_id = c(1, 1, 1, 2, 2),   cohort_start_date = as.Date(     c(       \"2020-01-01\",       \"2020-01-15\",       \"2020-01-20\",       \"2020-01-01\",       \"2020-02-01\"     )   ),   cohort_end_date = as.Date(     c(       \"2020-01-01\",       \"2020-01-15\",       \"2020-01-20\",       \"2020-01-01\",       \"2020-02-01\"     )   ) )  cohort2 <- dplyr::tibble(   cohort_definition_id = c(1, 1, 1, 1, 1, 1, 1),   subject_id = c(1, 1, 1, 2, 2, 2, 1),   cohort_start_date = as.Date(     c(       \"2020-01-15\",       \"2020-01-25\",       \"2020-01-26\",       \"2020-01-29\",       \"2020-03-15\",       \"2020-01-24\",       \"2020-02-16\"     )   ),   cohort_end_date = as.Date(     c(       \"2020-01-15\",       \"2020-01-25\",       \"2020-01-26\",       \"2020-01-29\",       \"2020-03-15\",       \"2020-01-24\",       \"2020-02-16\"     )   ), )  cdm <- mockPatientProfiles(cohort1 = cohort1, cohort2 = cohort2)  result <- cdm$cohort1 %>%   addCohortIntersectDate(     targetCohortTable = \"cohort2\"   ) %>%   dplyr::collect() # }"},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/addCohortIntersectDays.html","id":null,"dir":"Reference","previous_headings":"","what":"It creates columns to indicate the number of days between the current table\nand a target cohort — addCohortIntersectDays","title":"It creates columns to indicate the number of days between the current table\nand a target cohort — addCohortIntersectDays","text":"creates columns indicate number days current table target cohort","code":""},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/addCohortIntersectDays.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"It creates columns to indicate the number of days between the current table\nand a target cohort — addCohortIntersectDays","text":"","code":"addCohortIntersectDays(   x,   cdm = attr(x, \"cdm_reference\"),   targetCohortTable,   targetCohortId = NULL,   indexDate = \"cohort_start_date\",   censorDate = NULL,   targetDate = \"cohort_start_date\",   order = \"first\",   window = c(0, Inf),   nameStyle = \"{cohort_name}_{window_name}\" )"},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/addCohortIntersectDays.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"It creates columns to indicate the number of days between the current table\nand a target cohort — addCohortIntersectDays","text":"x Table individuals cdm cdm Object contains cdm reference. Use CDMConnector obtain cdm reference. targetCohortTable Cohort table targetCohortId Cohort IDs interest cohort table. NULL, cohorts used days variable added cohort interest indexDate Variable x contains date compute intersection. censorDate whether censor overlap events specific date column date x targetDate Date interest cohort table. Either cohort_start_date cohort_end_date order date use multiple records individual window interest. Either first last. window Window time identify records relative indexDate. Records outside time period ignored. nameStyle naming added column columns, include required parameters","code":""},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/addCohortIntersectDays.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"It creates columns to indicate the number of days between the current table\nand a target cohort — addCohortIntersectDays","text":"x along additional columns cohort interest.","code":""},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/addCohortIntersectDays.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"It creates columns to indicate the number of days between the current table\nand a target cohort — addCohortIntersectDays","text":"","code":"# \\donttest{ library(PatientProfiles) library(dplyr)  cohort1 <- dplyr::tibble(   cohort_definition_id = c(1, 1, 1, 1, 1),   subject_id = c(1, 1, 1, 2, 2),   cohort_start_date = as.Date(     c(       \"2020-01-01\",       \"2020-01-15\",       \"2020-01-20\",       \"2020-01-01\",       \"2020-02-01\"     )   ),   cohort_end_date = as.Date(     c(       \"2020-01-01\",       \"2020-01-15\",       \"2020-01-20\",       \"2020-01-01\",       \"2020-02-01\"     )   ) )  cohort2 <- dplyr::tibble(   cohort_definition_id = c(1, 1, 1, 1, 1, 1, 1),   subject_id = c(1, 1, 1, 2, 2, 2, 1),   cohort_start_date = as.Date(     c(       \"2020-01-15\",       \"2020-01-25\",       \"2020-01-26\",       \"2020-01-29\",       \"2020-03-15\",       \"2020-01-24\",       \"2020-02-16\"     )   ),   cohort_end_date = as.Date(     c(       \"2020-01-15\",       \"2020-01-25\",       \"2020-01-26\",       \"2020-01-29\",       \"2020-03-15\",       \"2020-01-24\",       \"2020-02-16\"     )   ), )  cdm <- mockPatientProfiles(cohort1 = cohort1, cohort2 = cohort2)  result <- cdm$cohort1 %>%   addCohortIntersectDays(     targetCohortTable = \"cohort2\"   ) %>%   dplyr::collect() # }"},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/addCohortIntersectFlag.html","id":null,"dir":"Reference","previous_headings":"","what":"It creates columns to indicate the presence of cohorts — addCohortIntersectFlag","title":"It creates columns to indicate the presence of cohorts — addCohortIntersectFlag","text":"creates columns indicate presence cohorts","code":""},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/addCohortIntersectFlag.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"It creates columns to indicate the presence of cohorts — addCohortIntersectFlag","text":"","code":"addCohortIntersectFlag(   x,   cdm = attr(x, \"cdm_reference\"),   targetCohortTable,   targetCohortId = NULL,   indexDate = \"cohort_start_date\",   censorDate = NULL,   targetStartDate = \"cohort_start_date\",   targetEndDate = \"cohort_end_date\",   window = list(c(0, Inf)),   nameStyle = \"{cohort_name}_{window_name}\" )"},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/addCohortIntersectFlag.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"It creates columns to indicate the presence of cohorts — addCohortIntersectFlag","text":"x Table individuals cdm cdm Object contains cdm reference. Use CDMConnector obtain cdm reference. targetCohortTable name cohort want check overlap targetCohortId vector cohort definition ids include indexDate Variable x contains date compute intersection. censorDate whether censor overlap events specific date column date x targetStartDate date reference cohort table, either start (overlap) (incidence) targetEndDate date reference cohort table, either end (overlap) NULL (incidence) window window consider events nameStyle naming added column columns, include required parameters","code":""},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/addCohortIntersectFlag.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"It creates columns to indicate the presence of cohorts — addCohortIntersectFlag","text":"table added columns overlap information","code":""},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/addCohortIntersectFlag.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"It creates columns to indicate the presence of cohorts — addCohortIntersectFlag","text":"","code":"# \\donttest{ cohort1 <- dplyr::tibble(   cohort_definition_id = c(1, 1, 1, 1, 1),   subject_id = c(1, 1, 1, 2, 2),   cohort_start_date = as.Date(     c(       \"2020-01-01\",       \"2020-01-15\",       \"2020-01-20\",       \"2020-01-01\",       \"2020-02-01\"     )   ),   cohort_end_date = as.Date(     c(       \"2020-01-01\",       \"2020-01-15\",       \"2020-01-20\",       \"2020-01-01\",       \"2020-02-01\"     )   ) )  cohort2 <- dplyr::tibble(   cohort_definition_id = c(1, 1, 1, 1, 1, 1, 1),   subject_id = c(1, 1, 1, 2, 2, 2, 1),   cohort_start_date = as.Date(     c(       \"2020-01-15\",       \"2020-01-25\",       \"2020-01-26\",       \"2020-01-29\",       \"2020-03-15\",       \"2020-01-24\",       \"2020-02-16\"     )   ),   cohort_end_date = as.Date(     c(       \"2020-01-15\",       \"2020-01-25\",       \"2020-01-26\",       \"2020-01-29\",       \"2020-03-15\",       \"2020-01-24\",       \"2020-02-16\"     )   ), )  cdm <- mockPatientProfiles(cohort1 = cohort1, cohort2 = cohort2)  result <- cdm$cohort1 %>%   addCohortIntersectFlag(     targetCohortTable = \"cohort2\"   ) %>%   dplyr::collect() # }"},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/addCohortName.html","id":null,"dir":"Reference","previous_headings":"","what":"Add cohort name for each cohort_definition_id — addCohortName","title":"Add cohort name for each cohort_definition_id — addCohortName","text":"Add cohort name cohort_definition_id","code":""},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/addCohortName.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add cohort name for each cohort_definition_id — addCohortName","text":"","code":"addCohortName(cohort)"},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/addCohortName.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add cohort name for each cohort_definition_id — addCohortName","text":"cohort cohort add cohort name","code":""},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/addCohortName.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add cohort name for each cohort_definition_id — addCohortName","text":"cohort extra column cohort names","code":""},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/addCohortName.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add cohort name for each cohort_definition_id — addCohortName","text":"","code":"# \\donttest{ library(PatientProfiles)  cdm <- mockPatientProfiles() cdm$cohort1 %>%   addCohortName() #> # Source:   SQL [4 x 5] #> # Database: DuckDB v0.9.1 [unknown@Linux 6.2.0-1015-azure:R 4.3.2/:memory:] #>   cohort_definition_id subject_id cohort_start_date cohort_end_date cohort_name #>                  <dbl>      <dbl> <date>            <date>          <chr>       #> 1                    1          1 2020-01-01        2020-04-01      cohort_1    #> 2                    1          1 2020-06-01        2020-08-01      cohort_1    #> 3                    1          2 2020-01-02        2020-02-02      cohort_1    #> 4                    2          3 2020-01-01        2020-03-01      cohort_2    # }"},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/addConceptIntersect.html","id":null,"dir":"Reference","previous_headings":"","what":"It creates columns to indicate overlap information between a table and a\nconcept — addConceptIntersect","title":"It creates columns to indicate overlap information between a table and a\nconcept — addConceptIntersect","text":"creates columns indicate overlap information table concept","code":""},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/addConceptIntersect.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"It creates columns to indicate overlap information between a table and a\nconcept — addConceptIntersect","text":"","code":"addConceptIntersect(   x,   conceptSet,   indexDate = \"cohort_start_date\",   censorDate = NULL,   window = list(c(0, Inf)),   targetStartDate = \"cohort_start_date\",   targetEndDate = NULL,   order = \"first\",   flag = TRUE,   count = TRUE,   date = TRUE,   days = TRUE,   nameStyle = \"{value}_{concept_name}_{window_name}\" )"},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/addConceptIntersect.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"It creates columns to indicate overlap information between a table and a\nconcept — addConceptIntersect","text":"x Table individuals cdm conceptSet Concept set list. indexDate Variable x contains date compute intersection. censorDate whether censor overlap events date column x window window consider events . targetStartDate date reference cohort table, either start (overlap) (incidence) targetEndDate date reference cohort table, either end (overlap) NULL (incidence) order record considered case multiple records flag TRUE FALSE. TRUE, flag calculated intersection count TRUE FALSE. TRUE, number counts calculated intersection date TRUE FALSE. TRUE, date calculated intersection days TRUE FALSE. TRUE, time difference days calculated intersection nameStyle naming added column columns, include required parameters","code":""},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/addConceptIntersect.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"It creates columns to indicate overlap information between a table and a\nconcept — addConceptIntersect","text":"table added columns overlap information","code":""},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/addConceptIntersect.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"It creates columns to indicate overlap information between a table and a\nconcept — addConceptIntersect","text":"","code":"# \\donttest{ library(PatientProfiles) library(CodelistGenerator)  cdm <- mockPatientProfiles() # result <- cdm$cohort1 %>% #   addConceptIntersect( #     conceptSet = getDrugIngredientCodes(cdm, \"acetaminophen\") #  ) %>% #   dplyr::collect() # }"},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/addConceptIntersectCount.html","id":null,"dir":"Reference","previous_headings":"","what":"It creates column to indicate the count overlap information between a table\nand a concept — addConceptIntersectCount","title":"It creates column to indicate the count overlap information between a table\nand a concept — addConceptIntersectCount","text":"creates column indicate count overlap information table concept","code":""},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/addConceptIntersectCount.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"It creates column to indicate the count overlap information between a table\nand a concept — addConceptIntersectCount","text":"","code":"addConceptIntersectCount(   x,   conceptSet,   indexDate = \"cohort_start_date\",   censorDate = NULL,   window = list(c(0, Inf)),   targetStartDate = \"cohort_start_date\",   targetEndDate = NULL,   order = \"first\",   nameStyle = \"{concept_name}_{window_name}\" )"},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/addConceptIntersectCount.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"It creates column to indicate the count overlap information between a table\nand a concept — addConceptIntersectCount","text":"x Table individuals cdm conceptSet Concept set list. indexDate Variable x contains date compute intersection. censorDate whether censor overlap events date column x window window consider events . targetStartDate date reference cohort table, either start (overlap) (incidence) targetEndDate date reference cohort table, either end (overlap) NULL (incidence) order last first date use date/time calculations. nameStyle naming added column columns, include required parameters","code":""},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/addConceptIntersectCount.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"It creates column to indicate the count overlap information between a table\nand a concept — addConceptIntersectCount","text":"table added columns overlap information","code":""},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/addConceptIntersectCount.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"It creates column to indicate the count overlap information between a table\nand a concept — addConceptIntersectCount","text":"","code":"# \\donttest{ library(PatientProfiles) library(CodelistGenerator)  cdm <- mockPatientProfiles() # result <- cdm$cohort1 %>% #   addConceptIntersectCount( #     conceptSet = getDrugIngredientCodes(cdm, \"acetaminophen\") #  ) %>% #   dplyr::collect() # }"},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/addConceptIntersectDate.html","id":null,"dir":"Reference","previous_headings":"","what":"It creates column to indicate the date overlap information between a table\nand a concept — addConceptIntersectDate","title":"It creates column to indicate the date overlap information between a table\nand a concept — addConceptIntersectDate","text":"creates column indicate date overlap information table concept","code":""},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/addConceptIntersectDate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"It creates column to indicate the date overlap information between a table\nand a concept — addConceptIntersectDate","text":"","code":"addConceptIntersectDate(   x,   conceptSet,   indexDate = \"cohort_start_date\",   censorDate = NULL,   window = list(c(0, Inf)),   targetDate = \"cohort_start_date\",   order = \"first\",   nameStyle = \"{concept_name}_{window_name}\" )"},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/addConceptIntersectDate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"It creates column to indicate the date overlap information between a table\nand a concept — addConceptIntersectDate","text":"x Table individuals cdm conceptSet Concept set list. indexDate Variable x contains date compute intersection. censorDate whether censor overlap events date column x window window consider events . targetDate date reference cohort table order last first date use date/time calculations. nameStyle naming added column columns, include required parameters","code":""},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/addConceptIntersectDate.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"It creates column to indicate the date overlap information between a table\nand a concept — addConceptIntersectDate","text":"table added columns overlap information","code":""},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/addConceptIntersectDate.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"It creates column to indicate the date overlap information between a table\nand a concept — addConceptIntersectDate","text":"","code":"# \\donttest{ library(PatientProfiles) library(CodelistGenerator)  cdm <- mockPatientProfiles() # result <- cdm$cohort1 %>% #   addConceptIntersectDate( #     conceptSet = getDrugIngredientCodes(cdm, \"acetaminophen\") #  ) %>% #   dplyr::collect() # }"},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/addConceptIntersectDays.html","id":null,"dir":"Reference","previous_headings":"","what":"It creates column to indicate the days of difference from an index date to a\nconcept — addConceptIntersectDays","title":"It creates column to indicate the days of difference from an index date to a\nconcept — addConceptIntersectDays","text":"creates column indicate days difference index date concept","code":""},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/addConceptIntersectDays.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"It creates column to indicate the days of difference from an index date to a\nconcept — addConceptIntersectDays","text":"","code":"addConceptIntersectDays(   x,   conceptSet,   indexDate = \"cohort_start_date\",   censorDate = NULL,   window = list(c(0, Inf)),   targetDate = \"cohort_start_date\",   order = \"first\",   nameStyle = \"{concept_name}_{window_name}\" )"},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/addConceptIntersectDays.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"It creates column to indicate the days of difference from an index date to a\nconcept — addConceptIntersectDays","text":"x Table individuals cdm conceptSet Concept set list. indexDate Variable x contains date compute intersection. censorDate whether censor overlap events date column x window window consider events . targetDate date reference cohort table order last first date use date/time calculations. nameStyle naming added column columns, include required parameters","code":""},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/addConceptIntersectDays.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"It creates column to indicate the days of difference from an index date to a\nconcept — addConceptIntersectDays","text":"table added columns overlap information","code":""},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/addConceptIntersectDays.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"It creates column to indicate the days of difference from an index date to a\nconcept — addConceptIntersectDays","text":"","code":"# \\donttest{ library(PatientProfiles) library(CodelistGenerator)  cdm <- mockPatientProfiles() # result <- cdm$cohort1 %>% #   addConceptIntersectDays( #     conceptSet = getDrugIngredientCodes(cdm, \"acetaminophen\") #  ) %>% #   dplyr::collect() # }"},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/addConceptIntersectFlag.html","id":null,"dir":"Reference","previous_headings":"","what":"It creates column to indicate the flag overlap information between a table\nand a concept — addConceptIntersectFlag","title":"It creates column to indicate the flag overlap information between a table\nand a concept — addConceptIntersectFlag","text":"creates column indicate flag overlap information table concept","code":""},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/addConceptIntersectFlag.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"It creates column to indicate the flag overlap information between a table\nand a concept — addConceptIntersectFlag","text":"","code":"addConceptIntersectFlag(   x,   conceptSet,   indexDate = \"cohort_start_date\",   censorDate = NULL,   window = list(c(0, Inf)),   targetStartDate = \"cohort_start_date\",   targetEndDate = NULL,   order = \"first\",   nameStyle = \"{concept_name}_{window_name}\" )"},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/addConceptIntersectFlag.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"It creates column to indicate the flag overlap information between a table\nand a concept — addConceptIntersectFlag","text":"x Table individuals cdm conceptSet Concept set list. indexDate Variable x contains date compute intersection. censorDate whether censor overlap events date column x window window consider events . targetStartDate date reference cohort table, either start (overlap) (incidence) targetEndDate date reference cohort table, either end (overlap) NULL (incidence) order last first date use date/time calculations. nameStyle naming added column columns, include required parameters","code":""},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/addConceptIntersectFlag.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"It creates column to indicate the flag overlap information between a table\nand a concept — addConceptIntersectFlag","text":"table added columns overlap information","code":""},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/addConceptIntersectFlag.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"It creates column to indicate the flag overlap information between a table\nand a concept — addConceptIntersectFlag","text":"","code":"# \\donttest{ library(PatientProfiles) library(CodelistGenerator)  cdm <- mockPatientProfiles() # result <- cdm$cohort1 %>% #   addConceptIntersectFlag( #     conceptSet = getDrugIngredientCodes(cdm, \"acetaminophen\") #  ) %>% #   dplyr::collect() # }"},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/addDateOfBirth.html","id":null,"dir":"Reference","previous_headings":"","what":"Add a column with the individual birth date — addDateOfBirth","title":"Add a column with the individual birth date — addDateOfBirth","text":"Add column individual birth date","code":""},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/addDateOfBirth.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add a column with the individual birth date — addDateOfBirth","text":"","code":"addDateOfBirth(   x,   cdm = attr(x, \"cdm_reference\"),   name = \"date_of_birth\",   missingDay = 1,   missingMonth = 1,   imposeDay = FALSE,   imposeMonth = FALSE )"},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/addDateOfBirth.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add a column with the individual birth date — addDateOfBirth","text":"x Table cdm contains 'person_id' 'subject_id' cdm 'cdm' object created CDMConnector::cdm_from_con(). name Name column added date birth missingDay Day individuals imposed day birth missingMonth Month individuals imposed month birth imposeDay Whether impose day birth imposeMonth Whether impose month birth","code":""},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/addDateOfBirth.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add a column with the individual birth date — addDateOfBirth","text":"function returns table x extra column contains date birth","code":""},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/addDateOfBirth.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add a column with the individual birth date — addDateOfBirth","text":"","code":"# \\donttest{ library(PatientProfiles) cdm <- mockPatientProfiles() cdm$cohort1 %>%   addDateOfBirth() #> # Source:   SQL [4 x 5] #> # Database: DuckDB v0.9.1 [unknown@Linux 6.2.0-1015-azure:R 4.3.2/:memory:] #>   cohort_definition_id subject_id cohort_start_date cohort_end_date #>                  <dbl>      <dbl> <date>            <date>          #> 1                    1          1 2020-01-01        2020-04-01      #> 2                    1          1 2020-06-01        2020-08-01      #> 3                    1          2 2020-01-02        2020-02-02      #> 4                    2          3 2020-01-01        2020-03-01      #> # ℹ 1 more variable: date_of_birth <date> # }"},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/addDemographics.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute demographic characteristics at a certain date — addDemographics","title":"Compute demographic characteristics at a certain date — addDemographics","text":"Compute demographic characteristics certain date","code":""},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/addDemographics.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute demographic characteristics at a certain date — addDemographics","text":"","code":"addDemographics(   x,   cdm = attr(x, \"cdm_reference\"),   indexDate = \"cohort_start_date\",   age = TRUE,   ageName = \"age\",   ageDefaultMonth = 1,   ageDefaultDay = 1,   ageImposeMonth = FALSE,   ageImposeDay = FALSE,   ageGroup = NULL,   sex = TRUE,   sexName = \"sex\",   priorObservation = TRUE,   priorObservationName = \"prior_observation\",   futureObservation = TRUE,   futureObservationName = \"future_observation\" )"},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/addDemographics.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute demographic characteristics at a certain date — addDemographics","text":"x Table individuals cdm cdm Object contains cdm reference. Use CDMConnector obtain cdm reference. indexDate Variable x contains date compute demographics characteristics. age TRUE FALSE. TRUE, age calculated relative indexDate ageName Age variable name ageDefaultMonth Month year assigned individuals missing month birth. ageDefaultDay day month assigned individuals missing day birth. ageImposeMonth TRUE FALSE. Whether month date birth considered missing individuals. ageImposeDay TRUE FALSE. Whether day date birth considered missing individuals. ageGroup NULL, list ageGroup vectors sex TRUE FALSE. TRUE, sex identified sexName Sex variable name priorObservation TRUE FALSE. TRUE, days start current observation period indexDate calculated priorObservationName Prior observation variable name futureObservation TRUE FALSE. TRUE, days indexDate end current observation period calculated futureObservationName Future observation variable name","code":""},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/addDemographics.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute demographic characteristics at a certain date — addDemographics","text":"cohort table added demographic information columns","code":""},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/addDemographics.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute demographic characteristics at a certain date — addDemographics","text":"","code":"# \\donttest{ library(PatientProfiles) cdm <- mockPatientProfiles() cdm$cohort1 %>% addDemographics(cdm) #> # Source:   table<dbplyr_022> [4 x 8] #> # Database: DuckDB v0.9.1 [unknown@Linux 6.2.0-1015-azure:R 4.3.2/:memory:] #>   cohort_definition_id subject_id cohort_start_date cohort_end_date   age sex   #>                  <dbl>      <dbl> <date>            <date>          <dbl> <chr> #> 1                    1          1 2020-01-01        2020-04-01         25 Male  #> 2                    1          1 2020-06-01        2020-08-01         26 Male  #> 3                    1          2 2020-01-02        2020-02-02         NA None  #> 4                    2          3 2020-01-01        2020-03-01         NA None  #> # ℹ 2 more variables: prior_observation <dbl>, future_observation <dbl> # }"},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/addFutureObservation.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute the number of days till the end of the observation period at a\ncertain date — addFutureObservation","title":"Compute the number of days till the end of the observation period at a\ncertain date — addFutureObservation","text":"Compute number days till end observation period certain date","code":""},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/addFutureObservation.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute the number of days till the end of the observation period at a\ncertain date — addFutureObservation","text":"","code":"addFutureObservation(   x,   cdm = attr(x, \"cdm_reference\"),   indexDate = \"cohort_start_date\",   futureObservationName = \"future_observation\" )"},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/addFutureObservation.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute the number of days till the end of the observation period at a\ncertain date — addFutureObservation","text":"x Table individuals cdm. cdm Object contains cdm reference. Use CDMConnector obtain cdm reference. indexDate Variable x contains date compute future observation. futureObservationName name new column added","code":""},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/addFutureObservation.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute the number of days till the end of the observation period at a\ncertain date — addFutureObservation","text":"cohort table added column containing future observation individuals","code":""},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/addFutureObservation.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute the number of days till the end of the observation period at a\ncertain date — addFutureObservation","text":"","code":"# \\donttest{ library(DBI) library(duckdb) library(PatientProfiles) cohort1 <- dplyr::tibble(   cohort_definition_id = c(\"1\", \"1\", \"1\"),   subject_id = c(\"1\", \"2\", \"3\"),   cohort_start_date = c(     as.Date(\"2010-03-03\"),     as.Date(\"2010-03-01\"),     as.Date(\"2010-02-01\")   ),   cohort_end_date = c(     as.Date(\"2015-01-01\"),     as.Date(\"2013-01-01\"),     as.Date(\"2013-01-01\")   ) )  obs_1 <- dplyr::tibble(   observation_period_id = c(\"1\", \"2\", \"3\"),   person_id = c(\"1\", \"2\", \"3\"),   observation_period_start_date = c(     as.Date(\"2010-02-03\"),     as.Date(\"2010-02-01\"),     as.Date(\"2010-01-01\")   ),   observation_period_end_date = c(     as.Date(\"2014-01-01\"),     as.Date(\"2012-01-01\"),     as.Date(\"2012-01-01\")   ) )  cdm <-   mockPatientProfiles(     seed = 1,     cohort1 = cohort1,     observation_period = obs_1   )  result <- cdm$cohort1 %>% addFutureObservation(cdm) # }"},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/addInObservation.html","id":null,"dir":"Reference","previous_headings":"","what":"Indicate if a certain record is within the observation period — addInObservation","title":"Indicate if a certain record is within the observation period — addInObservation","text":"Indicate certain record within observation period","code":""},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/addInObservation.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Indicate if a certain record is within the observation period — addInObservation","text":"","code":"addInObservation(   x,   cdm = attr(x, \"cdm_reference\"),   indexDate = \"cohort_start_date\",   name = \"in_observation\" )"},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/addInObservation.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Indicate if a certain record is within the observation period — addInObservation","text":"x Table individuals cdm. cdm Object contains cdm reference. Use CDMConnector obtain cdm reference. indexDate Variable x contains date compute observation flag. name name column hold result query: 1 individual observation, 0 ","code":""},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/addInObservation.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Indicate if a certain record is within the observation period — addInObservation","text":"cohort table added binary column assessing inObservation","code":""},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/addInObservation.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Indicate if a certain record is within the observation period — addInObservation","text":"","code":"# \\donttest{ library(PatientProfiles) cdm <- mockPatientProfiles() cdm$cohort1 %>% addInObservation(cdm) #> # Source:   table<dbplyr_025> [4 x 5] #> # Database: DuckDB v0.9.1 [unknown@Linux 6.2.0-1015-azure:R 4.3.2/:memory:] #>   cohort_definition_id subject_id cohort_start_date cohort_end_date #>                  <dbl>      <dbl> <date>            <date>          #> 1                    1          1 2020-01-01        2020-04-01      #> 2                    1          1 2020-06-01        2020-08-01      #> 3                    1          2 2020-01-02        2020-02-02      #> 4                    2          3 2020-01-01        2020-03-01      #> # ℹ 1 more variable: in_observation <dbl> # }"},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/addIntersect.html","id":null,"dir":"Reference","previous_headings":"","what":"It creates columns to indicate overlap information between two tables — addIntersect","title":"It creates columns to indicate overlap information between two tables — addIntersect","text":"creates columns indicate overlap information two tables","code":""},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/addIntersect.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"It creates columns to indicate overlap information between two tables — addIntersect","text":"","code":"addIntersect(   x,   cdm = attr(x, \"cdm_reference\"),   tableName,   value,   filterVariable = NULL,   filterId = NULL,   idName = NULL,   window = list(c(0, Inf)),   indexDate = \"cohort_start_date\",   censorDate = NULL,   targetStartDate = getStartName(tableName),   targetEndDate = getEndName(tableName),   order = \"first\",   nameStyle = \"{value}_{id_name}_{window_name}\" )"},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/addIntersect.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"It creates columns to indicate overlap information between two tables — addIntersect","text":"x Table individuals cdm cdm Object contains cdm reference. Use CDMConnector obtain cdm reference. tableName name cohort want check overlap value value interest add: can count, flag, date time filterVariable variable going use filter (e.g. cohort_definition_id) filterId value filterVariable interested , can vector idName name filterId, must length filterId window window consider events indexDate Variable x contains date compute intersection. censorDate whether censor overlap events date column x targetStartDate date reference cohort table, either start (overlap) (incidence) targetEndDate date reference cohort table, either end (overlap) NULL (incidence) order last first date use date/time calculations nameStyle naming added column columns, include required parameters","code":""},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/addIntersect.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"It creates columns to indicate overlap information between two tables — addIntersect","text":"table added columns overlap information","code":""},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/addIntersect.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"It creates columns to indicate overlap information between two tables — addIntersect","text":"","code":"# \\donttest{ library(PatientProfiles)  cdm <- mockPatientProfiles() result <- cdm$cohort1 %>%   addIntersect(tableName = \"cohort2\", value = \"date\") %>%   dplyr::collect() # }"},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/addLargeScaleCharacteristics.html","id":null,"dir":"Reference","previous_headings":"","what":"This function is used to add columns with the large scale characteristics of\na cohort table. — addLargeScaleCharacteristics","title":"This function is used to add columns with the large scale characteristics of\na cohort table. — addLargeScaleCharacteristics","text":"function used add columns large scale characteristics cohort table.","code":""},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/addLargeScaleCharacteristics.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"This function is used to add columns with the large scale characteristics of\na cohort table. — addLargeScaleCharacteristics","text":"","code":"addLargeScaleCharacteristics(   cohort,   window = list(c(0, Inf)),   eventInWindow = NULL,   episodeInWindow = NULL,   includeSource = FALSE,   minimumFrequency = 0.005 )"},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/addLargeScaleCharacteristics.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"This function is used to add columns with the large scale characteristics of\na cohort table. — addLargeScaleCharacteristics","text":"cohort cohort characterise. window Temporal windows want characterize. eventInWindow Tables characterise events window. episodeInWindow Tables characterise episodes window. includeSource Whether include source concepts. minimumFrequency Minimum frequency covariates report.","code":""},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/addLargeScaleCharacteristics.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"This function is used to add columns with the large scale characteristics of\na cohort table. — addLargeScaleCharacteristics","text":"output function cohort new created columns","code":""},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/addPriorObservation.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute the number of days of prior observation in the current observation period\nat a certain date — addPriorObservation","title":"Compute the number of days of prior observation in the current observation period\nat a certain date — addPriorObservation","text":"Compute number days prior observation current observation period certain date","code":""},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/addPriorObservation.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute the number of days of prior observation in the current observation period\nat a certain date — addPriorObservation","text":"","code":"addPriorObservation(   x,   cdm = attr(x, \"cdm_reference\"),   indexDate = \"cohort_start_date\",   priorObservationName = \"prior_observation\" )"},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/addPriorObservation.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute the number of days of prior observation in the current observation period\nat a certain date — addPriorObservation","text":"x Table individuals cdm cdm Object contains cdm reference. Use CDMConnector obtain cdm reference. indexDate Variable x contains date compute prior observation. priorObservationName name new column added","code":""},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/addPriorObservation.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute the number of days of prior observation in the current observation period\nat a certain date — addPriorObservation","text":"cohort table added column containing prior observation individuals","code":""},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/addPriorObservation.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute the number of days of prior observation in the current observation period\nat a certain date — addPriorObservation","text":"","code":"# \\donttest{ library(DBI) library(duckdb) library(PatientProfiles) cohort1 <- dplyr::tibble(   cohort_definition_id = c(\"1\", \"1\", \"1\"),   subject_id = c(\"1\", \"2\", \"3\"),   cohort_start_date = c(     as.Date(\"2010-03-03\"),     as.Date(\"2010-03-01\"),     as.Date(\"2010-02-01\")   ),   cohort_end_date = c(     as.Date(\"2015-01-01\"),     as.Date(\"2013-01-01\"),     as.Date(\"2013-01-01\")   ) )  obs_1 <- dplyr::tibble(   observation_period_id = c(\"1\", \"2\", \"3\"),   person_id = c(\"1\", \"2\", \"3\"),   observation_period_start_date = c(     as.Date(\"2010-02-03\"),     as.Date(\"2010-02-01\"),     as.Date(\"2010-01-01\")   ),   observation_period_end_date = c(     as.Date(\"2014-01-01\"),     as.Date(\"2012-01-01\"),     as.Date(\"2012-01-01\")   ) )  cdm <-   mockPatientProfiles(     seed = 1,     cohort1 = cohort1,     observation_period = obs_1   )  result <- cdm$cohort1 %>% addPriorObservation(cdm) # }"},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/addSex.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute the sex of the individuals — addSex","title":"Compute the sex of the individuals — addSex","text":"Compute sex individuals","code":""},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/addSex.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute the sex of the individuals — addSex","text":"","code":"addSex(x, cdm = attr(x, \"cdm_reference\"), sexName = \"sex\")"},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/addSex.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute the sex of the individuals — addSex","text":"x Table individuals cdm cdm Object contains cdm reference. Use CDMConnector obtain cdm reference. sexName name new column added","code":""},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/addSex.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute the sex of the individuals — addSex","text":"table x added column sex information","code":""},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/addSex.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute the sex of the individuals — addSex","text":"","code":"# \\donttest{ library(PatientProfiles) cdm <- mockPatientProfiles() cdm$cohort1 %>% addSex(cdm) #> # Source:   table<dbplyr_030> [4 x 5] #> # Database: DuckDB v0.9.1 [unknown@Linux 6.2.0-1015-azure:R 4.3.2/:memory:] #>   cohort_definition_id subject_id cohort_start_date cohort_end_date sex   #>                  <dbl>      <dbl> <date>            <date>          <chr> #> 1                    1          1 2020-01-01        2020-04-01      Male  #> 2                    1          1 2020-06-01        2020-08-01      Male  #> 3                    1          2 2020-01-02        2020-02-02      None  #> 4                    2          3 2020-01-01        2020-03-01      None  # }"},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/availableFunctions.html","id":null,"dir":"Reference","previous_headings":"","what":"Show the available functions for the 4 classifications of data that are\nsupported (numeric, date, binary and categorical) — availableFunctions","title":"Show the available functions for the 4 classifications of data that are\nsupported (numeric, date, binary and categorical) — availableFunctions","text":"Show available functions 4 classifications data supported (numeric, date, binary categorical)","code":""},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/availableFunctions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Show the available functions for the 4 classifications of data that are\nsupported (numeric, date, binary and categorical) — availableFunctions","text":"","code":"availableFunctions(variableType = NULL)"},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/availableFunctions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Show the available functions for the 4 classifications of data that are\nsupported (numeric, date, binary and categorical) — availableFunctions","text":"variableType choice : \"numeric\", \"date\", \"binary\" \"categorical\".","code":""},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/availableFunctions.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Show the available functions for the 4 classifications of data that are\nsupported (numeric, date, binary and categorical) — availableFunctions","text":"tibble available functions certain variable classification (NULL)","code":""},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/availableFunctions.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Show the available functions for the 4 classifications of data that are\nsupported (numeric, date, binary and categorical) — availableFunctions","text":"","code":"# \\donttest{ library(PatientProfiles)  availableFunctions() #> # A tibble: 102 × 4 #>    variable_type format_key applied_function                              result #>    <chr>         <chr>      <chr>                                         <chr>  #>  1 numeric       mean       mean of the variable of interest.             numer… #>  2 numeric       sd         standard deviation of the variable of intere… numer… #>  3 numeric       median     median of the variable of interest.           numer… #>  4 numeric       q05        qualtile of 05% the variable of interest.     numer… #>  5 numeric       q10        qualtile of 10% the variable of interest.     numer… #>  6 numeric       q15        qualtile of 15% the variable of interest.     numer… #>  7 numeric       q20        qualtile of 20% the variable of interest.     numer… #>  8 numeric       q25        qualtile of 25% the variable of interest.     numer… #>  9 numeric       q30        qualtile of 30% the variable of interest.     numer… #> 10 numeric       q35        qualtile of 35% the variable of interest.     numer… #> # ℹ 92 more rows availableFunctions(\"numeric\") #> # A tibble: 25 × 3 #>    format_key applied_function                                result  #>    <chr>      <chr>                                           <chr>   #>  1 mean       mean of the variable of interest.               numeric #>  2 sd         standard deviation of the variable of interest. numeric #>  3 median     median of the variable of interest.             numeric #>  4 q05        qualtile of 05% the variable of interest.       numeric #>  5 q10        qualtile of 10% the variable of interest.       numeric #>  6 q15        qualtile of 15% the variable of interest.       numeric #>  7 q20        qualtile of 20% the variable of interest.       numeric #>  8 q25        qualtile of 25% the variable of interest.       numeric #>  9 q30        qualtile of 30% the variable of interest.       numeric #> 10 q35        qualtile of 35% the variable of interest.       numeric #> # ℹ 15 more rows availableFunctions(\"date\") #> # A tibble: 24 × 3 #>    format_key applied_function                            result  #>    <chr>      <chr>                                       <chr>   #>  1 mean       mean of the date of interest.               date    #>  2 sd         standard deviation of the date of interest. numeric #>  3 median     median of the date of interest.             date    #>  4 q05        qualtile of 05% the variable of interest.   date    #>  5 q10        qualtile of 10% the variable of interest.   date    #>  6 q15        qualtile of 15% the variable of interest.   date    #>  7 q20        qualtile of 20% the variable of interest.   date    #>  8 q25        qualtile of 25% the variable of interest.   date    #>  9 q30        qualtile of 30% the variable of interest.   date    #> 10 q35        qualtile of 35% the variable of interest.   date    #> # ℹ 14 more rows availableFunctions(\"binary\") #> # A tibble: 27 × 3 #>    format_key applied_function                                result     #>    <chr>      <chr>                                           <chr>      #>  1 count      number of times that each category is observed. numeric    #>  2 percentage percentage of individuals with that category    percentage #>  3 mean       mean of the variable of interest.               numeric    #>  4 sd         standard deviation of the variable of interest. numeric    #>  5 median     median of the variable of interest.             numeric    #>  6 q05        qualtile of 05% the variable of interest.       numeric    #>  7 q10        qualtile of 10% the variable of interest.       numeric    #>  8 q15        qualtile of 15% the variable of interest.       numeric    #>  9 q20        qualtile of 20% the variable of interest.       numeric    #> 10 q25        qualtile of 25% the variable of interest.       numeric    #> # ℹ 17 more rows availableFunctions(\"categorical\") #> # A tibble: 26 × 3 #>    format_key applied_function                                            result #>    <chr>      <chr>                                                       <chr>  #>  1 count      number of times that each category is observed.             numer… #>  2 percentage percentage of individuals with that category                numer… #>  3 distinct   number of distinct categories                               numer… #>  4 mean       mean number of individuals per category                     numer… #>  5 sd         standard deviation of the number of individuals per catego… numer… #>  6 median     median number of individuals per category                   numer… #>  7 q05        qualtile of 05% the variable of interest.                   numer… #>  8 q10        qualtile of 10% the variable of interest.                   numer… #>  9 q15        qualtile of 15% the variable of interest.                   numer… #> 10 q20        qualtile of 20% the variable of interest.                   numer… #> # ℹ 16 more rows # }"},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/detectVariables.html","id":null,"dir":"Reference","previous_headings":"","what":"Detect automatically variables with a certain classification — detectVariables","title":"Detect automatically variables with a certain classification — detectVariables","text":"Detect automatically variables certain classification","code":""},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/detectVariables.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Detect automatically variables with a certain classification — detectVariables","text":"","code":"detectVariables(   table,   variableType,   exclude = c(\"person_id\", \"subject_id\", \"cohort_definition_id\", \"cohort_name\",     \"strata_name\", \"strata_level\") )"},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/detectVariables.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Detect automatically variables with a certain classification — detectVariables","text":"table Tibble variableType Classification interest, choice \"numeric\", \"date\", \"binary\" \"categorical\" exclude Variables exclude","code":""},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/detectVariables.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Detect automatically variables with a certain classification — detectVariables","text":"Variables x desired classification","code":""},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/detectVariables.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Detect automatically variables with a certain classification — detectVariables","text":"","code":"# \\donttest{ library(PatientProfiles) x <- dplyr::tibble(   person_id = c(1, 2),   start_date = as.Date(c(\"2020-05-02\", \"2021-11-19\")),   asthma = c(0, 1) ) detectVariables(x, \"numeric\") #> character(0) # }"},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/getConceptName.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the name of the concept_id column for a certain table in the cdm — getConceptName","title":"Get the name of the concept_id column for a certain table in the cdm — getConceptName","text":"Get name concept_id column certain table cdm","code":""},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/getConceptName.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the name of the concept_id column for a certain table in the cdm — getConceptName","text":"","code":"getConceptName(tableName)"},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/getConceptName.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get the name of the concept_id column for a certain table in the cdm — getConceptName","text":"tableName Name table","code":""},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/getConceptName.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the name of the concept_id column for a certain table in the cdm — getConceptName","text":"Name concept_id column table","code":""},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/getConceptName.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get the name of the concept_id column for a certain table in the cdm — getConceptName","text":"","code":"# \\donttest{ library(PatientProfiles) getConceptName(\"condition_occurrence\") #> [1] \"condition_concept_id\" # }"},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/getEndName.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the name of the end date column for a certain table in the cdm — getEndName","title":"Get the name of the end date column for a certain table in the cdm — getEndName","text":"Get name end date column certain table cdm","code":""},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/getEndName.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the name of the end date column for a certain table in the cdm — getEndName","text":"","code":"getEndName(tableName)"},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/getEndName.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get the name of the end date column for a certain table in the cdm — getEndName","text":"tableName Name table","code":""},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/getEndName.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the name of the end date column for a certain table in the cdm — getEndName","text":"Name end date column table","code":""},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/getEndName.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get the name of the end date column for a certain table in the cdm — getEndName","text":"","code":"# \\donttest{ library(PatientProfiles) getEndName(\"condition_occurrence\") #> [1] \"condition_end_date\" # }"},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/getSourceConceptName.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the name of the source_concept_id column for a certain table in the cdm — getSourceConceptName","title":"Get the name of the source_concept_id column for a certain table in the cdm — getSourceConceptName","text":"Get name source_concept_id column certain table cdm","code":""},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/getSourceConceptName.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the name of the source_concept_id column for a certain table in the cdm — getSourceConceptName","text":"","code":"getSourceConceptName(tableName)"},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/getSourceConceptName.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get the name of the source_concept_id column for a certain table in the cdm — getSourceConceptName","text":"tableName Name table","code":""},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/getSourceConceptName.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the name of the source_concept_id column for a certain table in the cdm — getSourceConceptName","text":"Name source_concept_id column table","code":""},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/getSourceConceptName.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get the name of the source_concept_id column for a certain table in the cdm — getSourceConceptName","text":"","code":"# \\donttest{ library(PatientProfiles) getSourceConceptName(\"condition_occurrence\") #> [1] \"condition_source_concept_id\" # }"},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/getStartName.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the name of the start date column for a certain table in the cdm — getStartName","title":"Get the name of the start date column for a certain table in the cdm — getStartName","text":"Get name start date column certain table cdm","code":""},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/getStartName.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the name of the start date column for a certain table in the cdm — getStartName","text":"","code":"getStartName(tableName)"},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/getStartName.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get the name of the start date column for a certain table in the cdm — getStartName","text":"tableName Name table","code":""},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/getStartName.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the name of the start date column for a certain table in the cdm — getStartName","text":"Name start date column table","code":""},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/getStartName.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get the name of the start date column for a certain table in the cdm — getStartName","text":"","code":"# \\donttest{ library(PatientProfiles) getStartName(\"condition_occurrence\") #> [1] \"condition_start_date\" # }"},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/gtCharacteristics.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a gt table from a summarisedCharacteristics object. — gtCharacteristics","title":"Create a gt table from a summarisedCharacteristics object. — gtCharacteristics","text":"`r lifecycle::badge(\"experimental\")`","code":""},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/gtCharacteristics.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a gt table from a summarisedCharacteristics object. — gtCharacteristics","text":"","code":"gtCharacteristics(   summarisedCharacteristics,   pivotWide = c(\"CDM Name\", \"Group\", \"Strata\"),   format = c(`N (%)` = \"count (percentage%)\", \"median [min; q25 - q75; max]\",     \"mean (sd)\", \"median [q25 - q75]\", N = \"count\"),   keepNotFormatted = TRUE,   decimals = c(default = 0),   decimalMark = \".\",   bigMark = \",\" )"},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/gtCharacteristics.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a gt table from a summarisedCharacteristics object. — gtCharacteristics","text":"summarisedCharacteristics Summary characteristics long table. pivotWide variables pivot wide format formats labels use keepNotFormatted Wheather keep formated estimate types decimals Decimals per estimate_type decimalMark decimal mark bigMark big mark","code":""},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/gtCharacteristics.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a gt table from a summarisedCharacteristics object. — gtCharacteristics","text":"New table gt format","code":""},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/gtCharacteristics.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a gt table from a summarisedCharacteristics object. — gtCharacteristics","text":"","code":"# \\donttest{ library(PatientProfiles)  cdm <- mockPatientProfiles()  summariseCharacteristics(   cohort = cdm$cohort1,   ageGroup = list(c(0, 19), c(20, 39), c(40, 59), c(60, 79), c(80, 150)),   tableIntersect = list(     \"Visits\" = list(       tableName = \"visit_occurrence\", value = \"count\", window = c(-365, 0)     )   ),   cohortIntersect = list(     \"Medications\" = list(       targetCohortTable = \"cohort2\", value = \"flag\", window = c(-365, 0)     )   ),   minCellCount = 1 ) %>%   gtCharacteristics() #> Warning: There were 3 warnings in `dplyr::summarise()`. #> The first warning was: #> ℹ In argument: `dplyr::across(...)`. #> ℹ In group 1: `strata_level = \"Overall\"`. #> Caused by warning in `base::min()`: #> ! no non-missing arguments to min; returning Inf #> ℹ Run `dplyr::last_dplyr_warnings()` to see the 2 remaining warnings. #> Warning: There were 3 warnings in `dplyr::summarise()`. #> The first warning was: #> ℹ In argument: `dplyr::across(...)`. #> ℹ In group 1: `strata_level = \"Overall\"`. #> Caused by warning in `base::max()`: #> ! no non-missing arguments to max; returning -Inf #> ℹ Run `dplyr::last_dplyr_warnings()` to see the 2 remaining warnings. #> <div id=\"bmcjfgqawa\" style=\"padding-left:0px;padding-right:0px;padding-top:10px;padding-bottom:10px;overflow-x:auto;overflow-y:auto;width:auto;height:auto;\"> #>   <style>#bmcjfgqawa table { #>   font-family: system-ui, 'Segoe UI', Roboto, Helvetica, Arial, sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol', 'Noto Color Emoji'; #>   -webkit-font-smoothing: antialiased; #>   -moz-osx-font-smoothing: grayscale; #> } #>  #> #bmcjfgqawa thead, #bmcjfgqawa tbody, #bmcjfgqawa tfoot, #bmcjfgqawa tr, #bmcjfgqawa td, #bmcjfgqawa th { #>   border-style: none; #> } #>  #> #bmcjfgqawa p { #>   margin: 0; #>   padding: 0; #> } #>  #> #bmcjfgqawa .gt_table { #>   display: table; #>   border-collapse: collapse; #>   line-height: normal; #>   margin-left: auto; #>   margin-right: auto; #>   color: #333333; #>   font-size: 16px; #>   font-weight: normal; #>   font-style: normal; #>   background-color: #FFFFFF; #>   width: auto; #>   border-top-style: solid; #>   border-top-width: 2px; #>   border-top-color: #A8A8A8; #>   border-right-style: none; #>   border-right-width: 2px; #>   border-right-color: #D3D3D3; #>   border-bottom-style: solid; #>   border-bottom-width: 2px; #>   border-bottom-color: #A8A8A8; #>   border-left-style: none; #>   border-left-width: 2px; #>   border-left-color: #D3D3D3; #> } #>  #> #bmcjfgqawa .gt_caption { #>   padding-top: 4px; #>   padding-bottom: 4px; #> } #>  #> #bmcjfgqawa .gt_title { #>   color: #333333; #>   font-size: 125%; #>   font-weight: initial; #>   padding-top: 4px; #>   padding-bottom: 4px; #>   padding-left: 5px; #>   padding-right: 5px; #>   border-bottom-color: #FFFFFF; #>   border-bottom-width: 0; #> } #>  #> #bmcjfgqawa .gt_subtitle { #>   color: #333333; #>   font-size: 85%; #>   font-weight: initial; #>   padding-top: 3px; #>   padding-bottom: 5px; #>   padding-left: 5px; #>   padding-right: 5px; #>   border-top-color: #FFFFFF; #>   border-top-width: 0; #> } #>  #> #bmcjfgqawa .gt_heading { #>   background-color: #FFFFFF; #>   text-align: center; #>   border-bottom-color: #FFFFFF; #>   border-left-style: none; #>   border-left-width: 1px; #>   border-left-color: #D3D3D3; #>   border-right-style: none; #>   border-right-width: 1px; #>   border-right-color: #D3D3D3; #> } #>  #> #bmcjfgqawa .gt_bottom_border { #>   border-bottom-style: solid; #>   border-bottom-width: 2px; #>   border-bottom-color: #D3D3D3; #> } #>  #> #bmcjfgqawa .gt_col_headings { #>   border-top-style: solid; #>   border-top-width: 2px; #>   border-top-color: #D3D3D3; #>   border-bottom-style: solid; #>   border-bottom-width: 2px; #>   border-bottom-color: #D3D3D3; #>   border-left-style: none; #>   border-left-width: 1px; #>   border-left-color: #D3D3D3; #>   border-right-style: none; #>   border-right-width: 1px; #>   border-right-color: #D3D3D3; #> } #>  #> #bmcjfgqawa .gt_col_heading { #>   color: #333333; #>   background-color: #FFFFFF; #>   font-size: 100%; #>   font-weight: normal; #>   text-transform: inherit; #>   border-left-style: none; #>   border-left-width: 1px; #>   border-left-color: #D3D3D3; #>   border-right-style: none; #>   border-right-width: 1px; #>   border-right-color: #D3D3D3; #>   vertical-align: bottom; #>   padding-top: 5px; #>   padding-bottom: 6px; #>   padding-left: 5px; #>   padding-right: 5px; #>   overflow-x: hidden; #> } #>  #> #bmcjfgqawa .gt_column_spanner_outer { #>   color: #333333; #>   background-color: #FFFFFF; #>   font-size: 100%; #>   font-weight: normal; #>   text-transform: inherit; #>   padding-top: 0; #>   padding-bottom: 0; #>   padding-left: 4px; #>   padding-right: 4px; #> } #>  #> #bmcjfgqawa .gt_column_spanner_outer:first-child { #>   padding-left: 0; #> } #>  #> #bmcjfgqawa .gt_column_spanner_outer:last-child { #>   padding-right: 0; #> } #>  #> #bmcjfgqawa .gt_column_spanner { #>   border-bottom-style: solid; #>   border-bottom-width: 2px; #>   border-bottom-color: #D3D3D3; #>   vertical-align: bottom; #>   padding-top: 5px; #>   padding-bottom: 5px; #>   overflow-x: hidden; #>   display: inline-block; #>   width: 100%; #> } #>  #> #bmcjfgqawa .gt_spanner_row { #>   border-bottom-style: hidden; #> } #>  #> #bmcjfgqawa .gt_group_heading { #>   padding-top: 8px; #>   padding-bottom: 8px; #>   padding-left: 5px; #>   padding-right: 5px; #>   color: #333333; #>   background-color: #FFFFFF; #>   font-size: 100%; #>   font-weight: initial; #>   text-transform: inherit; #>   border-top-style: solid; #>   border-top-width: 2px; #>   border-top-color: #D3D3D3; #>   border-bottom-style: solid; #>   border-bottom-width: 2px; #>   border-bottom-color: #D3D3D3; #>   border-left-style: none; #>   border-left-width: 1px; #>   border-left-color: #D3D3D3; #>   border-right-style: none; #>   border-right-width: 1px; #>   border-right-color: #D3D3D3; #>   vertical-align: middle; #>   text-align: left; #> } #>  #> #bmcjfgqawa .gt_empty_group_heading { #>   padding: 0.5px; #>   color: #333333; #>   background-color: #FFFFFF; #>   font-size: 100%; #>   font-weight: initial; #>   border-top-style: solid; #>   border-top-width: 2px; #>   border-top-color: #D3D3D3; #>   border-bottom-style: solid; #>   border-bottom-width: 2px; #>   border-bottom-color: #D3D3D3; #>   vertical-align: middle; #> } #>  #> #bmcjfgqawa .gt_from_md > :first-child { #>   margin-top: 0; #> } #>  #> #bmcjfgqawa .gt_from_md > :last-child { #>   margin-bottom: 0; #> } #>  #> #bmcjfgqawa .gt_row { #>   padding-top: 8px; #>   padding-bottom: 8px; #>   padding-left: 5px; #>   padding-right: 5px; #>   margin: 10px; #>   border-top-style: solid; #>   border-top-width: 1px; #>   border-top-color: #D3D3D3; #>   border-left-style: none; #>   border-left-width: 1px; #>   border-left-color: #D3D3D3; #>   border-right-style: none; #>   border-right-width: 1px; #>   border-right-color: #D3D3D3; #>   vertical-align: middle; #>   overflow-x: hidden; #> } #>  #> #bmcjfgqawa .gt_stub { #>   color: #333333; #>   background-color: #FFFFFF; #>   font-size: 100%; #>   font-weight: initial; #>   text-transform: inherit; #>   border-right-style: solid; #>   border-right-width: 2px; #>   border-right-color: #D3D3D3; #>   padding-left: 5px; #>   padding-right: 5px; #> } #>  #> #bmcjfgqawa .gt_stub_row_group { #>   color: #333333; #>   background-color: #FFFFFF; #>   font-size: 100%; #>   font-weight: initial; #>   text-transform: inherit; #>   border-right-style: solid; #>   border-right-width: 2px; #>   border-right-color: #D3D3D3; #>   padding-left: 5px; #>   padding-right: 5px; #>   vertical-align: top; #> } #>  #> #bmcjfgqawa .gt_row_group_first td { #>   border-top-width: 2px; #> } #>  #> #bmcjfgqawa .gt_row_group_first th { #>   border-top-width: 2px; #> } #>  #> #bmcjfgqawa .gt_summary_row { #>   color: #333333; #>   background-color: #FFFFFF; #>   text-transform: inherit; #>   padding-top: 8px; #>   padding-bottom: 8px; #>   padding-left: 5px; #>   padding-right: 5px; #> } #>  #> #bmcjfgqawa .gt_first_summary_row { #>   border-top-style: solid; #>   border-top-color: #D3D3D3; #> } #>  #> #bmcjfgqawa .gt_first_summary_row.thick { #>   border-top-width: 2px; #> } #>  #> #bmcjfgqawa .gt_last_summary_row { #>   padding-top: 8px; #>   padding-bottom: 8px; #>   padding-left: 5px; #>   padding-right: 5px; #>   border-bottom-style: solid; #>   border-bottom-width: 2px; #>   border-bottom-color: #D3D3D3; #> } #>  #> #bmcjfgqawa .gt_grand_summary_row { #>   color: #333333; #>   background-color: #FFFFFF; #>   text-transform: inherit; #>   padding-top: 8px; #>   padding-bottom: 8px; #>   padding-left: 5px; #>   padding-right: 5px; #> } #>  #> #bmcjfgqawa .gt_first_grand_summary_row { #>   padding-top: 8px; #>   padding-bottom: 8px; #>   padding-left: 5px; #>   padding-right: 5px; #>   border-top-style: double; #>   border-top-width: 6px; #>   border-top-color: #D3D3D3; #> } #>  #> #bmcjfgqawa .gt_last_grand_summary_row_top { #>   padding-top: 8px; #>   padding-bottom: 8px; #>   padding-left: 5px; #>   padding-right: 5px; #>   border-bottom-style: double; #>   border-bottom-width: 6px; #>   border-bottom-color: #D3D3D3; #> } #>  #> #bmcjfgqawa .gt_striped { #>   background-color: rgba(128, 128, 128, 0.05); #> } #>  #> #bmcjfgqawa .gt_table_body { #>   border-top-style: solid; #>   border-top-width: 2px; #>   border-top-color: #D3D3D3; #>   border-bottom-style: solid; #>   border-bottom-width: 2px; #>   border-bottom-color: #D3D3D3; #> } #>  #> #bmcjfgqawa .gt_footnotes { #>   color: #333333; #>   background-color: #FFFFFF; #>   border-bottom-style: none; #>   border-bottom-width: 2px; #>   border-bottom-color: #D3D3D3; #>   border-left-style: none; #>   border-left-width: 2px; #>   border-left-color: #D3D3D3; #>   border-right-style: none; #>   border-right-width: 2px; #>   border-right-color: #D3D3D3; #> } #>  #> #bmcjfgqawa .gt_footnote { #>   margin: 0px; #>   font-size: 90%; #>   padding-top: 4px; #>   padding-bottom: 4px; #>   padding-left: 5px; #>   padding-right: 5px; #> } #>  #> #bmcjfgqawa .gt_sourcenotes { #>   color: #333333; #>   background-color: #FFFFFF; #>   border-bottom-style: none; #>   border-bottom-width: 2px; #>   border-bottom-color: #D3D3D3; #>   border-left-style: none; #>   border-left-width: 2px; #>   border-left-color: #D3D3D3; #>   border-right-style: none; #>   border-right-width: 2px; #>   border-right-color: #D3D3D3; #> } #>  #> #bmcjfgqawa .gt_sourcenote { #>   font-size: 90%; #>   padding-top: 4px; #>   padding-bottom: 4px; #>   padding-left: 5px; #>   padding-right: 5px; #> } #>  #> #bmcjfgqawa .gt_left { #>   text-align: left; #> } #>  #> #bmcjfgqawa .gt_center { #>   text-align: center; #> } #>  #> #bmcjfgqawa .gt_right { #>   text-align: right; #>   font-variant-numeric: tabular-nums; #> } #>  #> #bmcjfgqawa .gt_font_normal { #>   font-weight: normal; #> } #>  #> #bmcjfgqawa .gt_font_bold { #>   font-weight: bold; #> } #>  #> #bmcjfgqawa .gt_font_italic { #>   font-style: italic; #> } #>  #> #bmcjfgqawa .gt_super { #>   font-size: 65%; #> } #>  #> #bmcjfgqawa .gt_footnote_marks { #>   font-size: 75%; #>   vertical-align: 0.4em; #>   position: initial; #> } #>  #> #bmcjfgqawa .gt_asterisk { #>   font-size: 100%; #>   vertical-align: 0; #> } #>  #> #bmcjfgqawa .gt_indent_1 { #>   text-indent: 5px; #> } #>  #> #bmcjfgqawa .gt_indent_2 { #>   text-indent: 10px; #> } #>  #> #bmcjfgqawa .gt_indent_3 { #>   text-indent: 15px; #> } #>  #> #bmcjfgqawa .gt_indent_4 { #>   text-indent: 20px; #> } #>  #> #bmcjfgqawa .gt_indent_5 { #>   text-indent: 25px; #> } #> <\/style> #>   <table class=\"gt_table\" style=\"table-layout: fixed;; width: 0px\" data-quarto-disable-processing=\"false\" data-quarto-bootstrap=\"false\"> #>   <colgroup> #>     <col style=\"width:200px;\"/> #>     <col style=\"width:200px;\"/> #>     <col style=\"width:200px;\"/> #>     <col style=\"width:200px;\"/> #>     <col style=\"width:200px;\"/> #>   <\/colgroup> #>   <thead> #>      #>     <tr class=\"gt_col_headings gt_spanner_row\"> #>       <th class=\"gt_center gt_columns_top_border gt_column_spanner_outer\" rowspan=\"1\" colspan=\"3\" style=\"background-color: #C8C8C8; font-weight: bold;\" scope=\"colgroup\" id><\/th> #>       <th class=\"gt_center gt_columns_top_border gt_column_spanner_outer\" rowspan=\"1\" colspan=\"2\" style=\"background-color: #C8C8C8; font-weight: bold;\" scope=\"colgroup\" id=\"CDM Name\"> #>         <span class=\"gt_column_spanner\">CDM Name<\/span> #>       <\/th> #>     <\/tr> #>     <tr class=\"gt_col_headings gt_spanner_row\"> #>       <th class=\"gt_center gt_columns_top_border gt_column_spanner_outer\" rowspan=\"1\" colspan=\"3\" style=\"background-color: #FFFFFF;\" scope=\"colgroup\" id><\/th> #>       <th class=\"gt_center gt_columns_top_border gt_column_spanner_outer\" rowspan=\"1\" colspan=\"2\" style=\"background-color: #FFFFFF;\" scope=\"colgroup\" id=\"PP_MOCK\"> #>         <span class=\"gt_column_spanner\">PP_MOCK<\/span> #>       <\/th> #>     <\/tr> #>     <tr class=\"gt_col_headings gt_spanner_row\"> #>       <th class=\"gt_center gt_columns_top_border gt_column_spanner_outer\" rowspan=\"1\" colspan=\"3\" style=\"background-color: #C8C8C8; font-weight: bold;\" scope=\"colgroup\" id><\/th> #>       <th class=\"gt_center gt_columns_top_border gt_column_spanner_outer\" rowspan=\"1\" colspan=\"2\" style=\"background-color: #C8C8C8; font-weight: bold;\" scope=\"colgroup\" id=\"Group\"> #>         <span class=\"gt_column_spanner\">Group<\/span> #>       <\/th> #>     <\/tr> #>     <tr class=\"gt_col_headings gt_spanner_row\"> #>       <th class=\"gt_center gt_columns_top_border gt_column_spanner_outer\" rowspan=\"1\" colspan=\"3\" style=\"background-color: #FFFFFF; background-color: #FFFFFF;\" scope=\"colgroup\" id><\/th> #>       <th class=\"gt_center gt_columns_top_border gt_column_spanner_outer\" rowspan=\"1\" colspan=\"1\" style=\"background-color: #FFFFFF; background-color: #FFFFFF;\" scope=\"col\" id=\"cohort_name: Cohort 1\"> #>         <span class=\"gt_column_spanner\">cohort_name: Cohort 1<\/span> #>       <\/th> #>       <th class=\"gt_center gt_columns_top_border gt_column_spanner_outer\" rowspan=\"1\" colspan=\"1\" style=\"background-color: #FFFFFF; background-color: #FFFFFF;\" scope=\"col\" id=\"cohort_name: Cohort 2\"> #>         <span class=\"gt_column_spanner\">cohort_name: Cohort 2<\/span> #>       <\/th> #>     <\/tr> #>     <tr class=\"gt_col_headings gt_spanner_row\"> #>       <th class=\"gt_center gt_columns_top_border gt_column_spanner_outer\" rowspan=\"1\" colspan=\"3\" style=\"background-color: #C8C8C8; font-weight: bold;\" scope=\"colgroup\" id><\/th> #>       <th class=\"gt_center gt_columns_top_border gt_column_spanner_outer\" rowspan=\"1\" colspan=\"2\" style=\"background-color: #C8C8C8; font-weight: bold;\" scope=\"colgroup\" id=\"Strata\"> #>         <span class=\"gt_column_spanner\">Strata<\/span> #>       <\/th> #>     <\/tr> #>     <tr class=\"gt_col_headings gt_spanner_row\"> #>       <th class=\"gt_col_heading gt_columns_bottom_border gt_left\" rowspan=\"2\" colspan=\"1\" scope=\"col\" id=\"Variable\">Variable<\/th> #>       <th class=\"gt_col_heading gt_columns_bottom_border gt_left\" rowspan=\"2\" colspan=\"1\" scope=\"col\" id=\"Level\">Level<\/th> #>       <th class=\"gt_col_heading gt_columns_bottom_border gt_left\" rowspan=\"2\" colspan=\"1\" scope=\"col\" id=\"Format\">Format<\/th> #>       <th class=\"gt_center gt_columns_top_border gt_column_spanner_outer\" rowspan=\"1\" colspan=\"2\" style=\"background-color: #FFFFFF;\" scope=\"colgroup\" id=\"Overall: Overall\"> #>         <span class=\"gt_column_spanner\">Overall: Overall<\/span> #>       <\/th> #>     <\/tr> #>     <tr class=\"gt_col_headings\"> #>       <th class=\"gt_col_heading gt_columns_bottom_border gt_left\" rowspan=\"1\" colspan=\"1\" scope=\"col\" id=\"cohort1\">cohort1<\/th> #>       <th class=\"gt_col_heading gt_columns_bottom_border gt_left\" rowspan=\"1\" colspan=\"1\" scope=\"col\" id=\"cohort2\">cohort2<\/th> #>     <\/tr> #>   <\/thead> #>   <tbody class=\"gt_table_body\"> #>     <tr><td headers=\"Variable\" class=\"gt_row gt_left\">Number subjects<\/td> #> <td headers=\"Level\" class=\"gt_row gt_left\"><\/td> #> <td headers=\"Format\" class=\"gt_row gt_left\" style=\"border-right-width: 1px; border-right-style: solid; border-right-color: #000000;\">N<\/td> #> <td headers=\"cohort1\" class=\"gt_row gt_left\">2<\/td> #> <td headers=\"cohort2\" class=\"gt_row gt_left\">1<\/td><\/tr> #>     <tr><td headers=\"Variable\" class=\"gt_row gt_left\">Number records<\/td> #> <td headers=\"Level\" class=\"gt_row gt_left\"><\/td> #> <td headers=\"Format\" class=\"gt_row gt_left\" style=\"border-right-width: 1px; border-right-style: solid; border-right-color: #000000;\">N<\/td> #> <td headers=\"cohort1\" class=\"gt_row gt_left\">3<\/td> #> <td headers=\"cohort2\" class=\"gt_row gt_left\">1<\/td><\/tr> #>     <tr><td headers=\"Variable\" class=\"gt_row gt_left\">Cohort start date<\/td> #> <td headers=\"Level\" class=\"gt_row gt_left\"><\/td> #> <td headers=\"Format\" class=\"gt_row gt_left\" style=\"border-right-width: 1px; border-right-style: solid; border-right-color: #000000;\">median [min; q25 - q75; max]<\/td> #> <td headers=\"cohort1\" class=\"gt_row gt_left\">2020-01-02 [2020-01-01; 2020-01-01 - 2020-03-17; 2020-06-01]<\/td> #> <td headers=\"cohort2\" class=\"gt_row gt_left\">2020-01-01 [2020-01-01; 2020-01-01 - 2020-01-01; 2020-01-01]<\/td><\/tr> #>     <tr><td headers=\"Variable\" class=\"gt_row gt_left\" style=\"border-top-width: 1px; border-top-style: hidden; border-top-color: #000000;\"><\/td> #> <td headers=\"Level\" class=\"gt_row gt_left\"><\/td> #> <td headers=\"Format\" class=\"gt_row gt_left\" style=\"border-right-width: 1px; border-right-style: solid; border-right-color: #000000;\">q05<\/td> #> <td headers=\"cohort1\" class=\"gt_row gt_left\">2020-01-01<\/td> #> <td headers=\"cohort2\" class=\"gt_row gt_left\">2020-01-01<\/td><\/tr> #>     <tr><td headers=\"Variable\" class=\"gt_row gt_left\" style=\"border-top-width: 1px; border-top-style: hidden; border-top-color: #000000;\"><\/td> #> <td headers=\"Level\" class=\"gt_row gt_left\"><\/td> #> <td headers=\"Format\" class=\"gt_row gt_left\" style=\"border-right-width: 1px; border-right-style: solid; border-right-color: #000000;\">q95<\/td> #> <td headers=\"cohort1\" class=\"gt_row gt_left\">2020-05-17<\/td> #> <td headers=\"cohort2\" class=\"gt_row gt_left\">2020-01-01<\/td><\/tr> #>     <tr><td headers=\"Variable\" class=\"gt_row gt_left\">Cohort end date<\/td> #> <td headers=\"Level\" class=\"gt_row gt_left\"><\/td> #> <td headers=\"Format\" class=\"gt_row gt_left\" style=\"border-right-width: 1px; border-right-style: solid; border-right-color: #000000;\">median [min; q25 - q75; max]<\/td> #> <td headers=\"cohort1\" class=\"gt_row gt_left\">2020-04-01 [2020-02-02; 2020-03-03 - 2020-06-01; 2020-08-01]<\/td> #> <td headers=\"cohort2\" class=\"gt_row gt_left\">2020-03-01 [2020-03-01; 2020-03-01 - 2020-03-01; 2020-03-01]<\/td><\/tr> #>     <tr><td headers=\"Variable\" class=\"gt_row gt_left\" style=\"border-top-width: 1px; border-top-style: hidden; border-top-color: #000000;\"><\/td> #> <td headers=\"Level\" class=\"gt_row gt_left\"><\/td> #> <td headers=\"Format\" class=\"gt_row gt_left\" style=\"border-right-width: 1px; border-right-style: solid; border-right-color: #000000;\">q05<\/td> #> <td headers=\"cohort1\" class=\"gt_row gt_left\">2020-02-08<\/td> #> <td headers=\"cohort2\" class=\"gt_row gt_left\">2020-03-01<\/td><\/tr> #>     <tr><td headers=\"Variable\" class=\"gt_row gt_left\" style=\"border-top-width: 1px; border-top-style: hidden; border-top-color: #000000;\"><\/td> #> <td headers=\"Level\" class=\"gt_row gt_left\"><\/td> #> <td headers=\"Format\" class=\"gt_row gt_left\" style=\"border-right-width: 1px; border-right-style: solid; border-right-color: #000000;\">q95<\/td> #> <td headers=\"cohort1\" class=\"gt_row gt_left\">2020-07-20<\/td> #> <td headers=\"cohort2\" class=\"gt_row gt_left\">2020-03-01<\/td><\/tr> #>     <tr><td headers=\"Variable\" class=\"gt_row gt_left\">Age<\/td> #> <td headers=\"Level\" class=\"gt_row gt_left\"><\/td> #> <td headers=\"Format\" class=\"gt_row gt_left\" style=\"border-right-width: 1px; border-right-style: solid; border-right-color: #000000;\">median [min; q25 - q75; max]<\/td> #> <td headers=\"cohort1\" class=\"gt_row gt_left\">26 [25; 25 - 26; 26]<\/td> #> <td headers=\"cohort2\" class=\"gt_row gt_left\">NA [Inf; NA - NA; -Inf]<\/td><\/tr> #>     <tr><td headers=\"Variable\" class=\"gt_row gt_left\" style=\"border-top-width: 1px; border-top-style: hidden; border-top-color: #000000;\"><\/td> #> <td headers=\"Level\" class=\"gt_row gt_left\"><\/td> #> <td headers=\"Format\" class=\"gt_row gt_left\" style=\"border-right-width: 1px; border-right-style: solid; border-right-color: #000000;\">mean (sd)<\/td> #> <td headers=\"cohort1\" class=\"gt_row gt_left\">26 (1)<\/td> #> <td headers=\"cohort2\" class=\"gt_row gt_left\">NaN (NA)<\/td><\/tr> #>     <tr><td headers=\"Variable\" class=\"gt_row gt_left\" style=\"border-top-width: 1px; border-top-style: hidden; border-top-color: #000000;\"><\/td> #> <td headers=\"Level\" class=\"gt_row gt_left\"><\/td> #> <td headers=\"Format\" class=\"gt_row gt_left\" style=\"border-right-width: 1px; border-right-style: solid; border-right-color: #000000;\">q05<\/td> #> <td headers=\"cohort1\" class=\"gt_row gt_left\">25<\/td> #> <td headers=\"cohort2\" class=\"gt_row gt_left\">NA<\/td><\/tr> #>     <tr><td headers=\"Variable\" class=\"gt_row gt_left\" style=\"border-top-width: 1px; border-top-style: hidden; border-top-color: #000000;\"><\/td> #> <td headers=\"Level\" class=\"gt_row gt_left\"><\/td> #> <td headers=\"Format\" class=\"gt_row gt_left\" style=\"border-right-width: 1px; border-right-style: solid; border-right-color: #000000;\">q95<\/td> #> <td headers=\"cohort1\" class=\"gt_row gt_left\">26<\/td> #> <td headers=\"cohort2\" class=\"gt_row gt_left\">NA<\/td><\/tr> #>     <tr><td headers=\"Variable\" class=\"gt_row gt_left\">Sex<\/td> #> <td headers=\"Level\" class=\"gt_row gt_left\">Male<\/td> #> <td headers=\"Format\" class=\"gt_row gt_left\" style=\"border-right-width: 1px; border-right-style: solid; border-right-color: #000000;\">N (%)<\/td> #> <td headers=\"cohort1\" class=\"gt_row gt_left\">2 (67%)<\/td> #> <td headers=\"cohort2\" class=\"gt_row gt_left\">NA<\/td><\/tr> #>     <tr><td headers=\"Variable\" class=\"gt_row gt_left\" style=\"border-top-width: 1px; border-top-style: hidden; border-top-color: #000000;\"><\/td> #> <td headers=\"Level\" class=\"gt_row gt_left\">None<\/td> #> <td headers=\"Format\" class=\"gt_row gt_left\" style=\"border-right-width: 1px; border-right-style: solid; border-right-color: #000000;\">N (%)<\/td> #> <td headers=\"cohort1\" class=\"gt_row gt_left\">1 (33%)<\/td> #> <td headers=\"cohort2\" class=\"gt_row gt_left\">1 (100%)<\/td><\/tr> #>     <tr><td headers=\"Variable\" class=\"gt_row gt_left\">Prior observation<\/td> #> <td headers=\"Level\" class=\"gt_row gt_left\"><\/td> #> <td headers=\"Format\" class=\"gt_row gt_left\" style=\"border-right-width: 1px; border-right-style: solid; border-right-color: #000000;\">median [min; q25 - q75; max]<\/td> #> <td headers=\"cohort1\" class=\"gt_row gt_left\">4,745 [4,669; 4,707 - 4,783; 4,821]<\/td> #> <td headers=\"cohort2\" class=\"gt_row gt_left\">NA [Inf; NA - NA; -Inf]<\/td><\/tr> #>     <tr><td headers=\"Variable\" class=\"gt_row gt_left\" style=\"border-top-width: 1px; border-top-style: hidden; border-top-color: #000000;\"><\/td> #> <td headers=\"Level\" class=\"gt_row gt_left\"><\/td> #> <td headers=\"Format\" class=\"gt_row gt_left\" style=\"border-right-width: 1px; border-right-style: solid; border-right-color: #000000;\">mean (sd)<\/td> #> <td headers=\"cohort1\" class=\"gt_row gt_left\">4,745 (107)<\/td> #> <td headers=\"cohort2\" class=\"gt_row gt_left\">NaN (NA)<\/td><\/tr> #>     <tr><td headers=\"Variable\" class=\"gt_row gt_left\" style=\"border-top-width: 1px; border-top-style: hidden; border-top-color: #000000;\"><\/td> #> <td headers=\"Level\" class=\"gt_row gt_left\"><\/td> #> <td headers=\"Format\" class=\"gt_row gt_left\" style=\"border-right-width: 1px; border-right-style: solid; border-right-color: #000000;\">q05<\/td> #> <td headers=\"cohort1\" class=\"gt_row gt_left\">4,677<\/td> #> <td headers=\"cohort2\" class=\"gt_row gt_left\">NA<\/td><\/tr> #>     <tr><td headers=\"Variable\" class=\"gt_row gt_left\" style=\"border-top-width: 1px; border-top-style: hidden; border-top-color: #000000;\"><\/td> #> <td headers=\"Level\" class=\"gt_row gt_left\"><\/td> #> <td headers=\"Format\" class=\"gt_row gt_left\" style=\"border-right-width: 1px; border-right-style: solid; border-right-color: #000000;\">q95<\/td> #> <td headers=\"cohort1\" class=\"gt_row gt_left\">4,813<\/td> #> <td headers=\"cohort2\" class=\"gt_row gt_left\">NA<\/td><\/tr> #>     <tr><td headers=\"Variable\" class=\"gt_row gt_left\">Future observation<\/td> #> <td headers=\"Level\" class=\"gt_row gt_left\"><\/td> #> <td headers=\"Format\" class=\"gt_row gt_left\" style=\"border-right-width: 1px; border-right-style: solid; border-right-color: #000000;\">median [min; q25 - q75; max]<\/td> #> <td headers=\"cohort1\" class=\"gt_row gt_left\">22,038 [21,962; 22,000 - 22,076; 22,114]<\/td> #> <td headers=\"cohort2\" class=\"gt_row gt_left\">NA [Inf; NA - NA; -Inf]<\/td><\/tr> #>     <tr><td headers=\"Variable\" class=\"gt_row gt_left\" style=\"border-top-width: 1px; border-top-style: hidden; border-top-color: #000000;\"><\/td> #> <td headers=\"Level\" class=\"gt_row gt_left\"><\/td> #> <td headers=\"Format\" class=\"gt_row gt_left\" style=\"border-right-width: 1px; border-right-style: solid; border-right-color: #000000;\">mean (sd)<\/td> #> <td headers=\"cohort1\" class=\"gt_row gt_left\">22,038 (107)<\/td> #> <td headers=\"cohort2\" class=\"gt_row gt_left\">NaN (NA)<\/td><\/tr> #>     <tr><td headers=\"Variable\" class=\"gt_row gt_left\" style=\"border-top-width: 1px; border-top-style: hidden; border-top-color: #000000;\"><\/td> #> <td headers=\"Level\" class=\"gt_row gt_left\"><\/td> #> <td headers=\"Format\" class=\"gt_row gt_left\" style=\"border-right-width: 1px; border-right-style: solid; border-right-color: #000000;\">q05<\/td> #> <td headers=\"cohort1\" class=\"gt_row gt_left\">21,970<\/td> #> <td headers=\"cohort2\" class=\"gt_row gt_left\">NA<\/td><\/tr> #>     <tr><td headers=\"Variable\" class=\"gt_row gt_left\" style=\"border-top-width: 1px; border-top-style: hidden; border-top-color: #000000;\"><\/td> #> <td headers=\"Level\" class=\"gt_row gt_left\"><\/td> #> <td headers=\"Format\" class=\"gt_row gt_left\" style=\"border-right-width: 1px; border-right-style: solid; border-right-color: #000000;\">q95<\/td> #> <td headers=\"cohort1\" class=\"gt_row gt_left\">22,106<\/td> #> <td headers=\"cohort2\" class=\"gt_row gt_left\">NA<\/td><\/tr> #>     <tr><td headers=\"Variable\" class=\"gt_row gt_left\">Age group<\/td> #> <td headers=\"Level\" class=\"gt_row gt_left\">20 to 39<\/td> #> <td headers=\"Format\" class=\"gt_row gt_left\" style=\"border-right-width: 1px; border-right-style: solid; border-right-color: #000000;\">N (%)<\/td> #> <td headers=\"cohort1\" class=\"gt_row gt_left\">2 (67%)<\/td> #> <td headers=\"cohort2\" class=\"gt_row gt_left\">NA<\/td><\/tr> #>     <tr><td headers=\"Variable\" class=\"gt_row gt_left\" style=\"border-top-width: 1px; border-top-style: hidden; border-top-color: #000000;\"><\/td> #> <td headers=\"Level\" class=\"gt_row gt_left\"><\/td> #> <td headers=\"Format\" class=\"gt_row gt_left\" style=\"border-right-width: 1px; border-right-style: solid; border-right-color: #000000;\">N (%)<\/td> #> <td headers=\"cohort1\" class=\"gt_row gt_left\">1 (33%)<\/td> #> <td headers=\"cohort2\" class=\"gt_row gt_left\">1 (100%)<\/td><\/tr> #>     <tr><td headers=\"Variable\" class=\"gt_row gt_left\">Visits count from -365 to 0<\/td> #> <td headers=\"Level\" class=\"gt_row gt_left\">Visit occurrence<\/td> #> <td headers=\"Format\" class=\"gt_row gt_left\" style=\"border-right-width: 1px; border-right-style: solid; border-right-color: #000000;\">median [min; q25 - q75; max]<\/td> #> <td headers=\"cohort1\" class=\"gt_row gt_left\">0 [0; 0 - 0; 0]<\/td> #> <td headers=\"cohort2\" class=\"gt_row gt_left\">0 [0; 0 - 0; 0]<\/td><\/tr> #>     <tr><td headers=\"Variable\" class=\"gt_row gt_left\" style=\"border-top-width: 1px; border-top-style: hidden; border-top-color: #000000;\"><\/td> #> <td headers=\"Level\" class=\"gt_row gt_left\">Visit occurrence<\/td> #> <td headers=\"Format\" class=\"gt_row gt_left\" style=\"border-right-width: 1px; border-right-style: solid; border-right-color: #000000;\">mean (sd)<\/td> #> <td headers=\"cohort1\" class=\"gt_row gt_left\">0 (0)<\/td> #> <td headers=\"cohort2\" class=\"gt_row gt_left\">0 (NA)<\/td><\/tr> #>     <tr><td headers=\"Variable\" class=\"gt_row gt_left\" style=\"border-top-width: 1px; border-top-style: hidden; border-top-color: #000000;\"><\/td> #> <td headers=\"Level\" class=\"gt_row gt_left\">Visit occurrence<\/td> #> <td headers=\"Format\" class=\"gt_row gt_left\" style=\"border-right-width: 1px; border-right-style: solid; border-right-color: #000000;\">q05<\/td> #> <td headers=\"cohort1\" class=\"gt_row gt_left\">0<\/td> #> <td headers=\"cohort2\" class=\"gt_row gt_left\">0<\/td><\/tr> #>     <tr><td headers=\"Variable\" class=\"gt_row gt_left\" style=\"border-top-width: 1px; border-top-style: hidden; border-top-color: #000000;\"><\/td> #> <td headers=\"Level\" class=\"gt_row gt_left\">Visit occurrence<\/td> #> <td headers=\"Format\" class=\"gt_row gt_left\" style=\"border-right-width: 1px; border-right-style: solid; border-right-color: #000000;\">q95<\/td> #> <td headers=\"cohort1\" class=\"gt_row gt_left\">0<\/td> #> <td headers=\"cohort2\" class=\"gt_row gt_left\">0<\/td><\/tr> #>     <tr><td headers=\"Variable\" class=\"gt_row gt_left\">Medications flag from -365 to 0<\/td> #> <td headers=\"Level\" class=\"gt_row gt_left\">Cohort 1<\/td> #> <td headers=\"Format\" class=\"gt_row gt_left\" style=\"border-right-width: 1px; border-right-style: solid; border-right-color: #000000;\">N (%)<\/td> #> <td headers=\"cohort1\" class=\"gt_row gt_left\">2 (67%)<\/td> #> <td headers=\"cohort2\" class=\"gt_row gt_left\">0 (0%)<\/td><\/tr> #>     <tr><td headers=\"Variable\" class=\"gt_row gt_left\" style=\"border-top-width: 1px; border-top-style: hidden; border-top-color: #000000;\"><\/td> #> <td headers=\"Level\" class=\"gt_row gt_left\">Cohort 2<\/td> #> <td headers=\"Format\" class=\"gt_row gt_left\" style=\"border-right-width: 1px; border-right-style: solid; border-right-color: #000000;\">N (%)<\/td> #> <td headers=\"cohort1\" class=\"gt_row gt_left\">1 (33%)<\/td> #> <td headers=\"cohort2\" class=\"gt_row gt_left\">0 (0%)<\/td><\/tr> #>     <tr><td headers=\"Variable\" class=\"gt_row gt_left\" style=\"border-top-width: 1px; border-top-style: hidden; border-top-color: #000000;\"><\/td> #> <td headers=\"Level\" class=\"gt_row gt_left\">Cohort 3<\/td> #> <td headers=\"Format\" class=\"gt_row gt_left\" style=\"border-right-width: 1px; border-right-style: solid; border-right-color: #000000;\">N (%)<\/td> #> <td headers=\"cohort1\" class=\"gt_row gt_left\">0 (0%)<\/td> #> <td headers=\"cohort2\" class=\"gt_row gt_left\">0 (0%)<\/td><\/tr> #>   <\/tbody> #>    #>    #> <\/table> #> <\/div> # }"},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/gtResult.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a gt table from a summary object. — gtResult","title":"Create a gt table from a summary object. — gtResult","text":"`r lifecycle::badge(\"experimental\")`","code":""},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/gtResult.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a gt table from a summary object. — gtResult","text":"","code":"gtResult(   summarisedResult,   long,   wide,   format = c(`N (%)` = \"count (percentage%)\", \"median [min; q25 - q75; max]\",     \"mean (sd)\", \"median [q25 - q75]\", N = \"count\"),   keepNotFormatted = TRUE,   decimals = c(default = 0),   decimalMark = \".\",   bigMark = \",\" )"},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/gtResult.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a gt table from a summary object. — gtResult","text":"summarisedResult SummarisedResult object. long List variables specification long wide List variables specification wide format formats labels use keepNotFormatted Wheather keep formated estimate types decimals Decimals per estimate_type decimalMark decimal mark bigMark big mark","code":""},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/gtResult.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a gt table from a summary object. — gtResult","text":"formatted summarisedResult gt object.","code":""},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/gtResult.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a gt table from a summary object. — gtResult","text":"","code":"# \\donttest{ library(PatientProfiles)  cdm <- mockPatientProfiles()  cdm$cohort1 %>%   summariseCharacteristics(     ageGroup = list(c(0, 19), c(20, 39), c(40, 59), c(60, 79), c(80, 150)),     minCellCount = 1   ) %>%   gtResult(     long = list(       \"Variable\" = c(level = \"variable\", \"clean\"),       \"Level\" = c(level = \"variable_level\"),       \"Format\" = c(level = \"format\", \"separator-right\")     ),     wide = list(       \"CDM Name\" = c(level = \"cdm_name\"),       \"Group\" = c(level = c(\"group_name\", \"group_level\")),       \"Strata\" = c(level = c(\"strata_name\", \"strata_level\"))     ),     format = c(       \"N (%)\" = \"count (percentage%)\",       \"N\" = \"count\",       \"median [Q25-Q75]\" = \"median [q25-q75]\"     ),     decimals = c(count = 0),     keepNotFormatted = FALSE   ) #> Warning: There were 3 warnings in `dplyr::summarise()`. #> The first warning was: #> ℹ In argument: `dplyr::across(...)`. #> ℹ In group 1: `strata_level = \"Overall\"`. #> Caused by warning in `base::min()`: #> ! no non-missing arguments to min; returning Inf #> ℹ Run `dplyr::last_dplyr_warnings()` to see the 2 remaining warnings. #> Warning: There were 3 warnings in `dplyr::summarise()`. #> The first warning was: #> ℹ In argument: `dplyr::across(...)`. #> ℹ In group 1: `strata_level = \"Overall\"`. #> Caused by warning in `base::max()`: #> ! no non-missing arguments to max; returning -Inf #> ℹ Run `dplyr::last_dplyr_warnings()` to see the 2 remaining warnings. #> <div id=\"tjhanlpljb\" style=\"padding-left:0px;padding-right:0px;padding-top:10px;padding-bottom:10px;overflow-x:auto;overflow-y:auto;width:auto;height:auto;\"> #>   <style>#tjhanlpljb table { #>   font-family: system-ui, 'Segoe UI', Roboto, Helvetica, Arial, sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol', 'Noto Color Emoji'; #>   -webkit-font-smoothing: antialiased; #>   -moz-osx-font-smoothing: grayscale; #> } #>  #> #tjhanlpljb thead, #tjhanlpljb tbody, #tjhanlpljb tfoot, #tjhanlpljb tr, #tjhanlpljb td, #tjhanlpljb th { #>   border-style: none; #> } #>  #> #tjhanlpljb p { #>   margin: 0; #>   padding: 0; #> } #>  #> #tjhanlpljb .gt_table { #>   display: table; #>   border-collapse: collapse; #>   line-height: normal; #>   margin-left: auto; #>   margin-right: auto; #>   color: #333333; #>   font-size: 16px; #>   font-weight: normal; #>   font-style: normal; #>   background-color: #FFFFFF; #>   width: auto; #>   border-top-style: solid; #>   border-top-width: 2px; #>   border-top-color: #A8A8A8; #>   border-right-style: none; #>   border-right-width: 2px; #>   border-right-color: #D3D3D3; #>   border-bottom-style: solid; #>   border-bottom-width: 2px; #>   border-bottom-color: #A8A8A8; #>   border-left-style: none; #>   border-left-width: 2px; #>   border-left-color: #D3D3D3; #> } #>  #> #tjhanlpljb .gt_caption { #>   padding-top: 4px; #>   padding-bottom: 4px; #> } #>  #> #tjhanlpljb .gt_title { #>   color: #333333; #>   font-size: 125%; #>   font-weight: initial; #>   padding-top: 4px; #>   padding-bottom: 4px; #>   padding-left: 5px; #>   padding-right: 5px; #>   border-bottom-color: #FFFFFF; #>   border-bottom-width: 0; #> } #>  #> #tjhanlpljb .gt_subtitle { #>   color: #333333; #>   font-size: 85%; #>   font-weight: initial; #>   padding-top: 3px; #>   padding-bottom: 5px; #>   padding-left: 5px; #>   padding-right: 5px; #>   border-top-color: #FFFFFF; #>   border-top-width: 0; #> } #>  #> #tjhanlpljb .gt_heading { #>   background-color: #FFFFFF; #>   text-align: center; #>   border-bottom-color: #FFFFFF; #>   border-left-style: none; #>   border-left-width: 1px; #>   border-left-color: #D3D3D3; #>   border-right-style: none; #>   border-right-width: 1px; #>   border-right-color: #D3D3D3; #> } #>  #> #tjhanlpljb .gt_bottom_border { #>   border-bottom-style: solid; #>   border-bottom-width: 2px; #>   border-bottom-color: #D3D3D3; #> } #>  #> #tjhanlpljb .gt_col_headings { #>   border-top-style: solid; #>   border-top-width: 2px; #>   border-top-color: #D3D3D3; #>   border-bottom-style: solid; #>   border-bottom-width: 2px; #>   border-bottom-color: #D3D3D3; #>   border-left-style: none; #>   border-left-width: 1px; #>   border-left-color: #D3D3D3; #>   border-right-style: none; #>   border-right-width: 1px; #>   border-right-color: #D3D3D3; #> } #>  #> #tjhanlpljb .gt_col_heading { #>   color: #333333; #>   background-color: #FFFFFF; #>   font-size: 100%; #>   font-weight: normal; #>   text-transform: inherit; #>   border-left-style: none; #>   border-left-width: 1px; #>   border-left-color: #D3D3D3; #>   border-right-style: none; #>   border-right-width: 1px; #>   border-right-color: #D3D3D3; #>   vertical-align: bottom; #>   padding-top: 5px; #>   padding-bottom: 6px; #>   padding-left: 5px; #>   padding-right: 5px; #>   overflow-x: hidden; #> } #>  #> #tjhanlpljb .gt_column_spanner_outer { #>   color: #333333; #>   background-color: #FFFFFF; #>   font-size: 100%; #>   font-weight: normal; #>   text-transform: inherit; #>   padding-top: 0; #>   padding-bottom: 0; #>   padding-left: 4px; #>   padding-right: 4px; #> } #>  #> #tjhanlpljb .gt_column_spanner_outer:first-child { #>   padding-left: 0; #> } #>  #> #tjhanlpljb .gt_column_spanner_outer:last-child { #>   padding-right: 0; #> } #>  #> #tjhanlpljb .gt_column_spanner { #>   border-bottom-style: solid; #>   border-bottom-width: 2px; #>   border-bottom-color: #D3D3D3; #>   vertical-align: bottom; #>   padding-top: 5px; #>   padding-bottom: 5px; #>   overflow-x: hidden; #>   display: inline-block; #>   width: 100%; #> } #>  #> #tjhanlpljb .gt_spanner_row { #>   border-bottom-style: hidden; #> } #>  #> #tjhanlpljb .gt_group_heading { #>   padding-top: 8px; #>   padding-bottom: 8px; #>   padding-left: 5px; #>   padding-right: 5px; #>   color: #333333; #>   background-color: #FFFFFF; #>   font-size: 100%; #>   font-weight: initial; #>   text-transform: inherit; #>   border-top-style: solid; #>   border-top-width: 2px; #>   border-top-color: #D3D3D3; #>   border-bottom-style: solid; #>   border-bottom-width: 2px; #>   border-bottom-color: #D3D3D3; #>   border-left-style: none; #>   border-left-width: 1px; #>   border-left-color: #D3D3D3; #>   border-right-style: none; #>   border-right-width: 1px; #>   border-right-color: #D3D3D3; #>   vertical-align: middle; #>   text-align: left; #> } #>  #> #tjhanlpljb .gt_empty_group_heading { #>   padding: 0.5px; #>   color: #333333; #>   background-color: #FFFFFF; #>   font-size: 100%; #>   font-weight: initial; #>   border-top-style: solid; #>   border-top-width: 2px; #>   border-top-color: #D3D3D3; #>   border-bottom-style: solid; #>   border-bottom-width: 2px; #>   border-bottom-color: #D3D3D3; #>   vertical-align: middle; #> } #>  #> #tjhanlpljb .gt_from_md > :first-child { #>   margin-top: 0; #> } #>  #> #tjhanlpljb .gt_from_md > :last-child { #>   margin-bottom: 0; #> } #>  #> #tjhanlpljb .gt_row { #>   padding-top: 8px; #>   padding-bottom: 8px; #>   padding-left: 5px; #>   padding-right: 5px; #>   margin: 10px; #>   border-top-style: solid; #>   border-top-width: 1px; #>   border-top-color: #D3D3D3; #>   border-left-style: none; #>   border-left-width: 1px; #>   border-left-color: #D3D3D3; #>   border-right-style: none; #>   border-right-width: 1px; #>   border-right-color: #D3D3D3; #>   vertical-align: middle; #>   overflow-x: hidden; #> } #>  #> #tjhanlpljb .gt_stub { #>   color: #333333; #>   background-color: #FFFFFF; #>   font-size: 100%; #>   font-weight: initial; #>   text-transform: inherit; #>   border-right-style: solid; #>   border-right-width: 2px; #>   border-right-color: #D3D3D3; #>   padding-left: 5px; #>   padding-right: 5px; #> } #>  #> #tjhanlpljb .gt_stub_row_group { #>   color: #333333; #>   background-color: #FFFFFF; #>   font-size: 100%; #>   font-weight: initial; #>   text-transform: inherit; #>   border-right-style: solid; #>   border-right-width: 2px; #>   border-right-color: #D3D3D3; #>   padding-left: 5px; #>   padding-right: 5px; #>   vertical-align: top; #> } #>  #> #tjhanlpljb .gt_row_group_first td { #>   border-top-width: 2px; #> } #>  #> #tjhanlpljb .gt_row_group_first th { #>   border-top-width: 2px; #> } #>  #> #tjhanlpljb .gt_summary_row { #>   color: #333333; #>   background-color: #FFFFFF; #>   text-transform: inherit; #>   padding-top: 8px; #>   padding-bottom: 8px; #>   padding-left: 5px; #>   padding-right: 5px; #> } #>  #> #tjhanlpljb .gt_first_summary_row { #>   border-top-style: solid; #>   border-top-color: #D3D3D3; #> } #>  #> #tjhanlpljb .gt_first_summary_row.thick { #>   border-top-width: 2px; #> } #>  #> #tjhanlpljb .gt_last_summary_row { #>   padding-top: 8px; #>   padding-bottom: 8px; #>   padding-left: 5px; #>   padding-right: 5px; #>   border-bottom-style: solid; #>   border-bottom-width: 2px; #>   border-bottom-color: #D3D3D3; #> } #>  #> #tjhanlpljb .gt_grand_summary_row { #>   color: #333333; #>   background-color: #FFFFFF; #>   text-transform: inherit; #>   padding-top: 8px; #>   padding-bottom: 8px; #>   padding-left: 5px; #>   padding-right: 5px; #> } #>  #> #tjhanlpljb .gt_first_grand_summary_row { #>   padding-top: 8px; #>   padding-bottom: 8px; #>   padding-left: 5px; #>   padding-right: 5px; #>   border-top-style: double; #>   border-top-width: 6px; #>   border-top-color: #D3D3D3; #> } #>  #> #tjhanlpljb .gt_last_grand_summary_row_top { #>   padding-top: 8px; #>   padding-bottom: 8px; #>   padding-left: 5px; #>   padding-right: 5px; #>   border-bottom-style: double; #>   border-bottom-width: 6px; #>   border-bottom-color: #D3D3D3; #> } #>  #> #tjhanlpljb .gt_striped { #>   background-color: rgba(128, 128, 128, 0.05); #> } #>  #> #tjhanlpljb .gt_table_body { #>   border-top-style: solid; #>   border-top-width: 2px; #>   border-top-color: #D3D3D3; #>   border-bottom-style: solid; #>   border-bottom-width: 2px; #>   border-bottom-color: #D3D3D3; #> } #>  #> #tjhanlpljb .gt_footnotes { #>   color: #333333; #>   background-color: #FFFFFF; #>   border-bottom-style: none; #>   border-bottom-width: 2px; #>   border-bottom-color: #D3D3D3; #>   border-left-style: none; #>   border-left-width: 2px; #>   border-left-color: #D3D3D3; #>   border-right-style: none; #>   border-right-width: 2px; #>   border-right-color: #D3D3D3; #> } #>  #> #tjhanlpljb .gt_footnote { #>   margin: 0px; #>   font-size: 90%; #>   padding-top: 4px; #>   padding-bottom: 4px; #>   padding-left: 5px; #>   padding-right: 5px; #> } #>  #> #tjhanlpljb .gt_sourcenotes { #>   color: #333333; #>   background-color: #FFFFFF; #>   border-bottom-style: none; #>   border-bottom-width: 2px; #>   border-bottom-color: #D3D3D3; #>   border-left-style: none; #>   border-left-width: 2px; #>   border-left-color: #D3D3D3; #>   border-right-style: none; #>   border-right-width: 2px; #>   border-right-color: #D3D3D3; #> } #>  #> #tjhanlpljb .gt_sourcenote { #>   font-size: 90%; #>   padding-top: 4px; #>   padding-bottom: 4px; #>   padding-left: 5px; #>   padding-right: 5px; #> } #>  #> #tjhanlpljb .gt_left { #>   text-align: left; #> } #>  #> #tjhanlpljb .gt_center { #>   text-align: center; #> } #>  #> #tjhanlpljb .gt_right { #>   text-align: right; #>   font-variant-numeric: tabular-nums; #> } #>  #> #tjhanlpljb .gt_font_normal { #>   font-weight: normal; #> } #>  #> #tjhanlpljb .gt_font_bold { #>   font-weight: bold; #> } #>  #> #tjhanlpljb .gt_font_italic { #>   font-style: italic; #> } #>  #> #tjhanlpljb .gt_super { #>   font-size: 65%; #> } #>  #> #tjhanlpljb .gt_footnote_marks { #>   font-size: 75%; #>   vertical-align: 0.4em; #>   position: initial; #> } #>  #> #tjhanlpljb .gt_asterisk { #>   font-size: 100%; #>   vertical-align: 0; #> } #>  #> #tjhanlpljb .gt_indent_1 { #>   text-indent: 5px; #> } #>  #> #tjhanlpljb .gt_indent_2 { #>   text-indent: 10px; #> } #>  #> #tjhanlpljb .gt_indent_3 { #>   text-indent: 15px; #> } #>  #> #tjhanlpljb .gt_indent_4 { #>   text-indent: 20px; #> } #>  #> #tjhanlpljb .gt_indent_5 { #>   text-indent: 25px; #> } #> <\/style> #>   <table class=\"gt_table\" style=\"table-layout: fixed;; width: 0px\" data-quarto-disable-processing=\"false\" data-quarto-bootstrap=\"false\"> #>   <colgroup> #>     <col style=\"width:200px;\"/> #>     <col style=\"width:200px;\"/> #>     <col style=\"width:200px;\"/> #>     <col style=\"width:200px;\"/> #>     <col style=\"width:200px;\"/> #>   <\/colgroup> #>   <thead> #>      #>     <tr class=\"gt_col_headings gt_spanner_row\"> #>       <th class=\"gt_center gt_columns_top_border gt_column_spanner_outer\" rowspan=\"1\" colspan=\"3\" style=\"background-color: #C8C8C8; font-weight: bold;\" scope=\"colgroup\" id><\/th> #>       <th class=\"gt_center gt_columns_top_border gt_column_spanner_outer\" rowspan=\"1\" colspan=\"2\" style=\"background-color: #C8C8C8; font-weight: bold;\" scope=\"colgroup\" id=\"CDM Name\"> #>         <span class=\"gt_column_spanner\">CDM Name<\/span> #>       <\/th> #>     <\/tr> #>     <tr class=\"gt_col_headings gt_spanner_row\"> #>       <th class=\"gt_center gt_columns_top_border gt_column_spanner_outer\" rowspan=\"1\" colspan=\"3\" style=\"background-color: #FFFFFF;\" scope=\"colgroup\" id><\/th> #>       <th class=\"gt_center gt_columns_top_border gt_column_spanner_outer\" rowspan=\"1\" colspan=\"2\" style=\"background-color: #FFFFFF;\" scope=\"colgroup\" id=\"PP_MOCK\"> #>         <span class=\"gt_column_spanner\">PP_MOCK<\/span> #>       <\/th> #>     <\/tr> #>     <tr class=\"gt_col_headings gt_spanner_row\"> #>       <th class=\"gt_center gt_columns_top_border gt_column_spanner_outer\" rowspan=\"1\" colspan=\"3\" style=\"background-color: #C8C8C8; font-weight: bold;\" scope=\"colgroup\" id><\/th> #>       <th class=\"gt_center gt_columns_top_border gt_column_spanner_outer\" rowspan=\"1\" colspan=\"2\" style=\"background-color: #C8C8C8; font-weight: bold;\" scope=\"colgroup\" id=\"Group\"> #>         <span class=\"gt_column_spanner\">Group<\/span> #>       <\/th> #>     <\/tr> #>     <tr class=\"gt_col_headings gt_spanner_row\"> #>       <th class=\"gt_center gt_columns_top_border gt_column_spanner_outer\" rowspan=\"1\" colspan=\"3\" style=\"background-color: #FFFFFF; background-color: #FFFFFF;\" scope=\"colgroup\" id><\/th> #>       <th class=\"gt_center gt_columns_top_border gt_column_spanner_outer\" rowspan=\"1\" colspan=\"1\" style=\"background-color: #FFFFFF; background-color: #FFFFFF;\" scope=\"col\" id=\"cohort_name: Cohort 1\"> #>         <span class=\"gt_column_spanner\">cohort_name: Cohort 1<\/span> #>       <\/th> #>       <th class=\"gt_center gt_columns_top_border gt_column_spanner_outer\" rowspan=\"1\" colspan=\"1\" style=\"background-color: #FFFFFF; background-color: #FFFFFF;\" scope=\"col\" id=\"cohort_name: Cohort 2\"> #>         <span class=\"gt_column_spanner\">cohort_name: Cohort 2<\/span> #>       <\/th> #>     <\/tr> #>     <tr class=\"gt_col_headings gt_spanner_row\"> #>       <th class=\"gt_center gt_columns_top_border gt_column_spanner_outer\" rowspan=\"1\" colspan=\"3\" style=\"background-color: #C8C8C8; font-weight: bold;\" scope=\"colgroup\" id><\/th> #>       <th class=\"gt_center gt_columns_top_border gt_column_spanner_outer\" rowspan=\"1\" colspan=\"2\" style=\"background-color: #C8C8C8; font-weight: bold;\" scope=\"colgroup\" id=\"Strata\"> #>         <span class=\"gt_column_spanner\">Strata<\/span> #>       <\/th> #>     <\/tr> #>     <tr class=\"gt_col_headings gt_spanner_row\"> #>       <th class=\"gt_col_heading gt_columns_bottom_border gt_left\" rowspan=\"2\" colspan=\"1\" scope=\"col\" id=\"Variable\">Variable<\/th> #>       <th class=\"gt_col_heading gt_columns_bottom_border gt_left\" rowspan=\"2\" colspan=\"1\" scope=\"col\" id=\"Level\">Level<\/th> #>       <th class=\"gt_col_heading gt_columns_bottom_border gt_left\" rowspan=\"2\" colspan=\"1\" scope=\"col\" id=\"Format\">Format<\/th> #>       <th class=\"gt_center gt_columns_top_border gt_column_spanner_outer\" rowspan=\"1\" colspan=\"2\" style=\"background-color: #FFFFFF;\" scope=\"colgroup\" id=\"Overall: Overall\"> #>         <span class=\"gt_column_spanner\">Overall: Overall<\/span> #>       <\/th> #>     <\/tr> #>     <tr class=\"gt_col_headings\"> #>       <th class=\"gt_col_heading gt_columns_bottom_border gt_left\" rowspan=\"1\" colspan=\"1\" scope=\"col\" id=\"cohort1\">cohort1<\/th> #>       <th class=\"gt_col_heading gt_columns_bottom_border gt_left\" rowspan=\"1\" colspan=\"1\" scope=\"col\" id=\"cohort2\">cohort2<\/th> #>     <\/tr> #>   <\/thead> #>   <tbody class=\"gt_table_body\"> #>     <tr><td headers=\"Variable\" class=\"gt_row gt_left\">Number subjects<\/td> #> <td headers=\"Level\" class=\"gt_row gt_left\"><\/td> #> <td headers=\"Format\" class=\"gt_row gt_left\" style=\"border-right-width: 1px; border-right-style: solid; border-right-color: #000000;\">N<\/td> #> <td headers=\"cohort1\" class=\"gt_row gt_left\">2<\/td> #> <td headers=\"cohort2\" class=\"gt_row gt_left\">1<\/td><\/tr> #>     <tr><td headers=\"Variable\" class=\"gt_row gt_left\">Number records<\/td> #> <td headers=\"Level\" class=\"gt_row gt_left\"><\/td> #> <td headers=\"Format\" class=\"gt_row gt_left\" style=\"border-right-width: 1px; border-right-style: solid; border-right-color: #000000;\">N<\/td> #> <td headers=\"cohort1\" class=\"gt_row gt_left\">3<\/td> #> <td headers=\"cohort2\" class=\"gt_row gt_left\">1<\/td><\/tr> #>     <tr><td headers=\"Variable\" class=\"gt_row gt_left\">Cohort start date<\/td> #> <td headers=\"Level\" class=\"gt_row gt_left\"><\/td> #> <td headers=\"Format\" class=\"gt_row gt_left\" style=\"border-right-width: 1px; border-right-style: solid; border-right-color: #000000;\">median [Q25-Q75]<\/td> #> <td headers=\"cohort1\" class=\"gt_row gt_left\">2020-01-02 [2020-01-01-2020-03-17]<\/td> #> <td headers=\"cohort2\" class=\"gt_row gt_left\">2020-01-01 [2020-01-01-2020-01-01]<\/td><\/tr> #>     <tr><td headers=\"Variable\" class=\"gt_row gt_left\">Cohort end date<\/td> #> <td headers=\"Level\" class=\"gt_row gt_left\"><\/td> #> <td headers=\"Format\" class=\"gt_row gt_left\" style=\"border-right-width: 1px; border-right-style: solid; border-right-color: #000000;\">median [Q25-Q75]<\/td> #> <td headers=\"cohort1\" class=\"gt_row gt_left\">2020-04-01 [2020-03-03-2020-06-01]<\/td> #> <td headers=\"cohort2\" class=\"gt_row gt_left\">2020-03-01 [2020-03-01-2020-03-01]<\/td><\/tr> #>     <tr><td headers=\"Variable\" class=\"gt_row gt_left\">Age<\/td> #> <td headers=\"Level\" class=\"gt_row gt_left\"><\/td> #> <td headers=\"Format\" class=\"gt_row gt_left\" style=\"border-right-width: 1px; border-right-style: solid; border-right-color: #000000;\">median [Q25-Q75]<\/td> #> <td headers=\"cohort1\" class=\"gt_row gt_left\">26 [25-26]<\/td> #> <td headers=\"cohort2\" class=\"gt_row gt_left\">NA [NA-NA]<\/td><\/tr> #>     <tr><td headers=\"Variable\" class=\"gt_row gt_left\">Sex<\/td> #> <td headers=\"Level\" class=\"gt_row gt_left\">Male<\/td> #> <td headers=\"Format\" class=\"gt_row gt_left\" style=\"border-right-width: 1px; border-right-style: solid; border-right-color: #000000;\">N (%)<\/td> #> <td headers=\"cohort1\" class=\"gt_row gt_left\">2 (67%)<\/td> #> <td headers=\"cohort2\" class=\"gt_row gt_left\">NA<\/td><\/tr> #>     <tr><td headers=\"Variable\" class=\"gt_row gt_left\" style=\"border-top-width: 1px; border-top-style: hidden; border-top-color: #000000;\"><\/td> #> <td headers=\"Level\" class=\"gt_row gt_left\">None<\/td> #> <td headers=\"Format\" class=\"gt_row gt_left\" style=\"border-right-width: 1px; border-right-style: solid; border-right-color: #000000;\">N (%)<\/td> #> <td headers=\"cohort1\" class=\"gt_row gt_left\">1 (33%)<\/td> #> <td headers=\"cohort2\" class=\"gt_row gt_left\">1 (100%)<\/td><\/tr> #>     <tr><td headers=\"Variable\" class=\"gt_row gt_left\">Prior observation<\/td> #> <td headers=\"Level\" class=\"gt_row gt_left\"><\/td> #> <td headers=\"Format\" class=\"gt_row gt_left\" style=\"border-right-width: 1px; border-right-style: solid; border-right-color: #000000;\">median [Q25-Q75]<\/td> #> <td headers=\"cohort1\" class=\"gt_row gt_left\">4,745 [4,707-4,783]<\/td> #> <td headers=\"cohort2\" class=\"gt_row gt_left\">NA [NA-NA]<\/td><\/tr> #>     <tr><td headers=\"Variable\" class=\"gt_row gt_left\">Future observation<\/td> #> <td headers=\"Level\" class=\"gt_row gt_left\"><\/td> #> <td headers=\"Format\" class=\"gt_row gt_left\" style=\"border-right-width: 1px; border-right-style: solid; border-right-color: #000000;\">median [Q25-Q75]<\/td> #> <td headers=\"cohort1\" class=\"gt_row gt_left\">22,038 [22,000-22,076]<\/td> #> <td headers=\"cohort2\" class=\"gt_row gt_left\">NA [NA-NA]<\/td><\/tr> #>     <tr><td headers=\"Variable\" class=\"gt_row gt_left\">Age group<\/td> #> <td headers=\"Level\" class=\"gt_row gt_left\">20 to 39<\/td> #> <td headers=\"Format\" class=\"gt_row gt_left\" style=\"border-right-width: 1px; border-right-style: solid; border-right-color: #000000;\">N (%)<\/td> #> <td headers=\"cohort1\" class=\"gt_row gt_left\">2 (67%)<\/td> #> <td headers=\"cohort2\" class=\"gt_row gt_left\">NA<\/td><\/tr> #>     <tr><td headers=\"Variable\" class=\"gt_row gt_left\" style=\"border-top-width: 1px; border-top-style: hidden; border-top-color: #000000;\"><\/td> #> <td headers=\"Level\" class=\"gt_row gt_left\"><\/td> #> <td headers=\"Format\" class=\"gt_row gt_left\" style=\"border-right-width: 1px; border-right-style: solid; border-right-color: #000000;\">N (%)<\/td> #> <td headers=\"cohort1\" class=\"gt_row gt_left\">1 (33%)<\/td> #> <td headers=\"cohort2\" class=\"gt_row gt_left\">1 (100%)<\/td><\/tr> #>   <\/tbody> #>    #>    #> <\/table> #> <\/div> # }"},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/mockPatientProfiles.html","id":null,"dir":"Reference","previous_headings":"","what":"It creates a mock database for testing PatientProfiles package — mockPatientProfiles","title":"It creates a mock database for testing PatientProfiles package — mockPatientProfiles","text":"creates mock database testing PatientProfiles package","code":""},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/mockPatientProfiles.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"It creates a mock database for testing PatientProfiles package — mockPatientProfiles","text":"","code":"mockPatientProfiles(   connectionDetails = list(con = DBI::dbConnect(duckdb::duckdb(), \":memory:\"),     write_schema = \"main\", mock_prefix = NULL),   drug_exposure = NULL,   drug_strength = NULL,   observation_period = NULL,   condition_occurrence = NULL,   visit_occurrence = NULL,   concept_ancestor = NULL,   person = NULL,   cohort1 = NULL,   cohort2 = NULL,   drug_concept_id_size = 5,   ancestor_concept_id_size = 5,   condition_concept_id_size = 5,   visit_concept_id_size = 5,   visit_occurrence_id_size = 5,   ingredient_concept_id_size = 1,   drug_exposure_size = 10,   patient_size = 1,   min_drug_exposure_start_date = \"2000-01-01\",   max_drug_exposure_start_date = \"2020-01-01\",   earliest_date_of_birth = NULL,   latest_date_of_birth = NULL,   earliest_observation_start_date = NULL,   latest_observation_start_date = NULL,   min_days_to_observation_end = NULL,   max_days_to_observation_end = NULL,   earliest_condition_start_date = NULL,   latest_condition_start_date = NULL,   min_days_to_condition_end = NULL,   max_days_to_condition_end = NULL,   earliest_visit_start_date = NULL,   latest_visit_start_date = NULL,   min_days_to_visit_end = NULL,   max_days_to_visit_end = NULL,   seed = 1,   ... )"},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/mockPatientProfiles.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"It creates a mock database for testing PatientProfiles package — mockPatientProfiles","text":"connectionDetails Connection details create cdm mock object drug_exposure default null user can define table drug_strength default null user can define table observation_period default null user can define table condition_occurrence default null user can define table visit_occurrence default null user can define visit_occurrence table concept_ancestor concept ancestor table person default null user can define table cohort1 cohort table test run getindication cohort2 cohort table test run getindication drug_concept_id_size number unique drug concept id ancestor_concept_id_size size concept ancestor table condition_concept_id_size number unique row condition concept table visit_concept_id_size number unique visit concept id visit_occurrence_id_size number unique visit occurrence id ingredient_concept_id_size number unique drug ingredient concept id drug_exposure_size number unique drug exposure patient_size number unique patient min_drug_exposure_start_date user define minimum drug exposure start date max_drug_exposure_start_date user define maximum drug exposure start date earliest_date_of_birth earliest date birth patient person table format \"dd-mm-yyyy\" latest_date_of_birth latest date birth patient person table format \"dd-mm-yyyy\" earliest_observation_start_date earliest observation start date patient format \"dd-mm-yyyy\" latest_observation_start_date latest observation start date patient format \"dd-mm-yyyy\" min_days_to_observation_end minimum number days observational integer max_days_to_observation_end maximum number days observation period integer earliest_condition_start_date earliest condition start date patient format \"dd-mm-yyyy\" latest_condition_start_date latest condition start date patient format \"dd-mm-yyyy\" min_days_to_condition_end minimum number days condition integer max_days_to_condition_end maximum number days condition integer earliest_visit_start_date earliest visit start date patient format \"dd-mm-yyyy\" latest_visit_start_date latest visit start date patient format \"dd-mm-yyyy\" min_days_to_visit_end minimum number days visit integer max_days_to_visit_end maximum number days visit integer seed seed ... user self defined tibble table put cdm, can input many user want","code":""},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/mockPatientProfiles.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"It creates a mock database for testing PatientProfiles package — mockPatientProfiles","text":"cdm mock database following user's specifications","code":""},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/mockPatientProfiles.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"It creates a mock database for testing PatientProfiles package — mockPatientProfiles","text":"","code":"# \\donttest{ library(PatientProfiles) cdm <- mockPatientProfiles() # }"},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/pipe.html","id":null,"dir":"Reference","previous_headings":"","what":"Pipe operator — %>%","title":"Pipe operator — %>%","text":"See magrittr::%>% details.","code":""},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/pipe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pipe operator — %>%","text":"","code":"lhs %>% rhs"},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/pipe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pipe operator — %>%","text":"lhs value magrittr placeholder. rhs function call using magrittr semantics.","code":""},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/pipe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pipe operator — %>%","text":"result calling `rhs(lhs)`.","code":""},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/summariseCharacteristics.html","id":null,"dir":"Reference","previous_headings":"","what":"Summarise characteristics of individuals — summariseCharacteristics","title":"Summarise characteristics of individuals — summariseCharacteristics","text":"Summarise characteristics individuals","code":""},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/summariseCharacteristics.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summarise characteristics of individuals — summariseCharacteristics","text":"","code":"summariseCharacteristics(   cohort,   cdm = attr(cohort, \"cdm_reference\"),   strata = list(),   demographics = TRUE,   ageGroup = NULL,   tableIntersect = list(),   cohortIntersect = list(),   conceptIntersect = list(),   otherVariables = character(),   minCellCount = 5 )"},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/summariseCharacteristics.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summarise characteristics of individuals — summariseCharacteristics","text":"cohort cohort cdm cdm cdm reference. strata Stratification list demographics Whether summarise demographics data. ageGroup list age groups. tableIntersect list arguments uses addTableIntersect function add variables summarise cohortIntersect list arguments uses addCohortIntersect function add variables summarise. conceptIntersect list arguments uses addConceptIntersect function add variables summarise. otherVariables variables contained cohort want summarised. minCellCount minimum counts due obscure","code":""},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/summariseCharacteristics.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Summarise characteristics of individuals — summariseCharacteristics","text":"summary characteristics individuals","code":""},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/summariseCharacteristics.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Summarise characteristics of individuals — summariseCharacteristics","text":"","code":"# \\donttest{ library(PatientProfiles)  cdm <- mockPatientProfiles()  summariseCharacteristics(   cohort = cdm$cohort1,   ageGroup = list(c(0, 19), c(20, 39), c(40, 59), c(60, 79), c(80, 150)),   tableIntersect = list(     \"Visits\" = list(       tableName = \"visit_occurrence\", value = \"count\", window = c(-365, 0)     )   ),   cohortIntersect = list(     \"Medications\" = list(       targetCohortTable = \"cohort2\", value = \"flag\", window = c(-365, 0)     )   ) ) #> Warning: There were 3 warnings in `dplyr::summarise()`. #> The first warning was: #> ℹ In argument: `dplyr::across(...)`. #> ℹ In group 1: `strata_level = \"Overall\"`. #> Caused by warning in `base::min()`: #> ! no non-missing arguments to min; returning Inf #> ℹ Run `dplyr::last_dplyr_warnings()` to see the 2 remaining warnings. #> Warning: There were 3 warnings in `dplyr::summarise()`. #> The first warning was: #> ℹ In argument: `dplyr::across(...)`. #> ℹ In group 1: `strata_level = \"Overall\"`. #> Caused by warning in `base::max()`: #> ! no non-missing arguments to max; returning -Inf #> ℹ Run `dplyr::last_dplyr_warnings()` to see the 2 remaining warnings. #> # A tibble: 128 × 11 #>    cdm_name result_type group_name group_level strata_name strata_level variable #>    <chr>    <chr>       <chr>      <chr>       <chr>       <chr>        <chr>    #>  1 PP_MOCK  Summary ch… cohort_na… Cohort 1    Overall     Overall      Number … #>  2 PP_MOCK  Summary ch… cohort_na… Cohort 1    Overall     Overall      Number … #>  3 PP_MOCK  Summary ch… cohort_na… Cohort 1    Overall     Overall      Cohort … #>  4 PP_MOCK  Summary ch… cohort_na… Cohort 1    Overall     Overall      Cohort … #>  5 PP_MOCK  Summary ch… cohort_na… Cohort 1    Overall     Overall      Cohort … #>  6 PP_MOCK  Summary ch… cohort_na… Cohort 1    Overall     Overall      Cohort … #>  7 PP_MOCK  Summary ch… cohort_na… Cohort 1    Overall     Overall      Cohort … #>  8 PP_MOCK  Summary ch… cohort_na… Cohort 1    Overall     Overall      Cohort … #>  9 PP_MOCK  Summary ch… cohort_na… Cohort 1    Overall     Overall      Cohort … #> 10 PP_MOCK  Summary ch… cohort_na… Cohort 1    Overall     Overall      Cohort … #> # ℹ 118 more rows #> # ℹ 4 more variables: variable_level <chr>, variable_type <chr>, #> #   estimate_type <chr>, estimate <chr> # }"},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/summariseLargeScaleCharacteristics.html","id":null,"dir":"Reference","previous_headings":"","what":"This function is used to summarise the large scale characteristics of a\ncohort table — summariseLargeScaleCharacteristics","title":"This function is used to summarise the large scale characteristics of a\ncohort table — summariseLargeScaleCharacteristics","text":"function used summarise large scale characteristics cohort table","code":""},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/summariseLargeScaleCharacteristics.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"This function is used to summarise the large scale characteristics of a\ncohort table — summariseLargeScaleCharacteristics","text":"","code":"summariseLargeScaleCharacteristics(   cohort,   strata = list(),   window = list(c(-Inf, -366), c(-365, -31), c(-30, -1), c(0, 0), c(1, 30), c(31, 365),     c(366, Inf)),   eventInWindow = NULL,   episodeInWindow = NULL,   includeSource = FALSE,   minCellCount = 5,   minimumFrequency = 0.005,   cdm = attr(cohort, \"cdm_reference\") )"},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/summariseLargeScaleCharacteristics.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"This function is used to summarise the large scale characteristics of a\ncohort table — summariseLargeScaleCharacteristics","text":"cohort cohort characterise. strata Stratification list. window Temporal windows want characterize. eventInWindow Tables characterise events window. episodeInWindow Tables characterise episodes window. includeSource Whether include source concepts. minCellCount counts lower minCellCount obscured. minimumFrequency Minimum frequency covariates report. cdm cdm reference.","code":""},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/summariseLargeScaleCharacteristics.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"This function is used to summarise the large scale characteristics of a\ncohort table — summariseLargeScaleCharacteristics","text":"output function `ResultSummary` containing relevant information.","code":""},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/summariseResult.html","id":null,"dir":"Reference","previous_headings":"","what":"Summarise the characteristics of different individuals — summariseResult","title":"Summarise the characteristics of different individuals — summariseResult","text":"Summarise characteristics different individuals","code":""},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/summariseResult.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summarise the characteristics of different individuals — summariseResult","text":"","code":"summariseResult(   table,   group = list(),   includeOverallGroup = FALSE,   strata = list(),   includeOverallStrata = TRUE,   variables = list(numericVariables = detectVariables(table, \"numeric\"), dateVariables =     detectVariables(table, \"date\"), binaryVariables = detectVariables(table, \"binary\"),     categoricalVariables = detectVariables(table, \"categorical\")),   functions = list(numericVariables = c(\"median\", \"min\", \"q25\", \"q75\", \"max\"),     dateVariables = c(\"median\", \"min\", \"q25\", \"q75\", \"max\"), binaryVariables = c(\"count\",     \"percentage\"), categoricalVariables = c(\"count\", \"percentage\")),   minCellCount = 5 )"},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/summariseResult.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summarise the characteristics of different individuals — summariseResult","text":"table Table different records group List groups considered. includeOverallGroup TRUE FALSE. TRUE, results overall group reported list groups specified. strata List stratifications within group considered. includeOverallStrata TRUE FALSE. TRUE, results overall strata reported list strata specified. variables List different groups variables, default automatically classified. functions List functions applied one group variables. minCellCount Minimum count records report results.","code":""},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/summariseResult.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Summarise the characteristics of different individuals — summariseResult","text":"Table summarises characteristics individual.","code":""},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/summariseResult.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Summarise the characteristics of different individuals — summariseResult","text":"","code":"# \\donttest{ library(PatientProfiles) library(dplyr)  cdm <- mockPatientProfiles() x <- cdm$cohort1 %>%   addDemographics(cdm) %>%   collect() result <- summariseResult(x) # }"},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/suppressCounts.html","id":null,"dir":"Reference","previous_headings":"","what":"Function to suppress counts in summarised objects — suppressCounts","title":"Function to suppress counts in summarised objects — suppressCounts","text":"Function suppress counts summarised objects","code":""},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/suppressCounts.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function to suppress counts in summarised objects — suppressCounts","text":"","code":"suppressCounts(result, minCellCount = 5)"},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/suppressCounts.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Function to suppress counts in summarised objects — suppressCounts","text":"result SummarisedResult object minCellCount Minimum count records report results.","code":""},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/suppressCounts.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Function to suppress counts in summarised objects — suppressCounts","text":"Table suppressed counts","code":""},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/variableTypes.html","id":null,"dir":"Reference","previous_headings":"","what":"Classify the variables between 5 types: ","title":"Classify the variables between 5 types: ","text":"Classify variables 5 types: \"numeric\", \"categorical\", \"binary\", \"date\", NA.","code":""},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/variableTypes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Classify the variables between 5 types: ","text":"","code":"variableTypes(table)"},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/variableTypes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Classify the variables between 5 types: ","text":"table Tibble","code":""},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/variableTypes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Classify the variables between 5 types: ","text":"Tibble variables type classification","code":""},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/variableTypes.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Classify the variables between 5 types: ","text":"","code":"# \\donttest{ library(PatientProfiles) x <- dplyr::tibble(   person_id = c(1, 2),   start_date = as.Date(c(\"2020-05-02\", \"2021-11-19\")),   asthma = c(0, 1) ) variableTypes(x) #> # A tibble: 3 × 3 #>   variable   type_sum variable_type #>   <chr>      <chr>    <chr>         #> 1 person_id  dbl      numeric       #> 2 start_date date     date          #> 3 asthma     dbl      binary        # }"}]
