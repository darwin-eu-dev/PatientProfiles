[{"path":[]},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/CONTRIBUTING.html","id":"filing-issues","dir":"","previous_headings":"","what":"Filing issues","title":"Contributing to PatientProfiles","text":"found bug, question, want suggest new feature please open issue. reporting bug, reprex much appreciated. contributing either documentation code, please make sure open issue beforehand identify needs done .","code":""},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/CONTRIBUTING.html","id":"documenting-the-package","dir":"","previous_headings":"Filing issues","what":"Documenting the package","title":"Contributing to PatientProfiles","text":"Run update check package documentation: Note devtools::check_man() return warnings. commit limited package documentation, running sufficient (although running devtools::check() always generally good idea submitting pull request.","code":"devtools::document()  devtools::run_examples() devtools::build_readme() devtools::build_vignettes() devtools::check_man()"},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/CONTRIBUTING.html","id":"run-tests","dir":"","previous_headings":"Filing issues","what":"Run tests","title":"Contributing to PatientProfiles","text":"starting contribute code, first make sure package tests passing. raise issue going (although please first make sure packages imports suggests installed). contribute code, make sure current tests add continue pass. package tests can run together : Code add new functionality accompanied tests. Code coverage can checked using:","code":"devtools::test() # note, you may first have to detach the package # detach(\"package:PatientProfiles\", unload=TRUE) devtools::test_coverage()"},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/CONTRIBUTING.html","id":"adhere-to-code-style","dir":"","previous_headings":"Filing issues","what":"Adhere to code style","title":"Contributing to PatientProfiles","text":"Please adhere code style adding new code. though restyle code unrelated pull request make code review difficult.","code":"lintr::lint_package(\".\",                     linters = lintr::linters_with_defaults(                       lintr::object_name_linter(styles = \"camelCase\")                     ) )"},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/CONTRIBUTING.html","id":"run-check-before-opening-a-pull-request","dir":"","previous_headings":"Filing issues","what":"Run check() before opening a pull request","title":"Contributing to PatientProfiles","text":"opening pull request please make sure run: warnings seen.","code":"devtools::check()"},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"Apache License","title":"Apache License","text":"Version 2.0, January 2004 <http://www.apache.org/licenses/>","code":""},{"path":[]},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/LICENSE.html","id":"id_1-definitions","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"1. Definitions","title":"Apache License","text":"“License” shall mean terms conditions use, reproduction, distribution defined Sections 1 9 document. “Licensor” shall mean copyright owner entity authorized copyright owner granting License. “Legal Entity” shall mean union acting entity entities control, controlled , common control entity. purposes definition, “control” means () power, direct indirect, cause direction management entity, whether contract otherwise, (ii) ownership fifty percent (50%) outstanding shares, (iii) beneficial ownership entity. “” (“”) shall mean individual Legal Entity exercising permissions granted License. “Source” form shall mean preferred form making modifications, including limited software source code, documentation source, configuration files. “Object” form shall mean form resulting mechanical transformation translation Source form, including limited compiled object code, generated documentation, conversions media types. “Work” shall mean work authorship, whether Source Object form, made available License, indicated copyright notice included attached work (example provided Appendix ). “Derivative Works” shall mean work, whether Source Object form, based (derived ) Work editorial revisions, annotations, elaborations, modifications represent, whole, original work authorship. purposes License, Derivative Works shall include works remain separable , merely link (bind name) interfaces , Work Derivative Works thereof. “Contribution” shall mean work authorship, including original version Work modifications additions Work Derivative Works thereof, intentionally submitted Licensor inclusion Work copyright owner individual Legal Entity authorized submit behalf copyright owner. purposes definition, “submitted” means form electronic, verbal, written communication sent Licensor representatives, including limited communication electronic mailing lists, source code control systems, issue tracking systems managed , behalf , Licensor purpose discussing improving Work, excluding communication conspicuously marked otherwise designated writing copyright owner “Contribution.” “Contributor” shall mean Licensor individual Legal Entity behalf Contribution received Licensor subsequently incorporated within Work.","code":""},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/LICENSE.html","id":"id_2-grant-of-copyright-license","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"2. Grant of Copyright License","title":"Apache License","text":"Subject terms conditions License, Contributor hereby grants perpetual, worldwide, non-exclusive, -charge, royalty-free, irrevocable copyright license reproduce, prepare Derivative Works , publicly display, publicly perform, sublicense, distribute Work Derivative Works Source Object form.","code":""},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/LICENSE.html","id":"id_3-grant-of-patent-license","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"3. Grant of Patent License","title":"Apache License","text":"Subject terms conditions License, Contributor hereby grants perpetual, worldwide, non-exclusive, -charge, royalty-free, irrevocable (except stated section) patent license make, made, use, offer sell, sell, import, otherwise transfer Work, license applies patent claims licensable Contributor necessarily infringed Contribution(s) alone combination Contribution(s) Work Contribution(s) submitted. institute patent litigation entity (including cross-claim counterclaim lawsuit) alleging Work Contribution incorporated within Work constitutes direct contributory patent infringement, patent licenses granted License Work shall terminate date litigation filed.","code":""},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/LICENSE.html","id":"id_4-redistribution","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"4. Redistribution","title":"Apache License","text":"may reproduce distribute copies Work Derivative Works thereof medium, without modifications, Source Object form, provided meet following conditions: () must give recipients Work Derivative Works copy License; (b) must cause modified files carry prominent notices stating changed files; (c) must retain, Source form Derivative Works distribute, copyright, patent, trademark, attribution notices Source form Work, excluding notices pertain part Derivative Works; (d) Work includes “NOTICE” text file part distribution, Derivative Works distribute must include readable copy attribution notices contained within NOTICE file, excluding notices pertain part Derivative Works, least one following places: within NOTICE text file distributed part Derivative Works; within Source form documentation, provided along Derivative Works; , within display generated Derivative Works, wherever third-party notices normally appear. contents NOTICE file informational purposes modify License. may add attribution notices within Derivative Works distribute, alongside addendum NOTICE text Work, provided additional attribution notices construed modifying License. may add copyright statement modifications may provide additional different license terms conditions use, reproduction, distribution modifications, Derivative Works whole, provided use, reproduction, distribution Work otherwise complies conditions stated License.","code":""},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/LICENSE.html","id":"id_5-submission-of-contributions","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"5. Submission of Contributions","title":"Apache License","text":"Unless explicitly state otherwise, Contribution intentionally submitted inclusion Work Licensor shall terms conditions License, without additional terms conditions. Notwithstanding , nothing herein shall supersede modify terms separate license agreement may executed Licensor regarding Contributions.","code":""},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/LICENSE.html","id":"id_6-trademarks","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"6. Trademarks","title":"Apache License","text":"License grant permission use trade names, trademarks, service marks, product names Licensor, except required reasonable customary use describing origin Work reproducing content NOTICE file.","code":""},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/LICENSE.html","id":"id_7-disclaimer-of-warranty","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"7. Disclaimer of Warranty","title":"Apache License","text":"Unless required applicable law agreed writing, Licensor provides Work (Contributor provides Contributions) “” BASIS, WITHOUT WARRANTIES CONDITIONS KIND, either express implied, including, without limitation, warranties conditions TITLE, NON-INFRINGEMENT, MERCHANTABILITY, FITNESS PARTICULAR PURPOSE. solely responsible determining appropriateness using redistributing Work assume risks associated exercise permissions License.","code":""},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/LICENSE.html","id":"id_8-limitation-of-liability","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"8. Limitation of Liability","title":"Apache License","text":"event legal theory, whether tort (including negligence), contract, otherwise, unless required applicable law (deliberate grossly negligent acts) agreed writing, shall Contributor liable damages, including direct, indirect, special, incidental, consequential damages character arising result License use inability use Work (including limited damages loss goodwill, work stoppage, computer failure malfunction, commercial damages losses), even Contributor advised possibility damages.","code":""},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/LICENSE.html","id":"id_9-accepting-warranty-or-additional-liability","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"9. Accepting Warranty or Additional Liability","title":"Apache License","text":"redistributing Work Derivative Works thereof, may choose offer, charge fee , acceptance support, warranty, indemnity, liability obligations /rights consistent License. However, accepting obligations, may act behalf sole responsibility, behalf Contributor, agree indemnify, defend, hold Contributor harmless liability incurred , claims asserted , Contributor reason accepting warranty additional liability. END TERMS CONDITIONS","code":""},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/LICENSE.html","id":"appendix-how-to-apply-the-apache-license-to-your-work","dir":"","previous_headings":"","what":"APPENDIX: How to apply the Apache License to your work","title":"Apache License","text":"apply Apache License work, attach following boilerplate notice, fields enclosed brackets [] replaced identifying information. (Don’t include brackets!) text enclosed appropriate comment syntax file format. also recommend file class name description purpose included “printed page” copyright notice easier identification within third-party archives.","code":"Copyright [yyyy] [name of copyright owner]  Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at    http://www.apache.org/licenses/LICENSE-2.0  Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License."},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/articles/a01_addingPatientDemographics.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Adding patient demographics","text":"OMOP CDM person-centric model. person table contains records uniquely identify individual along demographic information. create mock CDM reference , standard, person table contains fields indicate individuals date birth, gender, race, ethnicity. latter represented concept ID, person table contains one record per person fields treated time-invariant. well person table, every CDM reference include observation period table. table contains spans times individual considered observation. Individuals can multiple observation periods, overlap. performing analyses often interested working person observation period tables identify individuals’ characteristics date interest. PatientProfiles provides number functions can help us .","code":"library(PatientProfiles) library(duckdb) library(dplyr)  cdm <- mockPatientProfiles(   patient_size = 10000,   drug_exposure_size = 10000 )  cdm$person %>%    dplyr::glimpse() ## Rows: ?? ## Columns: 7 ## Database: DuckDB v0.10.0 [unknown@Linux 6.5.0-1016-azure:R 4.3.3/:memory:] ## $ person_id            <int> 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15… ## $ gender_concept_id    <chr> \"8507\", \"8507\", \"8507\", \"8532\", \"8507\", \"8532\", \"… ## $ year_of_birth        <dbl> 1972, 1999, 1922, 1975, 1995, 1926, 1943, 1958, 1… ## $ month_of_birth       <dbl> 9, 4, 6, 2, 12, 7, 8, 7, 6, 9, 3, 5, 4, 5, 1, 8, … ## $ day_of_birth         <dbl> 5, 6, 14, 19, 15, 12, 29, 7, 29, 5, 19, 29, 20, 2… ## $ race_concept_id      <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0… ## $ ethnicity_concept_id <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0… cdm$observation_period %>%    dplyr::glimpse() ## Rows: ?? ## Columns: 5 ## Database: DuckDB v0.10.0 [unknown@Linux 6.5.0-1016-azure:R 4.3.3/:memory:] ## $ observation_period_id         <int> 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 1… ## $ person_id                     <int> 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 1… ## $ observation_period_start_date <date> 2006-11-16, 2006-03-22, 2007-10-10, 200… ## $ observation_period_end_date   <date> 2098-01-22, 2137-04-20, 2113-01-27, 204… ## $ period_type_concept_id        <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0…"},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/articles/a01_addingPatientDemographics.html","id":"adding-characteristics-to-omop-cdm-tables","dir":"Articles","previous_headings":"","what":"Adding characteristics to OMOP CDM tables","title":"Adding patient demographics","text":"Let’s say ’re working condition occurrence table. table contains diagnoses individuals might, example, want identify age date diagnosis. involves linking back person table contains date birth (split across three different columns). PatientProfiles provides simple function . addAge() add new column table containing patient’s age relative specified index date. well calculating age, can also create age groups time. create three age groups: aged 0 17, 18 65, 66 older. default adding age new column called “age” calculated using available information date birth contained person. can, however, alter defaults like (impose month birth January day birth 1st individuals) well age diagnosis, might also want identify patients’ sex. PatientProfiles provides addSex() function add us. treated time-invariant, specify index variable. Similarly also identify whether individual observation time diagnosis (.e. observation period overlaps diagnosis date), well identifying much prior observation time date much following . latter functions work information observation table, important note results based observation period index date falls within. Moreover, patient observation specified date, addPriorObservation() addFutureObservation() functions return NA.","code":"cdm$condition_occurrence %>%   glimpse() ## Rows: ?? ## Columns: 6 ## Database: DuckDB v0.10.0 [unknown@Linux 6.5.0-1016-azure:R 4.3.3/:memory:] ## $ condition_occurrence_id   <int> 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 1… ## $ person_id                 <int> 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 1… ## $ condition_concept_id      <int> 5, 4, 5, 3, 5, 5, 1, 2, 1, 5, 2, 5, 4, 3, 3,… ## $ condition_start_date      <date> 2010-03-04, 2009-04-11, 2006-12-02, 2012-06… ## $ condition_end_date        <date> 2010-12-09, 2011-11-29, 2007-07-24, 2014-03… ## $ condition_type_concept_id <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,… cdm$condition_occurrence <- cdm$condition_occurrence %>%   addAge(indexDate = \"condition_start_date\")  cdm$condition_occurrence %>%   glimpse() ## Rows: ?? ## Columns: 7 ## Database: DuckDB v0.10.0 [unknown@Linux 6.5.0-1016-azure:R 4.3.3/:memory:] ## $ condition_occurrence_id   <int> 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 1… ## $ person_id                 <int> 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 1… ## $ condition_concept_id      <int> 5, 4, 5, 3, 5, 5, 1, 2, 1, 5, 2, 5, 4, 3, 4,… ## $ condition_start_date      <date> 2010-03-04, 2009-04-11, 2006-12-02, 2012-06… ## $ condition_end_date        <date> 2010-12-09, 2011-11-29, 2007-07-24, 2014-03… ## $ condition_type_concept_id <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,… ## $ age                       <dbl> 37, 10, 84, 37, 19, 88, 65, 56, 71, 30, 64, … cdm$condition_occurrence <- cdm$condition_occurrence %>%   addAge(     indexDate = \"condition_start_date\",     ageGroup = list(         \"0 to 17\" = c(0, 17),         \"18 to 65\" = c(18, 65),         \">= 66\" = c(66, Inf)))  cdm$condition_occurrence %>%   glimpse() ## Rows: ?? ## Columns: 8 ## Database: DuckDB v0.10.0 [unknown@Linux 6.5.0-1016-azure:R 4.3.3/:memory:] ## $ condition_occurrence_id   <int> 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 1… ## $ person_id                 <int> 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 1… ## $ condition_concept_id      <int> 5, 4, 5, 3, 5, 5, 1, 2, 1, 5, 2, 5, 4, 3, 4,… ## $ condition_start_date      <date> 2010-03-04, 2009-04-11, 2006-12-02, 2012-06… ## $ condition_end_date        <date> 2010-12-09, 2011-11-29, 2007-07-24, 2014-03… ## $ condition_type_concept_id <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,… ## $ age                       <dbl> 37, 10, 84, 37, 19, 88, 65, 56, 71, 30, 64, … ## $ age_group                 <chr> \"18 to 65\", \"0 to 17\", \">= 66\", \"18 to 65\", … cdm$condition_occurrence <- cdm$condition_occurrence %>%   addAge(indexDate = \"condition_start_date\",           ageName = \"age_from_year_of_birth\",           ageDefaultMonth = 1,          ageDefaultDay = 1,          ageImposeMonth = TRUE,           ageImposeDay = TRUE)  cdm$condition_occurrence %>%   glimpse() ## Rows: ?? ## Columns: 9 ## Database: DuckDB v0.10.0 [unknown@Linux 6.5.0-1016-azure:R 4.3.3/:memory:] ## $ condition_occurrence_id   <int> 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 1… ## $ person_id                 <int> 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 1… ## $ condition_concept_id      <int> 5, 4, 5, 3, 5, 5, 1, 2, 1, 5, 2, 5, 4, 3, 4,… ## $ condition_start_date      <date> 2010-03-04, 2009-04-11, 2006-12-02, 2012-06… ## $ condition_end_date        <date> 2010-12-09, 2011-11-29, 2007-07-24, 2014-03… ## $ condition_type_concept_id <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,… ## $ age                       <dbl> 37, 10, 84, 37, 19, 88, 65, 56, 71, 30, 64, … ## $ age_group                 <chr> \"18 to 65\", \"0 to 17\", \">= 66\", \"18 to 65\", … ## $ age_from_year_of_birth    <dbl> 38, 10, 84, 37, 20, 89, 65, 56, 71, 31, 64, … cdm$condition_occurrence <- cdm$condition_occurrence %>%   addSex()  cdm$condition_occurrence %>%   glimpse() ## Rows: ?? ## Columns: 10 ## Database: DuckDB v0.10.0 [unknown@Linux 6.5.0-1016-azure:R 4.3.3/:memory:] ## $ condition_occurrence_id   <int> 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 1… ## $ person_id                 <int> 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 1… ## $ condition_concept_id      <int> 5, 4, 5, 3, 5, 5, 1, 2, 1, 5, 2, 5, 4, 3, 4,… ## $ condition_start_date      <date> 2010-03-04, 2009-04-11, 2006-12-02, 2012-06… ## $ condition_end_date        <date> 2010-12-09, 2011-11-29, 2007-07-24, 2014-03… ## $ condition_type_concept_id <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,… ## $ age                       <dbl> 37, 10, 84, 37, 19, 88, 65, 56, 71, 30, 64, … ## $ age_group                 <chr> \"18 to 65\", \"0 to 17\", \">= 66\", \"18 to 65\", … ## $ age_from_year_of_birth    <dbl> 38, 10, 84, 37, 20, 89, 65, 56, 71, 31, 64, … ## $ sex                       <chr> \"Male\", \"Male\", \"Male\", \"Female\", \"Male\", \"F… cdm$condition_occurrence <- cdm$condition_occurrence %>%   addInObservation(indexDate = \"condition_start_date\") %>%    addPriorObservation(indexDate = \"condition_start_date\") %>%    addFutureObservation(indexDate = \"condition_start_date\")  cdm$condition_occurrence %>%   glimpse() ## Rows: ?? ## Columns: 13 ## Database: DuckDB v0.10.0 [unknown@Linux 6.5.0-1016-azure:R 4.3.3/:memory:] ## $ condition_occurrence_id   <int> 1, 2, 5, 6, 8, 12, 13, 14, 17, 18, 23, 25, 2… ## $ person_id                 <int> 1, 2, 5, 6, 8, 12, 13, 14, 17, 18, 23, 25, 2… ## $ condition_concept_id      <int> 5, 4, 5, 5, 2, 5, 4, 3, 3, 3, 5, 5, 1, 5, 4,… ## $ condition_start_date      <date> 2010-03-04, 2009-04-11, 2015-01-10, 2015-02… ## $ condition_end_date        <date> 2010-12-09, 2011-11-29, 2015-02-10, 2015-04… ## $ condition_type_concept_id <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,… ## $ age                       <dbl> 37, 10, 19, 88, 56, 70, 56, 49, 10, 21, 12, … ## $ age_group                 <chr> \"18 to 65\", \"0 to 17\", \"18 to 65\", \">= 66\", … ## $ age_from_year_of_birth    <dbl> 38, 10, 20, 89, 56, 71, 56, 49, 10, 21, 13, … ## $ sex                       <chr> \"Male\", \"Male\", \"Male\", \"Female\", \"Male\", \"F… ## $ in_observation            <dbl> 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,… ## $ prior_observation         <dbl> 1204, 1116, 2404, 3082, 2644, 2623, 5158, 16… ## $ future_observation        <dbl> 32101, 46760, 11870, 19230, 30583, 13946, 90…"},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/articles/a01_addingPatientDemographics.html","id":"adding-characteristics-to-a-cohort-tables","dir":"Articles","previous_headings":"","what":"Adding characteristics to a cohort tables","title":"Adding patient demographics","text":"functions can used standard OMOP CDM tables cohort tables. Note default index date functions “cohort_start_date” can now omit function.","code":"cdm$cohort1 %>%   glimpse() ## Rows: ?? ## Columns: 4 ## Database: DuckDB v0.10.0 [unknown@Linux 6.5.0-1016-azure:R 4.3.3/:memory:] ## $ cohort_definition_id <dbl> 1, 1, 1, 2 ## $ subject_id           <dbl> 1, 1, 2, 3 ## $ cohort_start_date    <date> 2020-01-01, 2020-06-01, 2020-01-02, 2020-01-01 ## $ cohort_end_date      <date> 2020-04-01, 2020-08-01, 2020-02-02, 2020-03-01 cdm$cohort1 <- cdm$cohort1 %>%   addAge(ageGroup = list(         \"0 to 17\" = c(0, 17),         \"18 to 65\" = c(18, 65),         \">= 66\" = c(66, Inf))) %>%    addSex() %>%    addInObservation() %>%   addPriorObservation() %>%   addFutureObservation()  cdm$cohort1 %>%   glimpse() ## Rows: ?? ## Columns: 10 ## Database: DuckDB v0.10.0 [unknown@Linux 6.5.0-1016-azure:R 4.3.3/:memory:] ## $ cohort_definition_id <dbl> 1, 1, 2, 1 ## $ subject_id           <dbl> 1, 2, 3, 1 ## $ cohort_start_date    <date> 2020-06-01, 2020-01-02, 2020-01-01, 2020-01-01 ## $ cohort_end_date      <date> 2020-08-01, 2020-02-02, 2020-03-01, 2020-04-01 ## $ age                  <dbl> 47, 20, 97, 47 ## $ age_group            <chr> \"18 to 65\", \"18 to 65\", \">= 66\", \"18 to 65\" ## $ sex                  <chr> \"Male\", \"Male\", \"Male\", \"Male\" ## $ in_observation       <dbl> 1, 1, 1, 1 ## $ prior_observation    <dbl> 4946, 5034, 4466, 4794 ## $ future_observation   <dbl> 28359, 42842, 33994, 28511"},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/articles/a01_addingPatientDemographics.html","id":"getting-multiple-characteristics-at-once","dir":"Articles","previous_headings":"","what":"Getting multiple characteristics at once","title":"Adding patient demographics","text":"functions fetch related information one one. cases interested adding multiple characteristics, can add time using addDemographics(). efficient requires fewer joins table interest person observation period table. small mock dataset see small improvement performance, difference become much noticeable working real data typically far larger.","code":"cdm$cohort2 %>%   glimpse() ## Rows: ?? ## Columns: 4 ## Database: DuckDB v0.10.0 [unknown@Linux 6.5.0-1016-azure:R 4.3.3/:memory:] ## $ cohort_definition_id <dbl> 1, 1, 2, 3, 1 ## $ subject_id           <dbl> 1, 3, 1, 2, 1 ## $ cohort_start_date    <date> 2019-12-30, 2020-01-01, 2020-05-25, 2020-01-01, 2… ## $ cohort_end_date      <date> 2019-12-30, 2020-01-01, 2020-05-25, 2020-01-01, 2… tictoc::tic() cdm$cohort2 %>%   addAge(ageGroup = list(         \"0 to 17\" = c(0, 17),         \"18 to 65\" = c(18, 65),         \">= 66\" = c(66, Inf))) %>%    addSex() %>%    addInObservation() %>%   addPriorObservation() %>%   addFutureObservation() ## # Source:   table<og_023_1711650019> [5 x 10] ## # Database: DuckDB v0.10.0 [unknown@Linux 6.5.0-1016-azure:R 4.3.3/:memory:] ##   cohort_definition_id subject_id cohort_start_date cohort_end_date   age ##                  <dbl>      <dbl> <date>            <date>          <dbl> ## 1                    1          1 2020-05-25        2020-05-25         47 ## 2                    3          2 2020-01-01        2020-01-01         20 ## 3                    1          3 2020-01-01        2020-01-01         97 ## 4                    2          1 2020-05-25        2020-05-25         47 ## 5                    1          1 2019-12-30        2019-12-30         47 ## # ℹ 5 more variables: age_group <chr>, sex <chr>, in_observation <dbl>, ## #   prior_observation <dbl>, future_observation <dbl> tictoc::toc() ## 1.61 sec elapsed tictoc::tic() cdm$cohort2 %>%   addDemographics(     age = TRUE,     ageName = \"age\",     ageGroup = list(         \"0 to 17\" = c(0, 17),         \"18 to 65\" = c(18, 65),         \">= 66\" = c(66, Inf)),     sex = TRUE,     sexName = \"sex\",     priorObservation = TRUE,     priorObservationName = \"prior_observation\",     futureObservation = FALSE,   ) %>%   glimpse() ## Rows: ?? ## Columns: 8 ## Database: DuckDB v0.10.0 [unknown@Linux 6.5.0-1016-azure:R 4.3.3/:memory:] ## $ cohort_definition_id <dbl> 1, 3, 1, 2, 1 ## $ subject_id           <dbl> 1, 2, 3, 1, 1 ## $ cohort_start_date    <date> 2020-05-25, 2020-01-01, 2020-01-01, 2020-05-25, 2… ## $ cohort_end_date      <date> 2020-05-25, 2020-01-01, 2020-01-01, 2020-05-25, 2… ## $ age                  <dbl> 47, 20, 97, 47, 47 ## $ sex                  <chr> \"Male\", \"Male\", \"Male\", \"Male\", \"Male\" ## $ prior_observation    <dbl> 4939, 5033, 4466, 4939, 4792 ## $ age_group            <chr> \"18 to 65\", \"18 to 65\", \">= 66\", \"18 to 65\", \"18… tictoc::toc() ## 0.723 sec elapsed"},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/articles/a02_addingCohortIntersections.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Adding cohort intersections","text":"Cohorts often key component studies use OMOP CDM. Cohorts may created represent various clinical events interest often use cohorts combination, whether identify outcomes among people exposure interest, report baseline comorbidites among certain study population, many possible reasons. Cohorts particular format OMOP CDM, can see two cohort tables created mockPatientProfiles() function provided PatientProfiles, mimics database OMOP CDM format. can see first cohort table contains 2 cohorts second contains 3 cohorts.","code":"library(CDMConnector) library(PatientProfiles) library(duckdb) library(dplyr) library(ggplot2)  cdm <- mockPatientProfiles(   patient_size = 1000,   drug_exposure_size = 1000 )  # In this mock dataset there are the following cohort tables: cdm$cohort1 %>%   glimpse() ## Rows: ?? ## Columns: 4 ## Database: DuckDB v0.10.0 [unknown@Linux 6.5.0-1016-azure:R 4.3.3/:memory:] ## $ cohort_definition_id <dbl> 1, 1, 1, 2 ## $ subject_id           <dbl> 1, 1, 2, 3 ## $ cohort_start_date    <date> 2020-01-01, 2020-06-01, 2020-01-02, 2020-01-01 ## $ cohort_end_date      <date> 2020-04-01, 2020-08-01, 2020-02-02, 2020-03-01 settings(cdm$cohort1) ## # A tibble: 2 × 2 ##   cohort_definition_id cohort_name ##                  <int> <chr>       ## 1                    1 cohort_1    ## 2                    2 cohort_2 cdm$cohort2 %>%   glimpse() ## Rows: ?? ## Columns: 4 ## Database: DuckDB v0.10.0 [unknown@Linux 6.5.0-1016-azure:R 4.3.3/:memory:] ## $ cohort_definition_id <dbl> 1, 1, 2, 3, 1 ## $ subject_id           <dbl> 1, 3, 1, 2, 1 ## $ cohort_start_date    <date> 2019-12-30, 2020-01-01, 2020-05-25, 2020-01-01, 2… ## $ cohort_end_date      <date> 2019-12-30, 2020-01-01, 2020-05-25, 2020-01-01, 2… settings(cdm$cohort2) ## # A tibble: 3 × 2 ##   cohort_definition_id cohort_name ##                  <int> <chr>       ## 1                    1 cohort_1    ## 2                    2 cohort_2    ## 3                    3 cohort_3"},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/articles/a02_addingCohortIntersections.html","id":"identifying-cohort-intersections","dir":"Articles","previous_headings":"","what":"Identifying cohort intersections","title":"Adding cohort intersections","text":"PatientProfiles provides four functions identifying cohort intersections (presence individual two cohorts). first addCohortIntersectFlag() adds flag whether someone appeared cohort time window. second, addCohortIntersectCount(), counts number times someone appeared cohort window. third, addCohortIntersectDate(), adds date intersection occurred. fourth, addCohortIntersectDays(), add number days intersection. can see . Note add variables cohort table interest, identify intersections given window. can see , target cohort table contains multiple cohorts, default functions add one new variable per cohort. Let’s start adding flag count variables using window 180 days 180 days cohort start date table interest. default cohort start date cohort interest used index date, cohort start cohort end date target cohort used check intersection. Next can add date intersection days intersection. Note identifying variables look one date target table, default cohort start date. addition default first intersection occurs within window used.","code":"cdm$cohort1 %>%   addCohortIntersectFlag(indexDate = \"cohort_start_date\",     targetCohortTable = \"cohort2\",     targetStartDate = \"cohort_start_date\",     targetEndDate = \"cohort_end_date\",     window = list(c(-180, 180))    ) |>    glimpse() ## Rows: ?? ## Columns: 7 ## Database: DuckDB v0.10.0 [unknown@Linux 6.5.0-1016-azure:R 4.3.3/:memory:] ## $ cohort_definition_id <dbl> 1, 1, 2, 1 ## $ subject_id           <dbl> 1, 2, 3, 1 ## $ cohort_start_date    <date> 2020-06-01, 2020-01-02, 2020-01-01, 2020-01-01 ## $ cohort_end_date      <date> 2020-08-01, 2020-02-02, 2020-03-01, 2020-04-01 ## $ cohort_1_m180_to_180 <dbl> 1, 0, 1, 1 ## $ cohort_3_m180_to_180 <dbl> 0, 1, 0, 0 ## $ cohort_2_m180_to_180 <dbl> 1, 0, 0, 1 cdm$cohort1 %>%   addCohortIntersectCount(indexDate = \"cohort_start_date\",     targetCohortTable = \"cohort2\",     targetStartDate = \"cohort_start_date\",     targetEndDate = \"cohort_end_date\",     window = list(c(-180, 180))    ) |>    glimpse() ## Rows: ?? ## Columns: 7 ## Database: DuckDB v0.10.0 [unknown@Linux 6.5.0-1016-azure:R 4.3.3/:memory:] ## $ cohort_definition_id <dbl> 1, 1, 2, 1 ## $ subject_id           <dbl> 1, 2, 3, 1 ## $ cohort_start_date    <date> 2020-06-01, 2020-01-02, 2020-01-01, 2020-01-01 ## $ cohort_end_date      <date> 2020-08-01, 2020-02-02, 2020-03-01, 2020-04-01 ## $ cohort_1_m180_to_180 <dbl> 2, 0, 1, 2 ## $ cohort_2_m180_to_180 <dbl> 1, 0, 0, 1 ## $ cohort_3_m180_to_180 <dbl> 0, 1, 0, 0 cdm$cohort1 %>%   addCohortIntersectDate(indexDate = \"cohort_start_date\",     targetCohortTable = \"cohort2\",     targetDate = \"cohort_start_date\",     window = list(c(-180, 180)),      order = \"first\"    ) |>    glimpse() ## Rows: ?? ## Columns: 7 ## Database: DuckDB v0.10.0 [unknown@Linux 6.5.0-1016-azure:R 4.3.3/:memory:] ## $ cohort_definition_id <dbl> 1, 1, 1, 2 ## $ subject_id           <dbl> 1, 1, 2, 3 ## $ cohort_start_date    <date> 2020-01-01, 2020-06-01, 2020-01-02, 2020-01-01 ## $ cohort_end_date      <date> 2020-04-01, 2020-08-01, 2020-02-02, 2020-03-01 ## $ cohort_1_m180_to_180 <date> 2019-12-30, 2019-12-30, NA, 2020-01-01 ## $ cohort_2_m180_to_180 <date> 2020-05-25, 2020-05-25, NA, NA ## $ cohort_3_m180_to_180 <date> NA, NA, 2020-01-01, NA cdm$cohort1 %>%   addCohortIntersectDays(indexDate = \"cohort_start_date\",     targetCohortTable = \"cohort2\",     targetDate = \"cohort_start_date\",     window = list(c(-180, 180)),      order = \"first\"     ) |>    glimpse() ## Rows: ?? ## Columns: 7 ## Database: DuckDB v0.10.0 [unknown@Linux 6.5.0-1016-azure:R 4.3.3/:memory:] ## $ cohort_definition_id <dbl> 1, 1, 1, 2 ## $ subject_id           <dbl> 1, 1, 2, 3 ## $ cohort_start_date    <date> 2020-01-01, 2020-06-01, 2020-01-02, 2020-01-01 ## $ cohort_end_date      <date> 2020-04-01, 2020-08-01, 2020-02-02, 2020-03-01 ## $ cohort_3_m180_to_180 <dbl> NA, NA, -1, NA ## $ cohort_1_m180_to_180 <dbl> -2, -154, NA, 0 ## $ cohort_2_m180_to_180 <dbl> 145, -7, NA, NA"},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/articles/a02_addingCohortIntersections.html","id":"options-for-identifying-cohort-intersection","dir":"Articles","previous_headings":"","what":"Options for identifying cohort intersection","title":"Adding cohort intersections","text":"consider impact different options can choose identifying cohort intersections let´s consider toy example single patient common cold (diagnosed 1st February 2020 ending 15th February 2020). Let’s say person two records aspirin, one ending shortly start date common cold starting record common cold.  Whether consider cohort intersection depend options choose. see let’s first create cdm reference containing example. consider intersection relative cohort start date common cold window 0 0 (ie index date) intersection identified individual ongoing record aspirin date. , however, change index date cohort end date case intersection found. also extend window include time cases lead cohort intersections found. window 90 days 90 days cohort start, person count two cohort intersections. window, add first cohort intersect date get start date first record aspirin. instead set order last, get start date second record aspirin.","code":"common_cold <- dplyr::tibble(     cohort_definition_id = 1,     subject_id = 1,     cohort_start_date = as.Date(\"2020-02-01\"),     cohort_end_date = as.Date(\"2020-02-15\")   )  aspirin <- dplyr::tibble(     cohort_definition_id = c(1, 1),     subject_id = c(1, 1),     cohort_start_date = as.Date(c(\"2020-01-01\", \"2020-02-10\")),     cohort_end_date = as.Date(c(\"2020-01-28\", \"2020-03-15\"))   )   bind_rows(common_cold |> mutate(cohort = \"common cold\"),           aspirin |> mutate(cohort = \"aspirin\")) |>    mutate(record = as.character(row_number())) |>   ggplot() + geom_segment(aes(x = cohort_start_date,                   y = cohort,                  xend = cohort_end_date,                   yend = cohort, col = cohort, fill = cohort),             size = 4.5, alpha = .5) +   geom_point(aes(x = cohort_start_date, y = cohort, color = cohort), size = 4) +   geom_point(aes(x = cohort_end_date, y = cohort, color = cohort), size = 4) +   ylab(\"\") +   xlab(\"\")+   theme_minimal() +   theme(legend.position = \"none\") cdm <- mockPatientProfiles(   list(     con = DBI::dbConnect(duckdb::duckdb(), \":memory:\"),     write_schema = \"main\"   ),   cohort1 = common_cold,   cohort2 = aspirin,   patient_size = 2 ) cdm$cohort1 %>%   addCohortIntersectFlag(     targetCohortTable = \"cohort2\",     indexDate = \"cohort_start_date\",      targetStartDate = \"cohort_start_date\",     targetEndDate = \"cohort_end_date\",     window = list(c(0, 0)),    ) |>    glimpse() ## Rows: ?? ## Columns: 5 ## Database: DuckDB v0.10.0 [unknown@Linux 6.5.0-1016-azure:R 4.3.3/:memory:] ## $ cohort_definition_id <dbl> 1 ## $ subject_id           <dbl> 1 ## $ cohort_start_date    <date> 2020-02-01 ## $ cohort_end_date      <date> 2020-02-15 ## $ cohort_1_0_to_0      <dbl> 0 cdm$cohort1 %>%   addCohortIntersectFlag(     targetCohortTable = \"cohort2\",     indexDate = \"cohort_end_date\",      targetStartDate = \"cohort_start_date\",     targetEndDate = \"cohort_end_date\",     window = list(c(0, 0)),    ) |>    glimpse() ## Rows: ?? ## Columns: 5 ## Database: DuckDB v0.10.0 [unknown@Linux 6.5.0-1016-azure:R 4.3.3/:memory:] ## $ cohort_definition_id <dbl> 1 ## $ subject_id           <dbl> 1 ## $ cohort_start_date    <date> 2020-02-01 ## $ cohort_end_date      <date> 2020-02-15 ## $ cohort_1_0_to_0      <dbl> 0 cdm$cohort1 %>%   addCohortIntersectFlag(     targetCohortTable = \"cohort2\",     indexDate = \"cohort_start_date\",      targetStartDate = \"cohort_start_date\",     targetEndDate = \"cohort_end_date\",     window = list(c(-90, 90)),    ) |>    glimpse() ## Rows: ?? ## Columns: 5 ## Database: DuckDB v0.10.0 [unknown@Linux 6.5.0-1016-azure:R 4.3.3/:memory:] ## $ cohort_definition_id <dbl> 1 ## $ subject_id           <dbl> 1 ## $ cohort_start_date    <date> 2020-02-01 ## $ cohort_end_date      <date> 2020-02-15 ## $ cohort_1_m90_to_90   <dbl> 1 cdm$cohort1 %>%   addCohortIntersectCount(     targetCohortTable = \"cohort2\",     indexDate = \"cohort_start_date\",      targetStartDate = \"cohort_start_date\",     targetEndDate = \"cohort_end_date\",     window = list(c(-90, 90)),    ) |>    glimpse() ## Rows: ?? ## Columns: 5 ## Database: DuckDB v0.10.0 [unknown@Linux 6.5.0-1016-azure:R 4.3.3/:memory:] ## $ cohort_definition_id <dbl> 1 ## $ subject_id           <dbl> 1 ## $ cohort_start_date    <date> 2020-02-01 ## $ cohort_end_date      <date> 2020-02-15 ## $ cohort_1_m90_to_90   <dbl> 2 cdm$cohort1 %>%   addCohortIntersectDate(     targetCohortTable = \"cohort2\",     indexDate = \"cohort_start_date\",      targetDate = \"cohort_start_date\",     window = list(c(-90, 90)),      order = \"first\"   ) |>    glimpse() ## Rows: ?? ## Columns: 5 ## Database: DuckDB v0.10.0 [unknown@Linux 6.5.0-1016-azure:R 4.3.3/:memory:] ## $ cohort_definition_id <dbl> 1 ## $ subject_id           <dbl> 1 ## $ cohort_start_date    <date> 2020-02-01 ## $ cohort_end_date      <date> 2020-02-15 ## $ cohort_1_m90_to_90   <date> 2020-01-01 cdm$cohort1 %>%   addCohortIntersectDate(     targetCohortTable = \"cohort2\",     indexDate = \"cohort_start_date\",      targetDate = \"cohort_start_date\",     window = list(c(-90, 90)),      order = \"last\"   ) |>    glimpse() ## Rows: ?? ## Columns: 5 ## Database: DuckDB v0.10.0 [unknown@Linux 6.5.0-1016-azure:R 4.3.3/:memory:] ## $ cohort_definition_id <dbl> 1 ## $ subject_id           <dbl> 1 ## $ cohort_start_date    <date> 2020-02-01 ## $ cohort_end_date      <date> 2020-02-15 ## $ cohort_1_m90_to_90   <date> 2020-02-10"},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/articles/a02_addingCohortIntersections.html","id":"naming-conventions-for-new-variables","dir":"Articles","previous_headings":"","what":"Naming conventions for new variables","title":"Adding cohort intersections","text":"One last option relates naming convention used new variables. can instead choose specific name (work one new variable added, otherwise get error avoid duplicate names). direction also include estimate type name. useful, example, ’re adding multiple different types intersection values.","code":"cdm$cohort1 %>%   addCohortIntersectDate(     targetCohortTable = \"cohort2\",     indexDate = \"cohort_start_date\",      targetDate = \"cohort_start_date\",     window = list(c(-90, 90)),      order = \"last\",     nameStyle = \"{cohort_name}_{window_name}\"   ) |>    glimpse() ## Rows: ?? ## Columns: 5 ## Database: DuckDB v0.10.0 [unknown@Linux 6.5.0-1016-azure:R 4.3.3/:memory:] ## $ cohort_definition_id <dbl> 1 ## $ subject_id           <dbl> 1 ## $ cohort_start_date    <date> 2020-02-01 ## $ cohort_end_date      <date> 2020-02-15 ## $ cohort_1_m90_to_90   <date> 2020-02-10 cdm$cohort1 %>%   addCohortIntersectDate(     targetCohortTable = \"cohort2\",     indexDate = \"cohort_start_date\",      targetDate = \"cohort_start_date\",     window = list(c(-90, 90)),      order = \"last\",     nameStyle = \"my_new_variable\"   ) |>    glimpse() ## Rows: ?? ## Columns: 5 ## Database: DuckDB v0.10.0 [unknown@Linux 6.5.0-1016-azure:R 4.3.3/:memory:] ## $ cohort_definition_id <dbl> 1 ## $ subject_id           <dbl> 1 ## $ cohort_start_date    <date> 2020-02-01 ## $ cohort_end_date      <date> 2020-02-15 ## $ my_new_variable      <date> 2020-02-10 cdm$cohort1 |>    addCohortIntersectDate(     targetCohortTable = \"cohort2\",     indexDate = \"cohort_start_date\",      targetDate = \"cohort_start_date\",     window = list(c(-90, 90)),      order = \"last\",     nameStyle = \"{cohort_name}_{window_name}_{value}\"   ) |>    addCohortIntersectDays(     targetCohortTable = \"cohort2\",     indexDate = \"cohort_start_date\",      targetDate = \"cohort_start_date\",     window = list(c(-90, 90)),      order = \"last\",     nameStyle = \"{cohort_name}_{window_name}_{value}\"   ) |>    glimpse() ## Rows: ?? ## Columns: 6 ## Database: DuckDB v0.10.0 [unknown@Linux 6.5.0-1016-azure:R 4.3.3/:memory:] ## $ cohort_definition_id    <dbl> 1 ## $ subject_id              <dbl> 1 ## $ cohort_start_date       <date> 2020-02-01 ## $ cohort_end_date         <date> 2020-02-15 ## $ cohort_1_m90_to_90_date <date> 2020-02-10 ## $ cohort_1_m90_to_90_days <dbl> 9"},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/articles/a03_addingConceptIntersections.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Adding concept intersections","text":"Concept sets play important role working data format OMOP CDM. can used create cohorts , ’ve seen previous vignette, can identifying intersections cohorts. However, PatientProfiles adds another option working concept sets use directly adding associated variables. important note, explained , results may differ generating cohort identifying intersections two cohorts compared working directly concept sets. creation cohorts involve collapsing overlapping records well imposing certain requirements including records observed individuals observation period. adding variables based concept sets working directly record-level data OMOP CDM clinical tables.","code":""},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/articles/a03_addingConceptIntersections.html","id":"adding-concept-based-variables","dir":"Articles","previous_headings":"","what":"Adding concept based variables","title":"Adding concept intersections","text":"vignette ’ll use Eunomia synthetic dataset. First lets create cohort interest, individuals ankle sprain. Now let’s say ’re interested summarising use acetaminophen among ankle sprain cohort. can start identifying relevant concepts. codes acetaminophen can create variables based . cohort intersections, PatientProfiles provides four types functions concept intersections. First, can add binary flag variable indicating whether individual record acetaminophen day ankle sprain 30 days afterwards. Second, can count number records acetaminophen window individual. Third, identify first start date acetaminophen window. fourth, can get number days start date acetaminophen window.","code":"library(CDMConnector) library(CodelistGenerator) library(PatientProfiles) library(dplyr) #>  #> Attaching package: 'dplyr' #> The following objects are masked from 'package:stats': #>  #>     filter, lag #> The following objects are masked from 'package:base': #>  #>     intersect, setdiff, setequal, union library(ggplot2)  con <- DBI::dbConnect(duckdb::duckdb(),                        dbdir = CDMConnector::eunomia_dir()) #> Creating CDM database /tmp/RtmpginvuP/GiBleed_5.3.zip cdm <- CDMConnector::cdm_from_con(con,                                    cdm_schem = \"main\",                                    write_schema = \"main\")  cdm <- generateConceptCohortSet(   cdm = cdm,   name = \"ankle_sprain\",   conceptSet = list(\"ankle_sprain\" = 81151),   end = \"event_end_date\",   limit = \"all\",   overwrite = TRUE )  cdm$ankle_sprain #> # Source:   table<ankle_sprain> [?? x 4] #> # Database: DuckDB v0.10.0 [unknown@Linux 6.5.0-1016-azure:R 4.3.3//tmp/RtmpginvuP/file1ffe64d1d5dd.duckdb] #>    cohort_definition_id subject_id cohort_start_date cohort_end_date #>                   <int>      <int> <date>            <date>          #>  1                    1        412 1958-03-20        1958-04-03      #>  2                    1        673 1978-09-28        1978-10-12      #>  3                    1        673 2012-05-26        2012-06-16      #>  4                    1       1508 1934-03-09        1934-03-30      #>  5                    1       1622 2000-10-28        2000-12-02      #>  6                    1       1623 1952-08-23        1952-09-20      #>  7                    1       1703 1995-09-02        1995-09-30      #>  8                    1       1819 1991-06-10        1991-07-08      #>  9                    1       2445 1928-08-28        1928-09-18      #> 10                    1       2597 1973-01-12        1973-01-26      #> # ℹ more rows acetaminophen_cs <- getDrugIngredientCodes(cdm = cdm,                          name = c(\"acetaminophen\"))  acetaminophen_cs #>  #> ── 1 codelist ────────────────────────────────────────────────────────────────── #>  #> - acetaminophen (7 codes) cdm$ankle_sprain %>%   addConceptIntersectFlag(conceptSet = acetaminophen_cs,                            indexDate = \"cohort_start_date\",                            window = c(0, 30)) %>%    dplyr::glimpse() #> Rows: ?? #> Columns: 5 #> Database: DuckDB v0.10.0 [unknown@Linux 6.5.0-1016-azure:R 4.3.3//tmp/RtmpginvuP/file1ffe64d1d5dd.duckdb] #> $ cohort_definition_id  <int> 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, … #> $ subject_id            <int> 673, 3560, 3566, 3655, 685, 1057, 1950, 4125, 44… #> $ cohort_start_date     <date> 1978-09-28, 1978-03-01, 1996-02-14, 1997-08-04,… #> $ cohort_end_date       <date> 1978-10-12, 1978-03-15, 1996-03-06, 1997-08-25,… #> $ acetaminophen_0_to_30 <dbl> 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, … cdm$ankle_sprain %>%   addConceptIntersectCount(conceptSet = acetaminophen_cs,                            indexDate = \"cohort_start_date\",                            window = c(0, 30)) %>%    dplyr::glimpse() #> Rows: ?? #> Columns: 5 #> Database: DuckDB v0.10.0 [unknown@Linux 6.5.0-1016-azure:R 4.3.3//tmp/RtmpginvuP/file1ffe64d1d5dd.duckdb] #> $ cohort_definition_id  <int> 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, … #> $ subject_id            <int> 673, 3560, 3566, 3655, 685, 1057, 1950, 4125, 44… #> $ cohort_start_date     <date> 1978-09-28, 1978-03-01, 1996-02-14, 1997-08-04,… #> $ cohort_end_date       <date> 1978-10-12, 1978-03-15, 1996-03-06, 1997-08-25,… #> $ acetaminophen_0_to_30 <dbl> 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, … cdm$ankle_sprain %>%   addConceptIntersectDate(conceptSet = acetaminophen_cs,                            indexDate = \"cohort_start_date\",                            window = c(0, 30),                            order = \"first\") %>%    dplyr::glimpse() #> Rows: ?? #> Columns: 5 #> Database: DuckDB v0.10.0 [unknown@Linux 6.5.0-1016-azure:R 4.3.3//tmp/RtmpginvuP/file1ffe64d1d5dd.duckdb] #> $ cohort_definition_id  <int> 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, … #> $ subject_id            <int> 412, 673, 1622, 1703, 3208, 3560, 3566, 3655, 48… #> $ cohort_start_date     <date> 1958-03-20, 1978-09-28, 2000-10-28, 1995-09-02,… #> $ cohort_end_date       <date> 1958-04-03, 1978-10-12, 2000-12-02, 1995-09-30,… #> $ acetaminophen_0_to_30 <date> 1958-03-20, 1978-09-28, 2000-10-28, 1995-09-02,… cdm$ankle_sprain %>%   addConceptIntersectDays(conceptSet = acetaminophen_cs,                            indexDate = \"cohort_start_date\",                            window = c(0, 30),                            order = \"first\") %>%    dplyr::glimpse() #> Rows: ?? #> Columns: 5 #> Database: DuckDB v0.10.0 [unknown@Linux 6.5.0-1016-azure:R 4.3.3//tmp/RtmpginvuP/file1ffe64d1d5dd.duckdb] #> $ cohort_definition_id  <int> 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, … #> $ subject_id            <int> 412, 673, 1622, 1703, 3208, 3560, 3566, 3655, 48… #> $ cohort_start_date     <date> 1958-03-20, 1978-09-28, 2000-10-28, 1995-09-02,… #> $ cohort_end_date       <date> 1958-04-03, 1978-10-12, 2000-12-02, 1995-09-30,… #> $ acetaminophen_0_to_30 <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, …"},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/articles/a03_addingConceptIntersections.html","id":"adding-multiple-concept-based-variables","dir":"Articles","previous_headings":"","what":"Adding multiple concept based variables","title":"Adding concept intersections","text":"can add one variable time using functions. example, might want add variables multiple time windows. might want get variables multiple drug ingredients interest.","code":"cdm$ankle_sprain %>%   addConceptIntersectFlag(conceptSet = acetaminophen_cs,                            indexDate = \"cohort_start_date\",                            window = list(c(-Inf, -1),                                         c(0, 0),                                         c(1, Inf))) %>%    dplyr::glimpse() #> Rows: ?? #> Columns: 7 #> Database: DuckDB v0.10.0 [unknown@Linux 6.5.0-1016-azure:R 4.3.3//tmp/RtmpginvuP/file1ffe64d1d5dd.duckdb] #> $ cohort_definition_id     <int> 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, … #> $ subject_id               <int> 673, 673, 1622, 1623, 1819, 2445, 2597, 3207,… #> $ cohort_start_date        <date> 1978-09-28, 2012-05-26, 2000-10-28, 1952-08-… #> $ cohort_end_date          <date> 1978-10-12, 2012-06-16, 2000-12-02, 1952-09-… #> $ acetaminophen_minf_to_m1 <dbl> 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, … #> $ acetaminophen_1_to_inf   <dbl> 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, … #> $ acetaminophen_0_to_0     <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, … meds_cs <- getDrugIngredientCodes(cdm = cdm,                                    name = c(\"acetaminophen\",                                            \"amoxicillin\",                                            \"aspirin\",                                            \"heparin\",                                            \"morphine\",                                            \"oxycodone\",                                            \"warfarin\"))  cdm$ankle_sprain %>%   addConceptIntersectFlag(conceptSet = meds_cs,                            indexDate = \"cohort_start_date\",                            window = list(c(-Inf, -1),                                         c(0, 0))) %>%    dplyr::glimpse() #> Rows: ?? #> Columns: 18 #> Database: DuckDB v0.10.0 [unknown@Linux 6.5.0-1016-azure:R 4.3.3//tmp/RtmpginvuP/file1ffe64d1d5dd.duckdb] #> $ cohort_definition_id     <int> 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, … #> $ subject_id               <int> 673, 673, 1622, 1819, 3207, 3250, 3494, 3560,… #> $ cohort_start_date        <date> 1978-09-28, 2012-05-26, 2000-10-28, 1991-06-… #> $ cohort_end_date          <date> 1978-10-12, 2012-06-16, 2000-12-02, 1991-07-… #> $ acetaminophen_minf_to_m1 <dbl> 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, … #> $ aspirin_minf_to_m1       <dbl> 1, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 1, 0, 0, … #> $ amoxicillin_minf_to_m1   <dbl> 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, … #> $ oxycodone_minf_to_m1     <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, … #> $ morphine_minf_to_m1      <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, … #> $ warfarin_minf_to_m1      <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, … #> $ heparin_minf_to_m1       <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, … #> $ morphine_0_to_0          <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, … #> $ aspirin_0_to_0           <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, … #> $ oxycodone_0_to_0         <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, … #> $ acetaminophen_0_to_0     <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, … #> $ warfarin_0_to_0          <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, … #> $ heparin_0_to_0           <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, … #> $ amoxicillin_0_to_0       <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, …"},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/articles/a03_addingConceptIntersections.html","id":"cohort-based-versus-concept-based-intersections","dir":"Articles","previous_headings":"","what":"Cohort-based versus concept-based intersections","title":"Adding concept intersections","text":"previous vignette saw can add intersection variable using cohort created. Meanwhile vignette see can instead create intersection variable using concept set directly. important note two approaches can lead different results. creating cohort combine overlapping records, cohort entries overlap. Thus adding intersection count, addCohortIntersectCount() return count cohort entries window interest addConceptIntersectCount() return count records withing window. can see impact acetaminophen example data , slightly records cohort entries.  Additional differences cohort concept set intersections may also result cohort table rules. example, cohort tables typically omit records occur outside individual´s observation time (defined observation period window). records, however, excluded adding concept based intersection.","code":"acetaminophen_cs <- getDrugIngredientCodes(cdm = cdm,                                    name = c(\"acetaminophen\"))  cdm <- generateConceptCohortSet(   cdm = cdm,   name = \"acetaminophen\",   conceptSet = acetaminophen_cs,   end = \"event_end_date\",   limit = \"all\" )  dplyr::bind_rows( cdm$ankle_sprain |>    addCohortIntersectCount(targetCohortTable = \"acetaminophen\",                          window = c(-Inf, Inf)) |>    dplyr::group_by(acetaminophen_minf_to_inf)  |>    dplyr::tally() |>    dplyr::collect() |>    dplyr::arrange(desc(acetaminophen_minf_to_inf)) |>    dplyr::mutate(type = \"cohort\"), cdm$ankle_sprain |>    addConceptIntersectCount(conceptSet = acetaminophen_cs,                           window = c(-Inf, Inf)) |>    dplyr::group_by(acetaminophen_minf_to_inf) |>    dplyr::tally() |>    dplyr::collect() |>    dplyr::arrange(desc(acetaminophen_minf_to_inf)) |>    dplyr::mutate(type = \"concept_set\")) |>    ggplot() +   geom_col(aes(acetaminophen_minf_to_inf, n, fill = type),             position = \"dodge\") +   theme_bw()+   theme(legend.title = element_blank(),          legend.position = \"top\")"},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/articles/a06_summarisePatientCharacteristics.html","id":"characteristics-plots","dir":"Articles","previous_headings":"","what":"Characteristics plots","title":"Summarise patient characteristics","text":"plotCharacteristics can plot summariseCharacteristics results, boxplot barplot. First create mock data. Now show barplot example setting plotStyle = “barplot” plotCharacteristics. Similar previous function, user can define axes, facetVars colorVars. Currently, barplot plotting percentage.  User can plot boxplot based q25 q75 median min max data, using plotCharacteristics set plotStyle = “boxplot”. Boxplot horizontal xAxis set estimate_value, vertical yAxis set estimate_value. plots, least one xAxis yAxis estimate_value.","code":"observation_period <- dplyr::tibble(   observation_period_id = c(1, 2, 3),   person_id = c(1, 2, 3),   observation_period_start_date = as.Date(c(     \"1985-01-01\", \"1989-04-29\", \"1974-12-03\"   )),   observation_period_end_date = as.Date(c(     \"2011-03-04\", \"2022-03-14\", \"2023-07-10\"   )),   period_type_concept_id = 0 ) dus_cohort <- dplyr::tibble(   cohort_definition_id = c(1, 1, 1, 2),   subject_id = c(1, 1, 2, 3),   cohort_start_date = as.Date(c(     \"1990-04-19\", \"1991-04-19\", \"2010-11-14\", \"2000-05-25\"   )),   cohort_end_date = as.Date(c(     \"1990-04-19\", \"1991-04-19\", \"2010-11-14\", \"2000-05-25\"   )) ) comorbidities <- dplyr::tibble(   cohort_definition_id = c(1, 2, 2, 1),   subject_id = c(1, 1, 3, 3),   cohort_start_date = as.Date(c(     \"1990-01-01\", \"1990-06-01\", \"2000-01-01\", \"2000-06-01\"   )),   cohort_end_date = as.Date(c(     \"1990-01-01\", \"1990-06-01\", \"2000-01-01\", \"2000-06-01\"   )) ) medication <- dplyr::tibble(   cohort_definition_id = c(1, 1, 2, 1),   subject_id = c(1, 1, 2, 3),   cohort_start_date = as.Date(c(     \"1990-02-01\", \"1990-08-01\", \"2009-01-01\", \"1995-06-01\"   )),   cohort_end_date = as.Date(c(     \"1990-02-01\", \"1990-08-01\", \"2009-01-01\", \"1995-06-01\"   )) ) emptyCohort <- dplyr::tibble(   cohort_definition_id = numeric(),   subject_id = numeric(),   cohort_start_date = as.Date(character()),   cohort_end_date = as.Date(character()) ) cdm <- mockPatientProfiles(   dus_cohort = dus_cohort, cohort1 = emptyCohort,   cohort2 = emptyCohort, observation_period = observation_period,   comorbidities = comorbidities, medication = medication )  cdm$dus_cohort <- omopgenerics::newCohortTable(   table = cdm$dus_cohort, cohortSetRef = dplyr::tibble(     cohort_definition_id = c(1, 2), cohort_name = c(\"exposed\", \"unexposed\")   ) ) cdm$comorbidities <- omopgenerics::newCohortTable(   table = cdm$comorbidities, cohortSetRef = dplyr::tibble(     cohort_definition_id = c(1, 2), cohort_name = c(\"covid\", \"headache\")   ) ) cdm$medication <- omopgenerics::newCohortTable(   table = cdm$medication,   cohortSetRef = dplyr::tibble(     cohort_definition_id = c(1, 2, 3),     cohort_name = c(\"acetaminophen\", \"ibuprophen\", \"naloxone\")   ),   cohortAttritionRef = NULL ) characteristicsResult <- summariseCharacteristics(   cdm$dus_cohort,   cohortIntersect = list(     \"Medications\" = list(       targetCohortTable = \"medication\", value = \"flag\", window = c(-365, 0)     ),      \"Comorbidities\" = list(       targetCohortTable = \"comorbidities\", value = \"flag\", window = c(-Inf, 0)     )   ) ) #> ℹ adding demographics columns #> ℹ adding cohort intersect columns for table: medication #> ℹ adding cohort intersect columns for table: comorbidities #> ℹ summarising data #> Warning: There were 2 warnings in `dplyr::summarise()`. #> The first warning was: #> ℹ In argument: `dplyr::across(...)`. #> ℹ In group 2: `strata_id = 2`. #> Caused by warning in `base::min()`: #> ! no non-missing arguments to min; returning Inf #> ℹ Run `dplyr::last_dplyr_warnings()` to see the 1 remaining warning. #> ✔ summariseCharacteristics finished! plotCharacteristics(     data =  characteristicsResult,     xAxis = \"estimate_value\",     yAxis = \"variable_name\",     plotStyle = \"barplot\",     facetVars = c(\"group_level\"),     colorVars = c(\"variable_name\", \"variable_level\")   ) plotCharacteristics(     data =  characteristicsResult,     xAxis = \"estimate_value\",     yAxis = \"variable_name\",     plotStyle = \"boxplot\",     facetVars = \"variable_name\",     colorVars = c(\"group_level\")   ) #> Warning: Removed 2 rows containing missing values or values outside the scale range #> (`geom_segment()`). #> Warning: Removed 1 row containing missing values or values outside the scale range #> (`geom_segment()`). #> Warning: Removed 2 rows containing missing values or values outside the scale range #> (`geom_segment()`). #> Warning: Removed 1 row containing missing values or values outside the scale range #> (`geom_segment()`)."},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Marti Catala. Author, maintainer. Yuchen Guo. Author. Mike Du. Author. Kim Lopez-Guell. Author. Edward Burn. Author. Nuria Mercade-Besora. Contributor. Xintong Li. Contributor.","code":""},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Catala M, Guo Y, Du M, Lopez-Guell K, Burn E (2024). PatientProfiles: Identify Characteristics Patients OMOP Common Data Model. R package version 0.7.0, https://darwin-eu-dev.github.io/PatientProfiles/.","code":"@Manual{,   title = {PatientProfiles: Identify Characteristics of Patients in the OMOP Common Data Model},   author = {Marti Catala and Yuchen Guo and Mike Du and Kim Lopez-Guell and Edward Burn},   year = {2024},   note = {R package version 0.7.0},   url = {https://darwin-eu-dev.github.io/PatientProfiles/}, }"},{"path":[]},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/index.html","id":"package-overview","dir":"","previous_headings":"","what":"Package overview","title":"Identify Characteristics of Patients in the OMOP Common Data Model","text":"PatientProfiles contains functions adding characteristics OMOP CDM tables containing patient level data (e.g. condition occurrence, drug exposure, ) OMOP CDM cohort tables. characteristics can added include individual´s sex, age, days prior observation Time varying characteristics, age, can estimated relative date corresponding table. addition, PatientProfiles also provides functionality identifying intersections cohort table OMOP CDM tables containing patient level data cohort tables.","code":""},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/index.html","id":"package-installation","dir":"","previous_headings":"","what":"Package installation","title":"Identify Characteristics of Patients in the OMOP Common Data Model","text":"can install latest version PatientProfiles like :","code":"install.packages(\"remotes\") remotes::install_github(\"darwin-eu-dev/PatientProfiles\")"},{"path":[]},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/index.html","id":"create-a-reference-to-data-in-the-omop-cdm-format","dir":"","previous_headings":"Example usage","what":"Create a reference to data in the OMOP CDM format","title":"Identify Characteristics of Patients in the OMOP Common Data Model","text":"PatientProfiles package designed work data OMOP CDM format, first step create reference data using CDMConnector package. Creating connection Postgres database example look like: see create reference database please consult CDMConnector package documentation. example though ’ll work simulated data, ’ll generate example cdm reference like :","code":"library(CDMConnector) library(PatientProfiles) library(dplyr) con <- DBI::dbConnect(   RPostgres::Postgres(),   dbname = Sys.getenv(\"CDM5_POSTGRESQL_DBNAME\"),   host = Sys.getenv(\"CDM5_POSTGRESQL_HOST\"),   user = Sys.getenv(\"CDM5_POSTGRESQL_USER\"),   password = Sys.getenv(\"CDM5_POSTGRESQL_PASSWORD\") )  cdm <- cdm_from_con(   con,   cdm_schema = Sys.getenv(\"CDM5_POSTGRESQL_CDM_SCHEMA\"),   write_schema = Sys.getenv(\"CDM5_POSTGRESQL_RESULT_SCHEMA\") ) cdm <- mockPatientProfiles(patient_size = 1000, drug_exposure_size = 1000)"},{"path":[]},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/index.html","id":"adding-characteristics-to-patient-level-data","dir":"","previous_headings":"Example usage > Adding individuals´ characteristics","what":"Adding characteristics to patient-level data","title":"Identify Characteristics of Patients in the OMOP Common Data Model","text":"Say wanted get individuals´sex age condition start date records condition occurrence table. can use addAge addSex functions : , example, limit data males aged 18 65","code":"cdm$condition_occurrence %>%   glimpse() #> Rows: ?? #> Columns: 6 #> Database: DuckDB v0.10.0 [martics@Windows 10 x64:R 4.2.3/:memory:] #> $ condition_occurrence_id   <int> 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 1… #> $ person_id                 <int> 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 1… #> $ condition_concept_id      <int> 4, 3, 5, 2, 3, 4, 4, 3, 5, 4, 1, 1, 4, 4, 3,… #> $ condition_start_date      <date> 2005-06-30, 2005-05-28, 2008-06-30, 2011-01… #> $ condition_end_date        <date> 2007-07-25, 2007-09-16, 2010-10-06, 2011-10… #> $ condition_type_concept_id <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,…  cdm$condition_occurrence <- cdm$condition_occurrence %>%   addAge(indexDate = \"condition_start_date\") %>%   addSex()  cdm$condition_occurrence %>%   glimpse() #> Rows: ?? #> Columns: 8 #> Database: DuckDB v0.10.0 [martics@Windows 10 x64:R 4.2.3/:memory:] #> $ condition_occurrence_id   <int> 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 1… #> $ person_id                 <int> 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 1… #> $ condition_concept_id      <int> 4, 3, 5, 2, 3, 4, 4, 3, 5, 4, 1, 1, 4, 4, 1,… #> $ condition_start_date      <date> 2005-06-30, 2005-05-28, 2008-06-30, 2011-01… #> $ condition_end_date        <date> 2007-07-25, 2007-09-16, 2010-10-06, 2011-10… #> $ condition_type_concept_id <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,… #> $ age                       <dbl> 7, 59, 9, 62, 69, 38, 23, 83, 43, 28, 47, 54… #> $ sex                       <chr> \"Female\", \"Female\", \"Male\", \"Female\", \"Male\"… cdm$condition_occurrence %>%   filter(age >= 18 & age <= 65) %>%   filter(sex == \"Male\") #> # Source:   SQL [?? x 8] #> # Database: DuckDB v0.10.0 [martics@Windows 10 x64:R 4.2.3/:memory:] #>    condition_occurrence_id person_id condition_concept_id condition_start_date #>                      <int>     <int>                <int> <date>               #>  1                       6         6                    4 2005-09-23           #>  2                       7         7                    4 2016-01-16           #>  3                       9         9                    5 2009-12-21           #>  4                      10        10                    4 2015-12-15           #>  5                      11        11                    1 2014-04-08           #>  6                      20        20                    4 2007-05-19           #>  7                      24        24                    3 2005-02-16           #>  8                      27        27                    2 2013-06-21           #>  9                      46        46                    1 2007-10-10           #> 10                      48        48                    2 2014-01-06           #> # ℹ more rows #> # ℹ 4 more variables: condition_end_date <date>, #> #   condition_type_concept_id <dbl>, age <dbl>, sex <chr>"},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/index.html","id":"adding-characteristics-of-a-cohort","dir":"","previous_headings":"Example usage > Adding individuals´ characteristics","what":"Adding characteristics of a cohort","title":"Identify Characteristics of Patients in the OMOP Common Data Model","text":"tables OMOP CDM, can work similar way cohort tables. example, say cohort table can add age, age groups, sex, days prior observation cohort like use information subset cohort. example limiting least 365 days prior observation available cohort start date like ","code":"cdm$cohort1 %>%   glimpse() #> Rows: ?? #> Columns: 4 #> Database: DuckDB v0.10.0 [martics@Windows 10 x64:R 4.2.3/:memory:] #> $ cohort_definition_id <dbl> 1, 1, 1, 2 #> $ subject_id           <dbl> 1, 1, 2, 3 #> $ cohort_start_date    <date> 2020-01-01, 2020-06-01, 2020-01-02, 2020-01-01 #> $ cohort_end_date      <date> 2020-04-01, 2020-08-01, 2020-02-02, 2020-03-01 cdm$cohort1 <- cdm$cohort1 %>%   addAge(     indexDate = \"cohort_start_date\",     ageGroup = list(c(0, 18), c(19, 65), c(66, 100))   ) %>%   addSex() %>%   addPriorObservation()  cdm$cohort1 %>%   glimpse() #> Rows: ?? #> Columns: 8 #> Database: DuckDB v0.10.0 [martics@Windows 10 x64:R 4.2.3/:memory:] #> $ cohort_definition_id <dbl> 1, 1, 2, 1 #> $ subject_id           <dbl> 1, 2, 3, 1 #> $ cohort_start_date    <date> 2020-06-01, 2020-01-02, 2020-01-01, 2020-01-01 #> $ cohort_end_date      <date> 2020-08-01, 2020-02-02, 2020-03-01, 2020-04-01 #> $ age                  <dbl> 22, 73, 21, 22 #> $ age_group            <chr> \"19 to 65\", \"66 to 100\", \"19 to 65\", \"19 to 65\" #> $ sex                  <chr> \"Female\", \"Female\", \"Male\", \"Female\" #> $ prior_observation    <dbl> 4209, 4486, 5267, 4057 cdm$cohort1 %>%   filter(prior_observation >= 365) #> # Source:   SQL [4 x 8] #> # Database: DuckDB v0.10.0 [martics@Windows 10 x64:R 4.2.3/:memory:] #>   cohort_definition_id subject_id cohort_start_date cohort_end_date   age #>                  <dbl>      <dbl> <date>            <date>          <dbl> #> 1                    1          1 2020-06-01        2020-08-01         22 #> 2                    1          2 2020-01-02        2020-02-02         73 #> 3                    2          3 2020-01-01        2020-03-01         21 #> 4                    1          1 2020-01-01        2020-04-01         22 #> # ℹ 3 more variables: age_group <chr>, sex <chr>, prior_observation <dbl>"},{"path":[]},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/index.html","id":"detect-the-presence-of-another-cohort-in-a-certain-window","dir":"","previous_headings":"Example usage > Cohort intersections","what":"Detect the presence of another cohort in a certain window","title":"Identify Characteristics of Patients in the OMOP Common Data Model","text":"can use addCohortIntersectFlag add flag presence () cohort certain window.","code":"cdm$cohort1 %>%   glimpse() #> Rows: ?? #> Columns: 4 #> Database: DuckDB v0.10.0 [martics@Windows 10 x64:R 4.2.3/:memory:] #> $ cohort_definition_id <dbl> 1, 1 #> $ subject_id           <dbl> 1, 1 #> $ cohort_start_date    <date> 2020-01-01, 2020-06-01 #> $ cohort_end_date      <date> 2020-04-01, 2020-08-01  cdm$cohort1 <- cdm$cohort1 %>%   addCohortIntersectFlag(     targetCohortTable = \"cohort2\",     window = c(-Inf, -1)   )  cdm$cohort1 %>%   glimpse() #> Rows: ?? #> Columns: 6 #> Database: DuckDB v0.10.0 [martics@Windows 10 x64:R 4.2.3/:memory:] #> $ cohort_definition_id <dbl> 1, 1 #> $ subject_id           <dbl> 1, 1 #> $ cohort_start_date    <date> 2020-01-01, 2020-06-01 #> $ cohort_end_date      <date> 2020-04-01, 2020-08-01 #> $ cohort_1_minf_to_m1  <dbl> 1, 1 #> $ cohort_2_minf_to_m1  <dbl> 0, 1"},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/index.html","id":"count-appearances-of-a-certain-cohort-in-a-certain-window","dir":"","previous_headings":"Example usage > Cohort intersections","what":"Count appearances of a certain cohort in a certain window","title":"Identify Characteristics of Patients in the OMOP Common Data Model","text":"wanted number appearances, instead use addCohortIntersectCount function","code":"cdm$cohort1 %>%   glimpse() #> Rows: ?? #> Columns: 4 #> Database: DuckDB v0.10.0 [martics@Windows 10 x64:R 4.2.3/:memory:] #> $ cohort_definition_id <dbl> 1, 1 #> $ subject_id           <dbl> 1, 1 #> $ cohort_start_date    <date> 2020-01-01, 2020-06-01 #> $ cohort_end_date      <date> 2020-04-01, 2020-08-01  cdm$cohort1 <- cdm$cohort1 %>%   addCohortIntersectCount(     targetCohortTable = \"cohort2\",     targetCohortId = 1,     window = list(\"short_term\" = c(1, 30), \"mid_term\" = c(31, 180))   )  cdm$cohort1 %>%   glimpse() #> Rows: ?? #> Columns: 6 #> Database: DuckDB v0.10.0 [martics@Windows 10 x64:R 4.2.3/:memory:] #> $ cohort_definition_id <dbl> 1, 1 #> $ subject_id           <dbl> 1, 1 #> $ cohort_start_date    <date> 2020-01-01, 2020-06-01 #> $ cohort_end_date      <date> 2020-04-01, 2020-08-01 #> $ cohort_1_mid_term    <dbl> 1, 0 #> $ cohort_1_short_term  <dbl> 0, 0"},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/index.html","id":"add-a-column-with-the-firstlast-event-in-a-certain-window","dir":"","previous_headings":"Example usage > Cohort intersections","what":"Add a column with the first/last event in a certain window","title":"Identify Characteristics of Patients in the OMOP Common Data Model","text":"Say wanted date individual another cohort can use addCohortIntersectDate function. might multiple records cohort, can also choose first last appearance cohort. First occurrence: Last occurrence:","code":"cdm$cohort1 %>%   glimpse() #> Rows: ?? #> Columns: 4 #> Database: DuckDB v0.10.0 [martics@Windows 10 x64:R 4.2.3/:memory:] #> $ cohort_definition_id <dbl> 1, 1 #> $ subject_id           <dbl> 1, 1 #> $ cohort_start_date    <date> 2020-01-01, 2020-06-01 #> $ cohort_end_date      <date> 2020-04-01, 2020-08-01  cdm$cohort1 <- cdm$cohort1 %>%   addCohortIntersectDate(     targetCohortTable = \"cohort2\",     targetCohortId = 1,     order = \"first\",     window = c(-Inf, Inf)   )  cdm$cohort1 %>%   glimpse() #> Rows: ?? #> Columns: 5 #> Database: DuckDB v0.10.0 [martics@Windows 10 x64:R 4.2.3/:memory:] #> $ cohort_definition_id <dbl> 1, 1 #> $ subject_id           <dbl> 1, 1 #> $ cohort_start_date    <date> 2020-01-01, 2020-06-01 #> $ cohort_end_date      <date> 2020-04-01, 2020-08-01 #> $ cohort_1_minf_to_inf <date> 2019-12-30, 2019-12-30 cdm$cohort1 %>%   glimpse() #> Rows: ?? #> Columns: 4 #> Database: DuckDB v0.10.0 [martics@Windows 10 x64:R 4.2.3/:memory:] #> $ cohort_definition_id <dbl> 1, 1 #> $ subject_id           <dbl> 1, 1 #> $ cohort_start_date    <date> 2020-01-01, 2020-06-01 #> $ cohort_end_date      <date> 2020-04-01, 2020-08-01  cdm$cohort1 <- cdm$cohort1 %>%   addCohortIntersectDate(     targetCohortTable = \"cohort2\",     targetCohortId = 1,     order = \"last\",     window = c(-Inf, Inf)   )  cdm$cohort1 %>%   glimpse() #> Rows: ?? #> Columns: 5 #> Database: DuckDB v0.10.0 [martics@Windows 10 x64:R 4.2.3/:memory:] #> $ cohort_definition_id <dbl> 1, 1 #> $ subject_id           <dbl> 1, 1 #> $ cohort_start_date    <date> 2020-01-01, 2020-06-01 #> $ cohort_end_date      <date> 2020-04-01, 2020-08-01 #> $ cohort_1_minf_to_inf <date> 2020-05-25, 2020-05-25"},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/index.html","id":"add-the-number-of-days-instead-of-the-date","dir":"","previous_headings":"Example usage > Cohort intersections","what":"Add the number of days instead of the date","title":"Identify Characteristics of Patients in the OMOP Common Data Model","text":"Instead returning date, return days intersection using addCohortIntersectDays","code":"cdm$cohort1 %>%   glimpse() #> Rows: ?? #> Columns: 4 #> Database: DuckDB v0.10.0 [martics@Windows 10 x64:R 4.2.3/:memory:] #> $ cohort_definition_id <dbl> 1, 1 #> $ subject_id           <dbl> 1, 1 #> $ cohort_start_date    <date> 2020-01-01, 2020-06-01 #> $ cohort_end_date      <date> 2020-04-01, 2020-08-01  cdm$cohort1 <- cdm$cohort1 %>%   addCohortIntersectDays(     targetCohortTable = \"cohort2\",     targetCohortId = 1,     order = \"last\",     window = c(-Inf, Inf)   )  cdm$cohort1 %>%   glimpse() #> Rows: ?? #> Columns: 5 #> Database: DuckDB v0.10.0 [martics@Windows 10 x64:R 4.2.3/:memory:] #> $ cohort_definition_id <dbl> 1, 1 #> $ subject_id           <dbl> 1, 1 #> $ cohort_start_date    <date> 2020-01-01, 2020-06-01 #> $ cohort_end_date      <date> 2020-04-01, 2020-08-01 #> $ cohort_1_minf_to_inf <dbl> 145, -7"},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/index.html","id":"combine-multiple-cohort-intersects","dir":"","previous_headings":"Example usage > Cohort intersections","what":"Combine multiple cohort intersects","title":"Identify Characteristics of Patients in the OMOP Common Data Model","text":"want combine multiple cohort intersects can concatenate operations using pipe operator: efficient implementation getting multiple types intersection results provided addCohortIntersectTime","code":"cdm$cohort1 %>%   glimpse() #> Rows: ?? #> Columns: 4 #> Database: DuckDB v0.10.0 [martics@Windows 10 x64:R 4.2.3/:memory:] #> $ cohort_definition_id <dbl> 1, 1 #> $ subject_id           <dbl> 1, 1 #> $ cohort_start_date    <date> 2020-01-01, 2020-06-01 #> $ cohort_end_date      <date> 2020-04-01, 2020-08-01  cdm$cohort1 <- cdm$cohort1 %>%   addCohortIntersectDate(     targetCohortTable = \"cohort2\",     targetCohortId = 1,     order = \"last\",     window = c(-Inf, Inf)   ) %>%   addCohortIntersectCount(     targetCohortTable = \"cohort2\",     targetCohortId = 1,     window = c(-Inf, Inf)   )  cdm$cohort1 %>%   glimpse() #> Rows: ?? #> Columns: 5 #> Database: DuckDB v0.10.0 [martics@Windows 10 x64:R 4.2.3/:memory:] #> $ cohort_definition_id <dbl> 1, 1 #> $ subject_id           <dbl> 1, 1 #> $ cohort_start_date    <date> 2020-01-01, 2020-06-01 #> $ cohort_end_date      <date> 2020-04-01, 2020-08-01 #> $ cohort_1_minf_to_inf <dbl> 2, 2 cdm$cohort1 %>%   glimpse() #> Rows: ?? #> Columns: 4 #> Database: DuckDB v0.10.0 [martics@Windows 10 x64:R 4.2.3/:memory:] #> $ cohort_definition_id <dbl> 1, 1 #> $ subject_id           <dbl> 1, 1 #> $ cohort_start_date    <date> 2020-01-01, 2020-06-01 #> $ cohort_end_date      <date> 2020-04-01, 2020-08-01  cdm$cohort1 <- cdm$cohort1 %>%   addCohortIntersect(     targetCohortTable = \"cohort2\",     targetCohortId = 1,     count = TRUE,     flag = TRUE,     days = TRUE,     date = TRUE,     window = list(\"any_time\" = c(-Inf, Inf))   )  cdm$cohort1 %>%   glimpse() #> Rows: ?? #> Columns: 8 #> Database: DuckDB v0.10.0 [martics@Windows 10 x64:R 4.2.3/:memory:] #> $ cohort_definition_id    <dbl> 1, 1 #> $ subject_id              <dbl> 1, 1 #> $ cohort_start_date       <date> 2020-01-01, 2020-06-01 #> $ cohort_end_date         <date> 2020-04-01, 2020-08-01 #> $ count_cohort_1_any_time <dbl> 2, 2 #> $ flag_cohort_1_any_time  <dbl> 1, 1 #> $ date_cohort_1_any_time  <date> 2019-12-30, 2019-12-30 #> $ days_cohort_1_any_time  <dbl> -2, -154"},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/PatientProfiles-package.html","id":null,"dir":"Reference","previous_headings":"","what":"PatientProfiles: Identify Characteristics of Patients in the OMOP Common Data Model — PatientProfiles-package","title":"PatientProfiles: Identify Characteristics of Patients in the OMOP Common Data Model — PatientProfiles-package","text":"Identify characteristics patients data mapped Observational Medical Outcomes Partnership (OMOP) common data model.","code":""},{"path":[]},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/PatientProfiles-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"PatientProfiles: Identify Characteristics of Patients in the OMOP Common Data Model — PatientProfiles-package","text":"Maintainer: Marti Catala marti.catalasabate@ndorms.ox.ac.uk (ORCID) Authors: Yuchen Guo yuchen.guo@ndorms.ox.ac.uk (ORCID) Mike Du mike.du@ndorms.ox.ac.uk (ORCID) Kim Lopez-Guell kim.lopez@spc.ox.ac.uk (ORCID) Edward Burn edward.burn@ndorms.ox.ac.uk (ORCID) contributors: Nuria Mercade-Besora nuria.mercadebesora@ndorms.ox.ac.uk (ORCID) [contributor] Xintong Li xintong.li@ndorms.ox.ac.uk (ORCID) [contributor]","code":""},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/addAge.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute the age of the individuals at a certain date — addAge","title":"Compute the age of the individuals at a certain date — addAge","text":"Compute age individuals certain date","code":""},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/addAge.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute the age of the individuals at a certain date — addAge","text":"","code":"addAge(   x,   cdm = lifecycle::deprecated(),   indexDate = \"cohort_start_date\",   ageName = \"age\",   ageGroup = NULL,   ageDefaultMonth = 1,   ageDefaultDay = 1,   ageImposeMonth = FALSE,   ageImposeDay = FALSE,   missingAgeGroupValue = \"None\" )"},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/addAge.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute the age of the individuals at a certain date — addAge","text":"x Table individuals cdm. cdm cdm_reference object. indexDate Variable x contains date compute age. ageName Name new column contains age. ageGroup List age groups added. ageDefaultMonth Month year assigned individuals missing month birth. default: 1. ageDefaultDay day month assigned individuals missing day birth. default: 1. ageImposeMonth Whether month date birth considered missing individuals. ageImposeDay Whether day date birth considered missing individuals. missingAgeGroupValue Value include missing age.","code":""},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/addAge.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute the age of the individuals at a certain date — addAge","text":"tibble age column added.","code":""},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/addAge.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute the age of the individuals at a certain date — addAge","text":"","code":"# \\donttest{ cdm <- mockPatientProfiles()  cdm$cohort1 |>   addAge() #> # Source:   table<og_001_1711649821> [2 x 5] #> # Database: DuckDB v0.10.0 [unknown@Linux 6.5.0-1016-azure:R 4.3.3/:memory:] #>   cohort_definition_id subject_id cohort_start_date cohort_end_date   age #>                  <dbl>      <dbl> <date>            <date>          <dbl> #> 1                    1          1 2020-01-01        2020-04-01         27 #> 2                    1          1 2020-06-01        2020-08-01         27 CDMConnector::cdmDisconnect(cdm = cdm) # }"},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/addCategories.html","id":null,"dir":"Reference","previous_headings":"","what":"Categorize a numeric variable — addCategories","title":"Categorize a numeric variable — addCategories","text":"Categorize numeric variable","code":""},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/addCategories.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Categorize a numeric variable — addCategories","text":"","code":"addCategories(   x,   variable,   categories,   missingCategoryValue = \"None\",   overlap = FALSE )"},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/addCategories.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Categorize a numeric variable — addCategories","text":"x Table individuals cdm. variable Target variable want categorize. categories List lists named categories lower upper limit. missingCategoryValue Value assign individuals named category. NULL NA, missing values given. overlap TRUE categories given overlap.","code":""},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/addCategories.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Categorize a numeric variable — addCategories","text":"tibble categorical variable added.","code":""},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/addCategories.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Categorize a numeric variable — addCategories","text":"","code":"# \\donttest{ cdm <- mockPatientProfiles()  result <- cdm$cohort1 %>%   addAge() %>%   addCategories(     variable = \"age\",     categories = list(\"age_group\" = list(       \"0 to 39\" = c(0, 39), \"40 to 79\" = c(40, 79), \"80 to 150\" = c(80, 150)     ))   ) CDMConnector::cdmDisconnect(cdm = cdm) # }"},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/addCdmName.html","id":null,"dir":"Reference","previous_headings":"","what":"Add cdm name — addCdmName","title":"Add cdm name — addCdmName","text":"Add cdm name","code":""},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/addCdmName.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add cdm name — addCdmName","text":"","code":"addCdmName(table, cdm = omopgenerics::cdmReference(table))"},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/addCdmName.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add cdm name — addCdmName","text":"table Table cdm cdm cdm reference object","code":""},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/addCdmName.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add cdm name — addCdmName","text":"Table extra column cdm names","code":""},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/addCdmName.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add cdm name — addCdmName","text":"","code":"# \\donttest{ library(PatientProfiles)  cdm <- mockPatientProfiles() cdm$cohort1 %>%   addCdmName() #> # Source:   SQL [2 x 5] #> # Database: DuckDB v0.10.0 [unknown@Linux 6.5.0-1016-azure:R 4.3.3/:memory:] #>   cohort_definition_id subject_id cohort_start_date cohort_end_date cdm_name #>                  <dbl>      <dbl> <date>            <date>          <chr>    #> 1                    1          1 2020-01-01        2020-04-01      PP_MOCK  #> 2                    1          1 2020-06-01        2020-08-01      PP_MOCK  # }"},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/addCohortIntersect.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute the intersect with a target cohort, you can compute the number of\noccurrences, a flag of presence, a certain date and/or the time difference — addCohortIntersect","title":"Compute the intersect with a target cohort, you can compute the number of\noccurrences, a flag of presence, a certain date and/or the time difference — addCohortIntersect","text":"Compute intersect target cohort, can compute number occurrences, flag presence, certain date /time difference","code":""},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/addCohortIntersect.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute the intersect with a target cohort, you can compute the number of\noccurrences, a flag of presence, a certain date and/or the time difference — addCohortIntersect","text":"","code":"addCohortIntersect(   x,   cdm = lifecycle::deprecated(),   targetCohortTable,   targetCohortId = NULL,   indexDate = \"cohort_start_date\",   censorDate = NULL,   targetStartDate = \"cohort_start_date\",   targetEndDate = \"cohort_end_date\",   window = list(c(0, Inf)),   order = \"first\",   flag = TRUE,   count = TRUE,   date = TRUE,   days = TRUE,   nameStyle = \"{value}_{cohort_name}_{window_name}\" )"},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/addCohortIntersect.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute the intersect with a target cohort, you can compute the number of\noccurrences, a flag of presence, a certain date and/or the time difference — addCohortIntersect","text":"x Table individuals cdm. cdm Object contains cdm reference. Use CDMConnector obtain cdm reference. targetCohortTable name cohort want check overlap. targetCohortId vector cohort definition ids include. indexDate Variable x contains date compute intersection. censorDate whether censor overlap events specific date column date x. targetStartDate date reference cohort table, either start (overlap) (incidence). targetEndDate date reference cohort table, either end (overlap) NULL (incidence). window window consider events . order record considered case multiple records. flag TRUE FALSE. TRUE, flag calculated intersection. count TRUE FALSE. TRUE, number counts calculated intersection. date TRUE FALSE. TRUE, date calculated intersection. days TRUE FALSE. TRUE, time difference days calculated intersection. nameStyle naming added column columns, include required parameters.","code":""},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/addCohortIntersect.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute the intersect with a target cohort, you can compute the number of\noccurrences, a flag of presence, a certain date and/or the time difference — addCohortIntersect","text":"table added columns overlap information.","code":""},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/addCohortIntersect.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute the intersect with a target cohort, you can compute the number of\noccurrences, a flag of presence, a certain date and/or the time difference — addCohortIntersect","text":"","code":"# \\donttest{ cdm <- mockPatientProfiles()  cdm$cohort1 %>%   addCohortIntersect(     targetCohortTable = \"cohort2\"   ) #> Warning: `addCohortIntersect()` was deprecated in PatientProfiles 0.6.0. #> please use the specific functions instead: #> • addCohortIntersectFlag() #> • addCohortIntersectCount() #> • addCohortIntersectDate() #> • addCohortIntersectDays() #> # Source:   table<og_014_1711649831> [2 x 12] #> # Database: DuckDB v0.10.0 [unknown@Linux 6.5.0-1016-azure:R 4.3.3/:memory:] #>   cohort_definition_id subject_id cohort_start_date cohort_end_date #>                  <dbl>      <dbl> <date>            <date>          #> 1                    1          1 2020-01-01        2020-04-01      #> 2                    1          1 2020-06-01        2020-08-01      #> # ℹ 8 more variables: flag_cohort_2_0_to_inf <dbl>, #> #   count_cohort_1_0_to_inf <dbl>, count_cohort_2_0_to_inf <dbl>, #> #   flag_cohort_1_0_to_inf <dbl>, date_cohort_1_0_to_inf <date>, #> #   date_cohort_2_0_to_inf <date>, days_cohort_1_0_to_inf <dbl>, #> #   days_cohort_2_0_to_inf <dbl> CDMConnector::cdmDisconnect(cdm = cdm) # }"},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/addCohortIntersectCount.html","id":null,"dir":"Reference","previous_headings":"","what":"It creates columns to indicate number of occurrences of intersection with a\ncohort — addCohortIntersectCount","title":"It creates columns to indicate number of occurrences of intersection with a\ncohort — addCohortIntersectCount","text":"creates columns indicate number occurrences intersection cohort","code":""},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/addCohortIntersectCount.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"It creates columns to indicate number of occurrences of intersection with a\ncohort — addCohortIntersectCount","text":"","code":"addCohortIntersectCount(   x,   cdm = lifecycle::deprecated(),   targetCohortTable,   targetCohortId = NULL,   indexDate = \"cohort_start_date\",   censorDate = NULL,   targetStartDate = \"cohort_start_date\",   targetEndDate = \"cohort_end_date\",   window = list(c(0, Inf)),   nameStyle = \"{cohort_name}_{window_name}\" )"},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/addCohortIntersectCount.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"It creates columns to indicate number of occurrences of intersection with a\ncohort — addCohortIntersectCount","text":"x Table individuals cdm. cdm Object contains cdm reference. Use CDMConnector obtain cdm reference. targetCohortTable name cohort want check overlap. targetCohortId vector cohort definition ids include. indexDate Variable x contains date compute intersection. censorDate whether censor overlap events specific date column date x. targetStartDate date reference cohort table, either start (overlap) (incidence). targetEndDate date reference cohort table, either end (overlap) NULL (incidence). window window consider events . nameStyle naming added column columns, include required parameters.","code":""},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/addCohortIntersectCount.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"It creates columns to indicate number of occurrences of intersection with a\ncohort — addCohortIntersectCount","text":"table added columns overlap information.","code":""},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/addCohortIntersectCount.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"It creates columns to indicate number of occurrences of intersection with a\ncohort — addCohortIntersectCount","text":"","code":"# \\donttest{ cdm <- mockPatientProfiles()  cdm$cohort1 %>%   addCohortIntersectCount(     targetCohortTable = \"cohort2\"   ) #> # Source:   table<og_023_1711649834> [2 x 6] #> # Database: DuckDB v0.10.0 [unknown@Linux 6.5.0-1016-azure:R 4.3.3/:memory:] #>   cohort_definition_id subject_id cohort_start_date cohort_end_date #>                  <dbl>      <dbl> <date>            <date>          #> 1                    1          1 2020-01-01        2020-04-01      #> 2                    1          1 2020-06-01        2020-08-01      #> # ℹ 2 more variables: cohort_1_0_to_inf <dbl>, cohort_2_0_to_inf <dbl> CDMConnector::cdmDisconnect(cdm = cdm) # }"},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/addCohortIntersectDate.html","id":null,"dir":"Reference","previous_headings":"","what":"Date of cohorts that are present in a certain window — addCohortIntersectDate","title":"Date of cohorts that are present in a certain window — addCohortIntersectDate","text":"Date cohorts present certain window","code":""},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/addCohortIntersectDate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Date of cohorts that are present in a certain window — addCohortIntersectDate","text":"","code":"addCohortIntersectDate(   x,   cdm = lifecycle::deprecated(),   targetCohortTable,   targetCohortId = NULL,   indexDate = \"cohort_start_date\",   censorDate = NULL,   targetDate = \"cohort_start_date\",   order = \"first\",   window = c(0, Inf),   nameStyle = \"{cohort_name}_{window_name}\" )"},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/addCohortIntersectDate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Date of cohorts that are present in a certain window — addCohortIntersectDate","text":"x Table individuals cdm. cdm Object contains cdm reference. Use CDMConnector obtain cdm reference. targetCohortTable Cohort table . targetCohortId Cohort IDs interest cohort table. NULL, cohorts used time variable added cohort interest. indexDate Variable x contains date compute intersection. censorDate whether censor overlap events specific date column date x. targetDate Date interest cohort table. Either cohort_start_date cohort_end_date. order date use multiple records individual window interest. Either first last. window Window time identify records relative indexDate. Records outside time period ignored. nameStyle naming added column columns, include required parameters.","code":""},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/addCohortIntersectDate.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Date of cohorts that are present in a certain window — addCohortIntersectDate","text":"x along additional columns cohort interest.","code":""},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/addCohortIntersectDate.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Date of cohorts that are present in a certain window — addCohortIntersectDate","text":"","code":"# \\donttest{ cdm <- mockPatientProfiles()  cdm$cohort1 %>%   addCohortIntersectDate(     targetCohortTable = \"cohort2\"   ) #> # Source:   table<og_030_1711649837> [2 x 6] #> # Database: DuckDB v0.10.0 [unknown@Linux 6.5.0-1016-azure:R 4.3.3/:memory:] #>   cohort_definition_id subject_id cohort_start_date cohort_end_date #>                  <dbl>      <dbl> <date>            <date>          #> 1                    1          1 2020-01-01        2020-04-01      #> 2                    1          1 2020-06-01        2020-08-01      #> # ℹ 2 more variables: cohort_2_0_to_inf <date>, cohort_1_0_to_inf <date> CDMConnector::cdmDisconnect(cdm = cdm) # }"},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/addCohortIntersectDays.html","id":null,"dir":"Reference","previous_headings":"","what":"It creates columns to indicate the number of days between the current table\nand a target cohort — addCohortIntersectDays","title":"It creates columns to indicate the number of days between the current table\nand a target cohort — addCohortIntersectDays","text":"creates columns indicate number days current table target cohort","code":""},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/addCohortIntersectDays.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"It creates columns to indicate the number of days between the current table\nand a target cohort — addCohortIntersectDays","text":"","code":"addCohortIntersectDays(   x,   cdm = lifecycle::deprecated(),   targetCohortTable,   targetCohortId = NULL,   indexDate = \"cohort_start_date\",   censorDate = NULL,   targetDate = \"cohort_start_date\",   order = \"first\",   window = c(0, Inf),   nameStyle = \"{cohort_name}_{window_name}\" )"},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/addCohortIntersectDays.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"It creates columns to indicate the number of days between the current table\nand a target cohort — addCohortIntersectDays","text":"x Table individuals cdm. cdm Object contains cdm reference. Use CDMConnector obtain cdm reference. targetCohortTable Cohort table . targetCohortId Cohort IDs interest cohort table. NULL, cohorts used days variable added cohort interest. indexDate Variable x contains date compute intersection. censorDate whether censor overlap events specific date column date x. targetDate Date interest cohort table. Either cohort_start_date cohort_end_date. order date use multiple records individual window interest. Either first last. window Window time identify records relative indexDate. Records outside time period ignored. nameStyle naming added column columns, include required parameters.","code":""},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/addCohortIntersectDays.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"It creates columns to indicate the number of days between the current table\nand a target cohort — addCohortIntersectDays","text":"x along additional columns cohort interest.","code":""},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/addCohortIntersectDays.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"It creates columns to indicate the number of days between the current table\nand a target cohort — addCohortIntersectDays","text":"","code":"# \\donttest{ cdm <- mockPatientProfiles()  cdm$cohort1 %>%   addCohortIntersectDays(     targetCohortTable = \"cohort2\"   ) #> # Source:   table<og_037_1711649840> [2 x 6] #> # Database: DuckDB v0.10.0 [unknown@Linux 6.5.0-1016-azure:R 4.3.3/:memory:] #>   cohort_definition_id subject_id cohort_start_date cohort_end_date #>                  <dbl>      <dbl> <date>            <date>          #> 1                    1          1 2020-01-01        2020-04-01      #> 2                    1          1 2020-06-01        2020-08-01      #> # ℹ 2 more variables: cohort_2_0_to_inf <dbl>, cohort_1_0_to_inf <dbl> CDMConnector::cdmDisconnect(cdm = cdm) # }"},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/addCohortIntersectFlag.html","id":null,"dir":"Reference","previous_headings":"","what":"It creates columns to indicate the presence of cohorts — addCohortIntersectFlag","title":"It creates columns to indicate the presence of cohorts — addCohortIntersectFlag","text":"creates columns indicate presence cohorts","code":""},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/addCohortIntersectFlag.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"It creates columns to indicate the presence of cohorts — addCohortIntersectFlag","text":"","code":"addCohortIntersectFlag(   x,   cdm = lifecycle::deprecated(),   targetCohortTable,   targetCohortId = NULL,   indexDate = \"cohort_start_date\",   censorDate = NULL,   targetStartDate = \"cohort_start_date\",   targetEndDate = \"cohort_end_date\",   window = list(c(0, Inf)),   nameStyle = \"{cohort_name}_{window_name}\" )"},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/addCohortIntersectFlag.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"It creates columns to indicate the presence of cohorts — addCohortIntersectFlag","text":"x Table individuals cdm. cdm Object contains cdm reference. Use CDMConnector obtain cdm reference. targetCohortTable name cohort want check overlap. targetCohortId vector cohort definition ids include. indexDate Variable x contains date compute intersection. censorDate whether censor overlap events specific date column date x. targetStartDate date reference cohort table, either start (overlap) (incidence). targetEndDate date reference cohort table, either end (overlap) NULL (incidence). window window consider events . nameStyle naming added column columns, include required parameters.","code":""},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/addCohortIntersectFlag.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"It creates columns to indicate the presence of cohorts — addCohortIntersectFlag","text":"table added columns overlap information.","code":""},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/addCohortIntersectFlag.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"It creates columns to indicate the presence of cohorts — addCohortIntersectFlag","text":"","code":"# \\donttest{ cdm <- mockPatientProfiles()  cdm$cohort1 %>%   addCohortIntersectFlag(     targetCohortTable = \"cohort2\"   ) #> # Source:   table<og_046_1711649844> [2 x 6] #> # Database: DuckDB v0.10.0 [unknown@Linux 6.5.0-1016-azure:R 4.3.3/:memory:] #>   cohort_definition_id subject_id cohort_start_date cohort_end_date #>                  <dbl>      <dbl> <date>            <date>          #> 1                    1          1 2020-01-01        2020-04-01      #> 2                    1          1 2020-06-01        2020-08-01      #> # ℹ 2 more variables: cohort_1_0_to_inf <dbl>, cohort_2_0_to_inf <dbl> CDMConnector::cdmDisconnect(cdm = cdm) # }"},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/addCohortName.html","id":null,"dir":"Reference","previous_headings":"","what":"Add cohort name for each cohort_definition_id — addCohortName","title":"Add cohort name for each cohort_definition_id — addCohortName","text":"Add cohort name cohort_definition_id","code":""},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/addCohortName.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add cohort name for each cohort_definition_id — addCohortName","text":"","code":"addCohortName(cohort)"},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/addCohortName.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add cohort name for each cohort_definition_id — addCohortName","text":"cohort cohort add cohort name","code":""},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/addCohortName.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add cohort name for each cohort_definition_id — addCohortName","text":"cohort extra column cohort names","code":""},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/addCohortName.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add cohort name for each cohort_definition_id — addCohortName","text":"","code":"# \\donttest{ library(PatientProfiles)  cdm <- mockPatientProfiles() cdm$cohort1 %>%   addCohortName() #> # Source:   SQL [2 x 5] #> # Database: DuckDB v0.10.0 [unknown@Linux 6.5.0-1016-azure:R 4.3.3/:memory:] #>   cohort_definition_id subject_id cohort_start_date cohort_end_date cohort_name #>                  <dbl>      <dbl> <date>            <date>          <chr>       #> 1                    1          1 2020-01-01        2020-04-01      cohort_1    #> 2                    1          1 2020-06-01        2020-08-01      cohort_1    # }"},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/addConceptIntersect.html","id":null,"dir":"Reference","previous_headings":"","what":"It creates columns to indicate overlap information between a table and a\nconcept — addConceptIntersect","title":"It creates columns to indicate overlap information between a table and a\nconcept — addConceptIntersect","text":"creates columns indicate overlap information table concept","code":""},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/addConceptIntersect.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"It creates columns to indicate overlap information between a table and a\nconcept — addConceptIntersect","text":"","code":"addConceptIntersect(   x,   conceptSet,   indexDate = \"cohort_start_date\",   censorDate = NULL,   window = list(c(0, Inf)),   targetStartDate = \"event_start_date\",   targetEndDate = \"event_end_date\",   order = \"first\",   value = c(\"flag\", \"count\", \"date\", \"days\"),   nameStyle = \"{value}_{concept_name}_{window_name}\" )"},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/addConceptIntersect.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"It creates columns to indicate overlap information between a table and a\nconcept — addConceptIntersect","text":"x Table individuals cdm. conceptSet Concept set list. indexDate Variable x contains date compute intersection. censorDate whether censor overlap events date column x window window consider events . targetStartDate Event start date use intersection. targetEndDate Event end date use intersection. order last first date use date/days calculations. value Choices c(\"value\", \"flag\", \"days\", \"date\"). nameStyle naming added column columns, include required parameters.","code":""},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/addConceptIntersect.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"It creates columns to indicate overlap information between a table and a\nconcept — addConceptIntersect","text":"table added columns overlap information","code":""},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/addConceptIntersect.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"It creates columns to indicate overlap information between a table and a\nconcept — addConceptIntersect","text":"","code":"# \\donttest{ library(PatientProfiles) cdm <- mockPatientProfiles()  concept <- dplyr::tibble(   concept_id = c(1125315),   domain_id = \"Drug\",   vocabulary_id = NA_character_,   concept_class_id = \"Ingredient\",   standard_concept = \"S\",   concept_code = NA_character_,   valid_start_date = as.Date(\"1900-01-01\"),   valid_end_date = as.Date(\"2099-01-01\"),   invalid_reason = NA_character_  ) %>%  dplyr::mutate(concept_name = paste0(\"concept: \", .data$concept_id))  cdm <- CDMConnector::insertTable(cdm, \"concept\", concept) result <- cdm$cohort1 %>%  addConceptIntersect(   conceptSet = list(\"acetaminophen\"=1125315)   ) %>%  dplyr::collect() #> Warning: `addConceptIntersect()` was deprecated in PatientProfiles 0.6.0. #> please use the specific functions instead: #> • addConceptIntersectFlag() #> • addConceptIntersectCount() #> • addConceptIntersectDate() #> • addConceptIntersectDays()  CDMConnector::cdmDisconnect(cdm = cdm)  # }"},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/addConceptIntersectCount.html","id":null,"dir":"Reference","previous_headings":"","what":"It creates column to indicate the count overlap information between a table\nand a concept — addConceptIntersectCount","title":"It creates column to indicate the count overlap information between a table\nand a concept — addConceptIntersectCount","text":"creates column indicate count overlap information table concept","code":""},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/addConceptIntersectCount.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"It creates column to indicate the count overlap information between a table\nand a concept — addConceptIntersectCount","text":"","code":"addConceptIntersectCount(   x,   conceptSet,   indexDate = \"cohort_start_date\",   censorDate = NULL,   window = list(c(0, Inf)),   targetStartDate = \"event_start_date\",   targetEndDate = \"event_end_date\",   nameStyle = \"{concept_name}_{window_name}\" )"},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/addConceptIntersectCount.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"It creates column to indicate the count overlap information between a table\nand a concept — addConceptIntersectCount","text":"x Table individuals cdm. conceptSet Concept set list. indexDate Variable x contains date compute intersection. censorDate whether censor overlap events date column x window window consider events . targetStartDate Event start date use intersection. targetEndDate Event end date use intersection. nameStyle naming added column columns, include required parameters.","code":""},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/addConceptIntersectCount.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"It creates column to indicate the count overlap information between a table\nand a concept — addConceptIntersectCount","text":"table added columns overlap information","code":""},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/addConceptIntersectCount.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"It creates column to indicate the count overlap information between a table\nand a concept — addConceptIntersectCount","text":"","code":"# \\donttest{ library(PatientProfiles) cdm <- mockPatientProfiles()  concept <- dplyr::tibble(   concept_id = c(1125315),   domain_id = \"Drug\",   vocabulary_id = NA_character_,   concept_class_id = \"Ingredient\",   standard_concept = \"S\",   concept_code = NA_character_,   valid_start_date = as.Date(\"1900-01-01\"),   valid_end_date = as.Date(\"2099-01-01\"),   invalid_reason = NA_character_  ) %>%  dplyr::mutate(concept_name = paste0(\"concept: \", .data$concept_id))  cdm <- CDMConnector::insertTable(cdm, \"concept\", concept) result <- cdm$cohort1 %>%  addConceptIntersectCount(   conceptSet = list(\"acetaminophen\"=1125315)   ) %>%  dplyr::collect()  CDMConnector::cdmDisconnect(cdm = cdm)  # }"},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/addConceptIntersectDate.html","id":null,"dir":"Reference","previous_headings":"","what":"It creates column to indicate the date overlap information between a table\nand a concept — addConceptIntersectDate","title":"It creates column to indicate the date overlap information between a table\nand a concept — addConceptIntersectDate","text":"creates column indicate date overlap information table concept","code":""},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/addConceptIntersectDate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"It creates column to indicate the date overlap information between a table\nand a concept — addConceptIntersectDate","text":"","code":"addConceptIntersectDate(   x,   conceptSet,   indexDate = \"cohort_start_date\",   censorDate = NULL,   window = list(c(0, Inf)),   targetDate = \"event_start_date\",   order = \"first\",   nameStyle = \"{concept_name}_{window_name}\" )"},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/addConceptIntersectDate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"It creates column to indicate the date overlap information between a table\nand a concept — addConceptIntersectDate","text":"x Table individuals cdm. conceptSet Concept set list. indexDate Variable x contains date compute intersection. censorDate whether censor overlap events date column x window window consider events . targetDate Event date use intersection. order last first date use date/days calculations. nameStyle naming added column columns, include required parameters.","code":""},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/addConceptIntersectDate.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"It creates column to indicate the date overlap information between a table\nand a concept — addConceptIntersectDate","text":"table added columns overlap information","code":""},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/addConceptIntersectDate.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"It creates column to indicate the date overlap information between a table\nand a concept — addConceptIntersectDate","text":"","code":"# \\donttest{ library(PatientProfiles) cdm <- mockPatientProfiles()  concept <- dplyr::tibble(   concept_id = c(1125315),   domain_id = \"Drug\",   vocabulary_id = NA_character_,   concept_class_id = \"Ingredient\",   standard_concept = \"S\",   concept_code = NA_character_,   valid_start_date = as.Date(\"1900-01-01\"),   valid_end_date = as.Date(\"2099-01-01\"),   invalid_reason = NA_character_  ) %>%  dplyr::mutate(concept_name = paste0(\"concept: \", .data$concept_id))  cdm <- CDMConnector::insertTable(cdm, \"concept\", concept) result <- cdm$cohort1 %>%  addConceptIntersectDate(   conceptSet = list(\"acetaminophen\"=1125315)   ) %>%  dplyr::collect()  CDMConnector::cdmDisconnect(cdm = cdm)  # }"},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/addConceptIntersectDays.html","id":null,"dir":"Reference","previous_headings":"","what":"It creates column to indicate the days of difference from an index date to a\nconcept — addConceptIntersectDays","title":"It creates column to indicate the days of difference from an index date to a\nconcept — addConceptIntersectDays","text":"creates column indicate days difference index date concept","code":""},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/addConceptIntersectDays.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"It creates column to indicate the days of difference from an index date to a\nconcept — addConceptIntersectDays","text":"","code":"addConceptIntersectDays(   x,   conceptSet,   indexDate = \"cohort_start_date\",   censorDate = NULL,   window = list(c(0, Inf)),   targetDate = \"event_start_date\",   order = \"first\",   nameStyle = \"{concept_name}_{window_name}\" )"},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/addConceptIntersectDays.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"It creates column to indicate the days of difference from an index date to a\nconcept — addConceptIntersectDays","text":"x Table individuals cdm. conceptSet Concept set list. indexDate Variable x contains date compute intersection. censorDate whether censor overlap events date column x window window consider events . targetDate Event date use intersection. order last first date use date/days calculations. nameStyle naming added column columns, include required parameters.","code":""},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/addConceptIntersectDays.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"It creates column to indicate the days of difference from an index date to a\nconcept — addConceptIntersectDays","text":"table added columns overlap information","code":""},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/addConceptIntersectDays.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"It creates column to indicate the days of difference from an index date to a\nconcept — addConceptIntersectDays","text":"","code":"# \\donttest{ library(PatientProfiles) cdm <- mockPatientProfiles()  concept <- dplyr::tibble(   concept_id = c(1125315),   domain_id = \"Drug\",   vocabulary_id = NA_character_,   concept_class_id = \"Ingredient\",   standard_concept = \"S\",   concept_code = NA_character_,   valid_start_date = as.Date(\"1900-01-01\"),   valid_end_date = as.Date(\"2099-01-01\"),   invalid_reason = NA_character_  ) %>%  dplyr::mutate(concept_name = paste0(\"concept: \", .data$concept_id))  cdm <- CDMConnector::insertTable(cdm, \"concept\", concept) result <- cdm$cohort1 %>%  addConceptIntersectDays(   conceptSet = list(\"acetaminophen\"=1125315)   ) %>%  dplyr::collect()  CDMConnector::cdmDisconnect(cdm = cdm)  # }"},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/addConceptIntersectFlag.html","id":null,"dir":"Reference","previous_headings":"","what":"It creates column to indicate the flag overlap information between a table\nand a concept — addConceptIntersectFlag","title":"It creates column to indicate the flag overlap information between a table\nand a concept — addConceptIntersectFlag","text":"creates column indicate flag overlap information table concept","code":""},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/addConceptIntersectFlag.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"It creates column to indicate the flag overlap information between a table\nand a concept — addConceptIntersectFlag","text":"","code":"addConceptIntersectFlag(   x,   conceptSet,   indexDate = \"cohort_start_date\",   censorDate = NULL,   window = list(c(0, Inf)),   targetStartDate = \"event_start_date\",   targetEndDate = \"event_end_date\",   nameStyle = \"{concept_name}_{window_name}\" )"},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/addConceptIntersectFlag.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"It creates column to indicate the flag overlap information between a table\nand a concept — addConceptIntersectFlag","text":"x Table individuals cdm. conceptSet Concept set list. indexDate Variable x contains date compute intersection. censorDate whether censor overlap events date column x window window consider events . targetStartDate Event start date use intersection. targetEndDate Event end date use intersection. nameStyle naming added column columns, include required parameters.","code":""},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/addConceptIntersectFlag.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"It creates column to indicate the flag overlap information between a table\nand a concept — addConceptIntersectFlag","text":"table added columns overlap information","code":""},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/addConceptIntersectFlag.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"It creates column to indicate the flag overlap information between a table\nand a concept — addConceptIntersectFlag","text":"","code":"# \\donttest{ library(PatientProfiles) cdm <- mockPatientProfiles()  concept <- dplyr::tibble(   concept_id = c(1125315),   domain_id = \"Drug\",   vocabulary_id = NA_character_,   concept_class_id = \"Ingredient\",   standard_concept = \"S\",   concept_code = NA_character_,   valid_start_date = as.Date(\"1900-01-01\"),   valid_end_date = as.Date(\"2099-01-01\"),   invalid_reason = NA_character_  ) %>%  dplyr::mutate(concept_name = paste0(\"concept: \", .data$concept_id))  cdm <- CDMConnector::insertTable(cdm, \"concept\", concept) result <- cdm$cohort1 %>%  addConceptIntersectFlag(   conceptSet = list(\"acetaminophen\"=1125315)   ) %>%  dplyr::collect()  CDMConnector::cdmDisconnect(cdm = cdm)  # }"},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/addDateOfBirth.html","id":null,"dir":"Reference","previous_headings":"","what":"Add a column with the individual birth date — addDateOfBirth","title":"Add a column with the individual birth date — addDateOfBirth","text":"Add column individual birth date","code":""},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/addDateOfBirth.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add a column with the individual birth date — addDateOfBirth","text":"","code":"addDateOfBirth(   x,   cdm = lifecycle::deprecated(),   name = \"date_of_birth\",   missingDay = 1,   missingMonth = 1,   imposeDay = FALSE,   imposeMonth = FALSE )"},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/addDateOfBirth.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add a column with the individual birth date — addDateOfBirth","text":"x Table cdm contains 'person_id' 'subject_id'. cdm cdm_reference object. name Name column added date birth. missingDay Day individuals imposed day birth. missingMonth Month individuals imposed month birth. imposeDay Whether impose day birth. imposeMonth Whether impose month birth.","code":""},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/addDateOfBirth.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add a column with the individual birth date — addDateOfBirth","text":"function returns table x extra column contains date birth.","code":""},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/addDateOfBirth.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add a column with the individual birth date — addDateOfBirth","text":"","code":"# \\donttest{ library(PatientProfiles) cdm <- mockPatientProfiles() cdm$cohort1 %>%   addDateOfBirth() #> # Source:   SQL [2 x 5] #> # Database: DuckDB v0.10.0 [unknown@Linux 6.5.0-1016-azure:R 4.3.3/:memory:] #>   cohort_definition_id subject_id cohort_start_date cohort_end_date #>                  <dbl>      <dbl> <date>            <date>          #> 1                    1          1 2020-01-01        2020-04-01      #> 2                    1          1 2020-06-01        2020-08-01      #> # ℹ 1 more variable: date_of_birth <date> CDMConnector::cdmDisconnect(cdm = cdm) # }"},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/addDemographics.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute demographic characteristics at a certain date — addDemographics","title":"Compute demographic characteristics at a certain date — addDemographics","text":"Compute demographic characteristics certain date","code":""},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/addDemographics.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute demographic characteristics at a certain date — addDemographics","text":"","code":"addDemographics(   x,   cdm = lifecycle::deprecated(),   indexDate = \"cohort_start_date\",   age = TRUE,   ageName = \"age\",   ageDefaultMonth = 1,   ageDefaultDay = 1,   ageImposeMonth = FALSE,   ageImposeDay = FALSE,   ageGroup = NULL,   missingAgeGroupValue = \"None\",   sex = TRUE,   sexName = \"sex\",   missingSexValue = \"None\",   priorObservation = TRUE,   priorObservationName = \"prior_observation\",   priorObservationType = \"days\",   futureObservation = TRUE,   futureObservationName = \"future_observation\",   futureObservationType = \"days\",   dateOfBirth = FALSE,   dateOfBirthName = \"date_of_birth\" )"},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/addDemographics.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute demographic characteristics at a certain date — addDemographics","text":"x Table individuals cdm. cdm Object contains cdm reference. Use CDMConnector obtain cdm reference. indexDate Variable x contains date compute demographics characteristics. age TRUE FALSE. TRUE, age calculated relative indexDate. ageName Age variable name. ageDefaultMonth Month year assigned individuals missing month birth. ageDefaultDay day month assigned individuals missing day birth. ageImposeMonth TRUE FALSE. Whether month date birth considered missing individuals. ageImposeDay TRUE FALSE. Whether day date birth considered missing individuals. ageGroup NULL, list ageGroup vectors. missingAgeGroupValue Value include missing age. sex TRUE FALSE. TRUE, sex identified. sexName Sex variable name. missingSexValue Value include missing sex. priorObservation TRUE FALSE. TRUE, days start current observation period indexDate calculated. priorObservationName Prior observation variable name. priorObservationType Whether return \"date\" number \"days\". futureObservation TRUE FALSE. TRUE, days indexDate end current observation period calculated. futureObservationName Future observation variable name. futureObservationType Whether return \"date\" number \"days\". dateOfBirth TRUE FALSE, true date birth return. dateOfBirthName dateOfBirth column name.","code":""},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/addDemographics.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute demographic characteristics at a certain date — addDemographics","text":"cohort table added demographic information columns.","code":""},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/addDemographics.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute demographic characteristics at a certain date — addDemographics","text":"","code":"# \\donttest{ library(PatientProfiles) cdm <- mockPatientProfiles() cdm$cohort1 %>%   addDemographics() #> # Source:   table<og_116_1711649869> [2 x 8] #> # Database: DuckDB v0.10.0 [unknown@Linux 6.5.0-1016-azure:R 4.3.3/:memory:] #>   cohort_definition_id subject_id cohort_start_date cohort_end_date   age sex    #>                  <dbl>      <dbl> <date>            <date>          <dbl> <chr>  #> 1                    1          1 2020-01-01        2020-04-01         27 Female #> 2                    1          1 2020-06-01        2020-08-01         27 Female #> # ℹ 2 more variables: prior_observation <dbl>, future_observation <dbl> CDMConnector::cdmDisconnect(cdm = cdm) # }"},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/addFutureObservation.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute the number of days till the end of the observation period at a\ncertain date — addFutureObservation","title":"Compute the number of days till the end of the observation period at a\ncertain date — addFutureObservation","text":"Compute number days till end observation period certain date","code":""},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/addFutureObservation.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute the number of days till the end of the observation period at a\ncertain date — addFutureObservation","text":"","code":"addFutureObservation(   x,   cdm = lifecycle::deprecated(),   indexDate = \"cohort_start_date\",   futureObservationName = \"future_observation\",   futureObservationType = \"days\" )"},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/addFutureObservation.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute the number of days till the end of the observation period at a\ncertain date — addFutureObservation","text":"x Table individuals cdm. cdm cdm_reference object. indexDate Variable x contains date compute future observation. futureObservationName name new column added. futureObservationType Whether return \"date\" number \"days\".","code":""},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/addFutureObservation.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute the number of days till the end of the observation period at a\ncertain date — addFutureObservation","text":"cohort table added column containing future observation individuals.","code":""},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/addFutureObservation.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute the number of days till the end of the observation period at a\ncertain date — addFutureObservation","text":"","code":"# \\donttest{ cdm <- mockPatientProfiles()  cdm$cohort1 %>%   addFutureObservation() #> # Source:   table<og_117_1711649871> [2 x 5] #> # Database: DuckDB v0.10.0 [unknown@Linux 6.5.0-1016-azure:R 4.3.3/:memory:] #>   cohort_definition_id subject_id cohort_start_date cohort_end_date #>                  <dbl>      <dbl> <date>            <date>          #> 1                    1          1 2020-01-01        2020-04-01      #> 2                    1          1 2020-06-01        2020-08-01      #> # ℹ 1 more variable: future_observation <dbl> CDMConnector::cdmDisconnect(cdm = cdm) # }"},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/addInObservation.html","id":null,"dir":"Reference","previous_headings":"","what":"Indicate if a certain record is within the observation period — addInObservation","title":"Indicate if a certain record is within the observation period — addInObservation","text":"Indicate certain record within observation period","code":""},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/addInObservation.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Indicate if a certain record is within the observation period — addInObservation","text":"","code":"addInObservation(   x,   cdm = lifecycle::deprecated(),   indexDate = \"cohort_start_date\",   window = c(0, 0),   completeInterval = FALSE,   name = lifecycle::deprecated(),   nameStyle = \"in_observation\" )"},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/addInObservation.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Indicate if a certain record is within the observation period — addInObservation","text":"x Table individuals cdm. cdm cdm_reference object. indexDate Variable x contains date compute observation flag. window window consider events . completeInterval individuals observation full window. name deprecated. nameStyle Name new columns create, must contain \"window_name\" multiple windows provided.","code":""},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/addInObservation.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Indicate if a certain record is within the observation period — addInObservation","text":"cohort table added binary column assessing inObservation.","code":""},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/addInObservation.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Indicate if a certain record is within the observation period — addInObservation","text":"","code":"# \\donttest{ cdm <- mockPatientProfiles() cdm$cohort1 %>%   addInObservation() #> # Source:   table<og_119_1711649874> [2 x 5] #> # Database: DuckDB v0.10.0 [unknown@Linux 6.5.0-1016-azure:R 4.3.3/:memory:] #>   cohort_definition_id subject_id cohort_start_date cohort_end_date #>                  <dbl>      <dbl> <date>            <date>          #> 1                    1          1 2020-01-01        2020-04-01      #> 2                    1          1 2020-06-01        2020-08-01      #> # ℹ 1 more variable: in_observation <dbl> CDMConnector::cdmDisconnect(cdm = cdm) # }"},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/addIntersect.html","id":null,"dir":"Reference","previous_headings":"","what":"It creates columns to indicate overlap information between two tables\n`r lifecycle::badge(","title":"It creates columns to indicate overlap information between two tables\n`r lifecycle::badge(","text":"creates columns indicate overlap information two tables `r lifecycle::badge(\"deprecated\")`","code":""},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/addIntersect.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"It creates columns to indicate overlap information between two tables\n`r lifecycle::badge(","text":"","code":"addIntersect(   x,   tableName,   value,   filterVariable = NULL,   filterId = NULL,   idName = NULL,   window = list(c(0, Inf)),   indexDate = \"cohort_start_date\",   censorDate = NULL,   targetStartDate = startDateColumn(tableName),   targetEndDate = endDateColumn(tableName),   order = \"first\",   nameStyle = \"{value}_{id_name}_{window_name}\" )"},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/addIntersect.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"It creates columns to indicate overlap information between two tables\n`r lifecycle::badge(","text":"x Table individuals cdm. tableName name cohort want check overlap. value value interest add: can count, flag, date time. filterVariable variable going use filter (e.g. cohort_definition_id). filterId value filterVariable interested , can vector. idName name filterId, must length filterId. window window consider events . indexDate Variable x contains date compute intersection. censorDate whether censor overlap events date column x. targetStartDate date reference cohort table, either start (overlap) (incidence). targetEndDate date reference cohort table, either end (overlap) NULL (incidence). order last first date use date/time calculations. nameStyle naming added column columns, include required parameters.","code":""},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/addIntersect.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"It creates columns to indicate overlap information between two tables\n`r lifecycle::badge(","text":"table added columns overlap information.","code":""},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/addIntersect.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"It creates columns to indicate overlap information between two tables\n`r lifecycle::badge(","text":"","code":"# \\donttest{ library(PatientProfiles)  cdm <- mockPatientProfiles() result <- cdm$cohort1 %>%   addIntersect(tableName = \"cohort2\", value = \"date\") %>%   dplyr::collect() #> Warning: `addIntersect()` was deprecated in PatientProfiles 0.7.0. CDMConnector::cdmDisconnect(cdm = cdm) # }"},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/addLargeScaleCharacteristics.html","id":null,"dir":"Reference","previous_headings":"","what":"This function is used to add columns with the large scale characteristics of\na cohort table. — addLargeScaleCharacteristics","title":"This function is used to add columns with the large scale characteristics of\na cohort table. — addLargeScaleCharacteristics","text":"function used add columns large scale characteristics cohort table.","code":""},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/addLargeScaleCharacteristics.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"This function is used to add columns with the large scale characteristics of\na cohort table. — addLargeScaleCharacteristics","text":"","code":"addLargeScaleCharacteristics(   cohort,   window = list(c(0, Inf)),   eventInWindow = NULL,   episodeInWindow = NULL,   indexDate = \"cohort_start_date\",   censorDate = NULL,   minimumFrequency = 0.005,   excludedCodes = NULL )"},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/addLargeScaleCharacteristics.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"This function is used to add columns with the large scale characteristics of\na cohort table. — addLargeScaleCharacteristics","text":"cohort cohort characterise. window Temporal windows want characterize. eventInWindow Tables characterise events window. episodeInWindow Tables characterise episodes window. indexDate Variable x contains date compute intersection. censorDate whether censor overlap events specific date column date x. minimumFrequency Minimum frequency covariates report. excludedCodes Codes excluded.","code":""},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/addLargeScaleCharacteristics.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"This function is used to add columns with the large scale characteristics of\na cohort table. — addLargeScaleCharacteristics","text":"output function cohort new created columns.","code":""},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/addLargeScaleCharacteristics.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"This function is used to add columns with the large scale characteristics of\na cohort table. — addLargeScaleCharacteristics","text":"","code":"# \\donttest{ library(PatientProfiles) cdm <- PatientProfiles::mockPatientProfiles() results <- cdm$cohort2 %>%   addLargeScaleCharacteristics(   episodeInWindow = c(\"condition_occurrence\"),   minimumFrequency = 0   ) CDMConnector::cdmDisconnect(cdm = cdm) # }"},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/addPriorObservation.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute the number of days of prior observation in the current observation period\nat a certain date — addPriorObservation","title":"Compute the number of days of prior observation in the current observation period\nat a certain date — addPriorObservation","text":"Compute number days prior observation current observation period certain date","code":""},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/addPriorObservation.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute the number of days of prior observation in the current observation period\nat a certain date — addPriorObservation","text":"","code":"addPriorObservation(   x,   cdm = lifecycle::deprecated(),   indexDate = \"cohort_start_date\",   priorObservationName = \"prior_observation\",   priorObservationType = \"days\" )"},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/addPriorObservation.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute the number of days of prior observation in the current observation period\nat a certain date — addPriorObservation","text":"x Table individuals cdm. cdm cdm_reference object. indexDate Variable x contains date compute prior observation. priorObservationName name new column added. priorObservationType Whether return \"date\" number \"days\".","code":""},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/addPriorObservation.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute the number of days of prior observation in the current observation period\nat a certain date — addPriorObservation","text":"cohort table added column containing prior observation individuals.","code":""},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/addPriorObservation.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute the number of days of prior observation in the current observation period\nat a certain date — addPriorObservation","text":"","code":"# \\donttest{ cdm <- mockPatientProfiles()  cdm$cohort1 %>%   addPriorObservation() #> # Source:   table<og_130_1711649882> [2 x 5] #> # Database: DuckDB v0.10.0 [unknown@Linux 6.5.0-1016-azure:R 4.3.3/:memory:] #>   cohort_definition_id subject_id cohort_start_date cohort_end_date #>                  <dbl>      <dbl> <date>            <date>          #> 1                    1          1 2020-01-01        2020-04-01      #> 2                    1          1 2020-06-01        2020-08-01      #> # ℹ 1 more variable: prior_observation <dbl> CDMConnector::cdmDisconnect(cdm = cdm) # }"},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/addSex.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute the sex of the individuals — addSex","title":"Compute the sex of the individuals — addSex","text":"Compute sex individuals","code":""},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/addSex.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute the sex of the individuals — addSex","text":"","code":"addSex(   x,   cdm = lifecycle::deprecated(),   sexName = \"sex\",   missingSexValue = \"None\" )"},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/addSex.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute the sex of the individuals — addSex","text":"x Table individuals cdm. cdm cdm_reference object. sexName name new column added. missingSexValue Value include missing sex.","code":""},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/addSex.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute the sex of the individuals — addSex","text":"table x added column sex information.","code":""},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/addSex.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute the sex of the individuals — addSex","text":"","code":"# \\donttest{ cdm <- mockPatientProfiles() cdm$cohort1 %>%   addSex() #> # Source:   table<og_131_1711649884> [2 x 5] #> # Database: DuckDB v0.10.0 [unknown@Linux 6.5.0-1016-azure:R 4.3.3/:memory:] #>   cohort_definition_id subject_id cohort_start_date cohort_end_date sex    #>                  <dbl>      <dbl> <date>            <date>          <chr>  #> 1                    1          1 2020-01-01        2020-04-01      Female #> 2                    1          1 2020-06-01        2020-08-01      Female CDMConnector::cdmDisconnect(cdm = cdm) # }"},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/addTableIntersect.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute the intersect with an omop table, you can compute the number of\noccurrences, a flag of presence, a certain date, the time difference and/or\nobtain a certain column. — addTableIntersect","title":"Compute the intersect with an omop table, you can compute the number of\noccurrences, a flag of presence, a certain date, the time difference and/or\nobtain a certain column. — addTableIntersect","text":"Compute intersect omop table, can compute number occurrences, flag presence, certain date, time difference /obtain certain column.","code":""},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/addTableIntersect.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute the intersect with an omop table, you can compute the number of\noccurrences, a flag of presence, a certain date, the time difference and/or\nobtain a certain column. — addTableIntersect","text":"","code":"addTableIntersect(   x,   tableName,   indexDate = \"cohort_start_date\",   censorDate = NULL,   window = list(c(0, Inf)),   order = \"first\",   targetStartDate = startDateColumn(tableName),   targetEndDate = endDateColumn(tableName),   flag = TRUE,   count = TRUE,   date = TRUE,   days = TRUE,   field = character(),   nameStyle = \"{table_name}_{value}_{window_name}\" )"},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/addTableIntersect.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute the intersect with an omop table, you can compute the number of\noccurrences, a flag of presence, a certain date, the time difference and/or\nobtain a certain column. — addTableIntersect","text":"x Table individuals cdm. tableName Name table intersect . Options: visit_occurrence, condition_occurrence, drug_exposure, procedure_occurrence, device_exposure, measurement, observation, drug_era, condition_era, specimen. indexDate Variable x contains date compute intersection. censorDate whether censor overlap events specific date column date x. window window consider events . order record considered case multiple records (required date days options). targetStartDate Column name start date comparison. targetEndDate Column name end date comparison. flag TRUE FALSE. TRUE, flag calculated intersection. count TRUE FALSE. TRUE, number counts calculated intersection. date TRUE FALSE. TRUE, date calculated intersection. days TRUE FALSE. TRUE, time difference days calculated intersection. field columns table intersect. nameStyle naming added column columns, include required parameters.","code":""},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/addTableIntersect.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute the intersect with an omop table, you can compute the number of\noccurrences, a flag of presence, a certain date, the time difference and/or\nobtain a certain column. — addTableIntersect","text":"table added columns intersect information.","code":""},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/addTableIntersect.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute the intersect with an omop table, you can compute the number of\noccurrences, a flag of presence, a certain date, the time difference and/or\nobtain a certain column. — addTableIntersect","text":"","code":"# \\donttest{ cdm <- mockPatientProfiles()  cdm$cohort1 %>%   addTableIntersect(tableName = \"visit_occurrence\") #> Warning: `addTableIntersect()` was deprecated in PatientProfiles 0.6.0. #> please use the specific functions instead: #> • addTableIntersectFlag() #> • addTableIntersectCount() #> • addTableIntersectDate() #> • addTableIntersectDays() #> # Source:   table<og_150_1711649888> [2 x 8] #> # Database: DuckDB v0.10.0 [unknown@Linux 6.5.0-1016-azure:R 4.3.3/:memory:] #>   cohort_definition_id subject_id cohort_start_date cohort_end_date #>                  <dbl>      <dbl> <date>            <date>          #> 1                    1          1 2020-01-01        2020-04-01      #> 2                    1          1 2020-06-01        2020-08-01      #> # ℹ 4 more variables: visit_occurrence_flag_0_to_inf <dbl>, #> #   visit_occurrence_count_0_to_inf <dbl>, #> #   visit_occurrence_date_0_to_inf <date>, visit_occurrence_days_0_to_inf <dbl> CDMConnector::cdmDisconnect(cdm = cdm) # }"},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/addTableIntersectCount.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute number of intersect with an omop table. — addTableIntersectCount","title":"Compute number of intersect with an omop table. — addTableIntersectCount","text":"Compute number intersect omop table.","code":""},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/addTableIntersectCount.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute number of intersect with an omop table. — addTableIntersectCount","text":"","code":"addTableIntersectCount(   x,   tableName,   indexDate = \"cohort_start_date\",   censorDate = NULL,   window = list(c(0, Inf)),   targetStartDate = startDateColumn(tableName),   targetEndDate = endDateColumn(tableName),   nameStyle = \"{table_name}_{window_name}\" )"},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/addTableIntersectCount.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute number of intersect with an omop table. — addTableIntersectCount","text":"x Table individuals cdm. tableName Name table intersect . Options: visit_occurrence, condition_occurrence, drug_exposure, procedure_occurrence, device_exposure, measurement, observation, drug_era, condition_era, specimen. indexDate Variable x contains date compute intersection. censorDate whether censor overlap events specific date column date x. window window consider events . targetStartDate Column name start date comparison. targetEndDate Column name end date comparison. nameStyle naming added column columns, include required parameters.","code":""},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/addTableIntersectCount.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute number of intersect with an omop table. — addTableIntersectCount","text":"table added columns intersect information.","code":""},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/addTableIntersectCount.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute number of intersect with an omop table. — addTableIntersectCount","text":"","code":"# \\donttest{ cdm <- mockPatientProfiles()  cdm$cohort1 %>%   addTableIntersectCount(tableName = \"visit_occurrence\") #> # Source:   table<og_161_1711649892> [2 x 5] #> # Database: DuckDB v0.10.0 [unknown@Linux 6.5.0-1016-azure:R 4.3.3/:memory:] #>   cohort_definition_id subject_id cohort_start_date cohort_end_date #>                  <dbl>      <dbl> <date>            <date>          #> 1                    1          1 2020-01-01        2020-04-01      #> 2                    1          1 2020-06-01        2020-08-01      #> # ℹ 1 more variable: visit_occurrence_0_to_inf <dbl>  CDMConnector::cdmDisconnect(cdm = cdm) # }"},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/addTableIntersectDate.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute date of intersect with an omop table. — addTableIntersectDate","title":"Compute date of intersect with an omop table. — addTableIntersectDate","text":"Compute date intersect omop table.","code":""},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/addTableIntersectDate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute date of intersect with an omop table. — addTableIntersectDate","text":"","code":"addTableIntersectDate(   x,   tableName,   indexDate = \"cohort_start_date\",   censorDate = NULL,   window = list(c(0, Inf)),   targetDate = startDateColumn(tableName),   order = \"first\",   nameStyle = \"{table_name}_{window_name}\" )"},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/addTableIntersectDate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute date of intersect with an omop table. — addTableIntersectDate","text":"x Table individuals cdm. tableName Name table intersect . Options: visit_occurrence, condition_occurrence, drug_exposure, procedure_occurrence, device_exposure, measurement, observation, drug_era, condition_era, specimen. indexDate Variable x contains date compute intersection. censorDate whether censor overlap events specific date column date x. window window consider events . targetDate Target date tableName. order record considered case multiple records (required date days options). nameStyle naming added column columns, include required parameters.","code":""},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/addTableIntersectDate.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute date of intersect with an omop table. — addTableIntersectDate","text":"table added columns intersect information.","code":""},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/addTableIntersectDate.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute date of intersect with an omop table. — addTableIntersectDate","text":"","code":"# \\donttest{ cdm <- mockPatientProfiles()  cdm$cohort1 %>%   addTableIntersectDate(tableName = \"visit_occurrence\") #> # Source:   table<og_170_1711649895> [2 x 5] #> # Database: DuckDB v0.10.0 [unknown@Linux 6.5.0-1016-azure:R 4.3.3/:memory:] #>   cohort_definition_id subject_id cohort_start_date cohort_end_date #>                  <dbl>      <dbl> <date>            <date>          #> 1                    1          1 2020-01-01        2020-04-01      #> 2                    1          1 2020-06-01        2020-08-01      #> # ℹ 1 more variable: visit_occurrence_0_to_inf <date>  CDMConnector::cdmDisconnect(cdm = cdm) # }"},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/addTableIntersectDays.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute time to intersect with an omop table. — addTableIntersectDays","title":"Compute time to intersect with an omop table. — addTableIntersectDays","text":"Compute time intersect omop table.","code":""},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/addTableIntersectDays.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute time to intersect with an omop table. — addTableIntersectDays","text":"","code":"addTableIntersectDays(   x,   tableName,   indexDate = \"cohort_start_date\",   censorDate = NULL,   window = list(c(0, Inf)),   targetDate = startDateColumn(tableName),   order = \"first\",   nameStyle = \"{table_name}_{window_name}\" )"},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/addTableIntersectDays.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute time to intersect with an omop table. — addTableIntersectDays","text":"x Table individuals cdm. tableName Name table intersect . Options: visit_occurrence, condition_occurrence, drug_exposure, procedure_occurrence, device_exposure, measurement, observation, drug_era, condition_era, specimen. indexDate Variable x contains date compute intersection. censorDate whether censor overlap events specific date column date x. window window consider events . targetDate Target date tableName. order record considered case multiple records (required date days options). nameStyle naming added column columns, include required parameters.","code":""},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/addTableIntersectDays.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute time to intersect with an omop table. — addTableIntersectDays","text":"table added columns intersect information.","code":""},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/addTableIntersectDays.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute time to intersect with an omop table. — addTableIntersectDays","text":"","code":"# \\donttest{ cdm <- mockPatientProfiles()  cdm$cohort1 %>%   addTableIntersectDays(tableName = \"visit_occurrence\") #> # Source:   table<og_179_1711649898> [2 x 5] #> # Database: DuckDB v0.10.0 [unknown@Linux 6.5.0-1016-azure:R 4.3.3/:memory:] #>   cohort_definition_id subject_id cohort_start_date cohort_end_date #>                  <dbl>      <dbl> <date>            <date>          #> 1                    1          1 2020-01-01        2020-04-01      #> 2                    1          1 2020-06-01        2020-08-01      #> # ℹ 1 more variable: visit_occurrence_0_to_inf <dbl>  CDMConnector::cdmDisconnect(cdm = cdm) # }"},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/addTableIntersectField.html","id":null,"dir":"Reference","previous_headings":"","what":"Intersecting the cohort with columns of an OMOP table of user's choice.\nIt will add an extra column to the cohort, indicating the intersected\nentries with the target columns in a window of the user's choice. — addTableIntersectField","title":"Intersecting the cohort with columns of an OMOP table of user's choice.\nIt will add an extra column to the cohort, indicating the intersected\nentries with the target columns in a window of the user's choice. — addTableIntersectField","text":"Intersecting cohort columns OMOP table user's choice. add extra column cohort, indicating intersected entries target columns window user's choice.","code":""},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/addTableIntersectField.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Intersecting the cohort with columns of an OMOP table of user's choice.\nIt will add an extra column to the cohort, indicating the intersected\nentries with the target columns in a window of the user's choice. — addTableIntersectField","text":"","code":"addTableIntersectField(   x,   tableName,   field,   indexDate = \"cohort_start_date\",   censorDate = NULL,   window = list(c(0, Inf)),   targetDate = startDateColumn(tableName),   order = \"first\",   nameStyle = \"{table_name}_{extra_value}_{window_name}\" )"},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/addTableIntersectField.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Intersecting the cohort with columns of an OMOP table of user's choice.\nIt will add an extra column to the cohort, indicating the intersected\nentries with the target columns in a window of the user's choice. — addTableIntersectField","text":"x Table individuals cdm. tableName Name table intersect . Options: visit_occurrence, condition_occurrence, drug_exposure, procedure_occurrence, device_exposure, measurement, observation, drug_era, condition_era, specimen. field columns table tableName intersect . example, user uses visit_occurrence tableName field possible options include visit_occurrence_id, visit_concept_id, visit_type_concept_id. indexDate Variable x contains date compute intersection. censorDate whether censor overlap events specific date column date x. window window consider events intersecting chosen column. targetDate dates target columns tableName user may want restrict . order record considered case multiple records (required date days options). nameStyle naming added column columns, include required parameters.","code":""},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/addTableIntersectField.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Intersecting the cohort with columns of an OMOP table of user's choice.\nIt will add an extra column to the cohort, indicating the intersected\nentries with the target columns in a window of the user's choice. — addTableIntersectField","text":"table added columns intersect information.","code":""},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/addTableIntersectField.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Intersecting the cohort with columns of an OMOP table of user's choice.\nIt will add an extra column to the cohort, indicating the intersected\nentries with the target columns in a window of the user's choice. — addTableIntersectField","text":"","code":"# \\donttest{ cdm <- mockPatientProfiles() cdm$cohort1 %>%   addTableIntersectField(    tableName = \"visit_occurrence\",    field = \"visit_concept_id\",    order = \"last\",    window = c(-Inf, -1) ) #> # Source:   table<og_186_1711649901> [2 x 5] #> # Database: DuckDB v0.10.0 [unknown@Linux 6.5.0-1016-azure:R 4.3.3/:memory:] #>   cohort_definition_id subject_id cohort_start_date cohort_end_date #>                  <dbl>      <dbl> <date>            <date>          #> 1                    1          1 2020-01-01        2020-04-01      #> 2                    1          1 2020-06-01        2020-08-01      #> # ℹ 1 more variable: visit_occurrence_visit_concept_id_minf_to_m1 <chr> CDMConnector::cdmDisconnect(cdm = cdm) # }"},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/addTableIntersectFlag.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute a flag intersect with an omop table. — addTableIntersectFlag","title":"Compute a flag intersect with an omop table. — addTableIntersectFlag","text":"Compute flag intersect omop table.","code":""},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/addTableIntersectFlag.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute a flag intersect with an omop table. — addTableIntersectFlag","text":"","code":"addTableIntersectFlag(   x,   tableName,   indexDate = \"cohort_start_date\",   censorDate = NULL,   window = list(c(0, Inf)),   targetStartDate = startDateColumn(tableName),   targetEndDate = endDateColumn(tableName),   nameStyle = \"{table_name}_{window_name}\" )"},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/addTableIntersectFlag.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute a flag intersect with an omop table. — addTableIntersectFlag","text":"x Table individuals cdm. tableName Name table intersect . Options: visit_occurrence, condition_occurrence, drug_exposure, procedure_occurrence, device_exposure, measurement, observation, drug_era, condition_era, specimen. indexDate Variable x contains date compute intersection. censorDate whether censor overlap events specific date column date x. window window consider events . targetStartDate Column name start date comparison. targetEndDate Column name end date comparison. nameStyle naming added column columns, include required parameters.","code":""},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/addTableIntersectFlag.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute a flag intersect with an omop table. — addTableIntersectFlag","text":"table added columns intersect information.","code":""},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/addTableIntersectFlag.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute a flag intersect with an omop table. — addTableIntersectFlag","text":"","code":"# \\donttest{ cdm <- mockPatientProfiles()  cdm$cohort1 %>%   addTableIntersectFlag(tableName = \"visit_occurrence\") #> # Source:   table<og_197_1711649905> [2 x 5] #> # Database: DuckDB v0.10.0 [unknown@Linux 6.5.0-1016-azure:R 4.3.3/:memory:] #>   cohort_definition_id subject_id cohort_start_date cohort_end_date #>                  <dbl>      <dbl> <date>            <date>          #> 1                    1          1 2020-01-01        2020-04-01      #> 2                    1          1 2020-06-01        2020-08-01      #> # ℹ 1 more variable: visit_occurrence_0_to_inf <dbl> CDMConnector::cdmDisconnect(cdm = cdm) # }"},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/assertNameStyle.html","id":null,"dir":"Reference","previous_headings":"","what":"Assert whether a nameStyle contains the needed information. — assertNameStyle","title":"Assert whether a nameStyle contains the needed information. — assertNameStyle","text":"Assert whether nameStyle contains needed information.","code":""},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/assertNameStyle.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Assert whether a nameStyle contains the needed information. — assertNameStyle","text":"","code":"assertNameStyle(nameStyle, values = list(), call = parent.frame())"},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/assertNameStyle.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Assert whether a nameStyle contains the needed information. — assertNameStyle","text":"nameStyle nameStyle object check. values Parameters options must contained. call environment cli functions.","code":""},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/assertNameStyle.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Assert whether a nameStyle contains the needed information. — assertNameStyle","text":"error nameStyle properly formatted.","code":""},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/assertNameStyle.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Assert whether a nameStyle contains the needed information. — assertNameStyle","text":"","code":"if (FALSE) { assertNameStyle(\"my_name\", values = list(   \"variable1\" = 1, \"variable2\" = c(\"a\", \"b\", \"c\") ))  assertNameStyle(\"my_name_{variable2}\", values = list(   \"variable1\" = 1, \"variable2\" = c(\"a\", \"b\", \"c\") ))  assertNameStyle(\"my_name_{variable2}\", values = list(   \"variable1\" = c(1, 2), \"variable2\" = c(\"a\", \"b\", \"c\") ))  assertNameStyle(\"my_name_{variable1}_{variable2}\", values = list(   \"variable1\" = c(1, 2), \"variable2\" = c(\"a\", \"b\", \"c\") )) }"},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/availableEstimates.html","id":null,"dir":"Reference","previous_headings":"","what":"Show the available estimates that can be used for the different variable_type\nsupported. — availableEstimates","title":"Show the available estimates that can be used for the different variable_type\nsupported. — availableEstimates","text":"Show available estimates can used different variable_type supported.","code":""},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/availableEstimates.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Show the available estimates that can be used for the different variable_type\nsupported. — availableEstimates","text":"","code":"availableEstimates(variableType = NULL, fullQuantiles = FALSE)"},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/availableEstimates.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Show the available estimates that can be used for the different variable_type\nsupported. — availableEstimates","text":"variableType set variable types. fullQuantiles Whether display exact quantiles can computed qXX summarise .","code":""},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/availableEstimates.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Show the available estimates that can be used for the different variable_type\nsupported. — availableEstimates","text":"tibble available estimates.","code":""},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/availableEstimates.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Show the available estimates that can be used for the different variable_type\nsupported. — availableEstimates","text":"","code":"# \\donttest{ library(PatientProfiles)  availableEstimates() #> # A tibble: 32 × 4 #>    variable_type estimate_name      estimate_description           estimate_type #>    <chr>         <chr>              <chr>                          <chr>         #>  1 date          mean               mean of the variable of inter… date          #>  2 date          sd                 standard deviation of the var… date          #>  3 date          median             median of the variable of int… date          #>  4 date          qXX                qualtile of XX% the variable … date          #>  5 date          min                minimum of the variable of in… date          #>  6 date          max                maximum of the variable of in… date          #>  7 date          count_missing      number of missing values.      integer       #>  8 date          percentage_missing percentage of missing values   percentage    #>  9 numeric       mean               mean of the variable of inter… numeric       #> 10 numeric       sd                 standard deviation of the var… numeric       #> # ℹ 22 more rows availableEstimates(\"numeric\") #> # A tibble: 10 × 4 #>    variable_type estimate_name      estimate_description           estimate_type #>    <chr>         <chr>              <chr>                          <chr>         #>  1 numeric       mean               mean of the variable of inter… numeric       #>  2 numeric       sd                 standard deviation of the var… numeric       #>  3 numeric       median             median of the variable of int… numeric       #>  4 numeric       qXX                qualtile of XX% the variable … numeric       #>  5 numeric       min                minimum of the variable of in… numeric       #>  6 numeric       max                maximum of the variable of in… numeric       #>  7 numeric       count_missing      number of missing values.      integer       #>  8 numeric       percentage_missing percentage of missing values   percentage    #>  9 numeric       count              count number of `1`.           integer       #> 10 numeric       percentage         percentage of occurrences of … percentage    availableEstimates(c(\"numeric\", \"categorical\")) #> # A tibble: 12 × 4 #>    variable_type estimate_name      estimate_description           estimate_type #>    <chr>         <chr>              <chr>                          <chr>         #>  1 numeric       mean               mean of the variable of inter… numeric       #>  2 numeric       sd                 standard deviation of the var… numeric       #>  3 numeric       median             median of the variable of int… numeric       #>  4 numeric       qXX                qualtile of XX% the variable … numeric       #>  5 numeric       min                minimum of the variable of in… numeric       #>  6 numeric       max                maximum of the variable of in… numeric       #>  7 numeric       count_missing      number of missing values.      integer       #>  8 numeric       percentage_missing percentage of missing values   percentage    #>  9 numeric       count              count number of `1`.           integer       #> 10 numeric       percentage         percentage of occurrences of … percentage    #> 11 categorical   count              number of times that each cat… integer       #> 12 categorical   percentage         percentage of individuals wit… percentage    # }"},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/availableFunctions.html","id":null,"dir":"Reference","previous_headings":"","what":"Show the available functions for the 4 classifications of data that are\nsupported (numeric, date, binary and categorical) — availableFunctions","title":"Show the available functions for the 4 classifications of data that are\nsupported (numeric, date, binary and categorical) — availableFunctions","text":"Show available functions 4 classifications data supported (numeric, date, binary categorical)","code":""},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/availableFunctions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Show the available functions for the 4 classifications of data that are\nsupported (numeric, date, binary and categorical) — availableFunctions","text":"","code":"availableFunctions(variableType = NULL)"},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/availableFunctions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Show the available functions for the 4 classifications of data that are\nsupported (numeric, date, binary and categorical) — availableFunctions","text":"variableType choice : \"numeric\", \"date\", \"binary\" \"categorical\".","code":""},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/availableFunctions.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Show the available functions for the 4 classifications of data that are\nsupported (numeric, date, binary and categorical) — availableFunctions","text":"tibble available functions certain variable classification (NULL).","code":""},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/availableFunctions.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Show the available functions for the 4 classifications of data that are\nsupported (numeric, date, binary and categorical) — availableFunctions","text":"","code":"# \\donttest{ library(PatientProfiles)  availableFunctions() #> Warning: `availableFunctions()` was deprecated in PatientProfiles 0.7.0. #> ℹ Please use `availableEstimates()` instead. #> # A tibble: 102 × 4 #>    variable_type format_key applied_function                              result #>    <chr>         <chr>      <chr>                                         <chr>  #>  1 numeric       mean       mean of the variable of interest.             numer… #>  2 numeric       sd         standard deviation of the variable of intere… numer… #>  3 numeric       median     median of the variable of interest.           numer… #>  4 numeric       q05        qualtile of 05% the variable of interest.     numer… #>  5 numeric       q10        qualtile of 10% the variable of interest.     numer… #>  6 numeric       q15        qualtile of 15% the variable of interest.     numer… #>  7 numeric       q20        qualtile of 20% the variable of interest.     numer… #>  8 numeric       q25        qualtile of 25% the variable of interest.     numer… #>  9 numeric       q30        qualtile of 30% the variable of interest.     numer… #> 10 numeric       q35        qualtile of 35% the variable of interest.     numer… #> # ℹ 92 more rows availableFunctions(\"numeric\") #> # A tibble: 25 × 3 #>    format_key applied_function                                result  #>    <chr>      <chr>                                           <chr>   #>  1 mean       mean of the variable of interest.               numeric #>  2 sd         standard deviation of the variable of interest. numeric #>  3 median     median of the variable of interest.             numeric #>  4 q05        qualtile of 05% the variable of interest.       numeric #>  5 q10        qualtile of 10% the variable of interest.       numeric #>  6 q15        qualtile of 15% the variable of interest.       numeric #>  7 q20        qualtile of 20% the variable of interest.       numeric #>  8 q25        qualtile of 25% the variable of interest.       numeric #>  9 q30        qualtile of 30% the variable of interest.       numeric #> 10 q35        qualtile of 35% the variable of interest.       numeric #> # ℹ 15 more rows availableFunctions(\"integer\") #> # A tibble: 0 × 3 #> # ℹ 3 variables: format_key <chr>, applied_function <chr>, result <chr> availableFunctions(\"date\") #> # A tibble: 24 × 3 #>    format_key applied_function                            result  #>    <chr>      <chr>                                       <chr>   #>  1 mean       mean of the date of interest.               date    #>  2 sd         standard deviation of the date of interest. numeric #>  3 median     median of the date of interest.             date    #>  4 q05        qualtile of 05% the variable of interest.   date    #>  5 q10        qualtile of 10% the variable of interest.   date    #>  6 q15        qualtile of 15% the variable of interest.   date    #>  7 q20        qualtile of 20% the variable of interest.   date    #>  8 q25        qualtile of 25% the variable of interest.   date    #>  9 q30        qualtile of 30% the variable of interest.   date    #> 10 q35        qualtile of 35% the variable of interest.   date    #> # ℹ 14 more rows availableFunctions(\"categorical\") #> # A tibble: 26 × 3 #>    format_key          applied_function                                   result #>    <chr>               <chr>                                              <chr>  #>  1 count               number of times that each category is observed.    numer… #>  2 percentage          percentage of records with that category           numer… #>  3 distinct_categories number of distinct categories                      numer… #>  4 mean                mean number of records per category                numer… #>  5 sd                  standard deviation of the number of records per c… numer… #>  6 median              median number of records per category              numer… #>  7 q05                 qualtile of 05% the variable of interest.          numer… #>  8 q10                 qualtile of 10% the variable of interest.          numer… #>  9 q15                 qualtile of 15% the variable of interest.          numer… #> 10 q20                 qualtile of 20% the variable of interest.          numer… #> # ℹ 16 more rows availableFunctions(\"logical\") #> # A tibble: 0 × 3 #> # ℹ 3 variables: format_key <chr>, applied_function <chr>, result <chr> # }"},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/endDateColumn.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the name of the end date column for a certain table in the cdm — endDateColumn","title":"Get the name of the end date column for a certain table in the cdm — endDateColumn","text":"Get name end date column certain table cdm","code":""},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/endDateColumn.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the name of the end date column for a certain table in the cdm — endDateColumn","text":"","code":"endDateColumn(tableName)"},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/endDateColumn.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get the name of the end date column for a certain table in the cdm — endDateColumn","text":"tableName Name table.","code":""},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/endDateColumn.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the name of the end date column for a certain table in the cdm — endDateColumn","text":"Name end date column table.","code":""},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/endDateColumn.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get the name of the end date column for a certain table in the cdm — endDateColumn","text":"","code":"# \\donttest{ library(PatientProfiles) endDateColumn(\"condition_occurrence\") #> [1] \"condition_end_date\" # }"},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/formatCharacteristics.html","id":null,"dir":"Reference","previous_headings":"","what":"Format a summarised_characteristics object into a visual table. — formatCharacteristics","title":"Format a summarised_characteristics object into a visual table. — formatCharacteristics","text":"`r lifecycle::badge(\"deprecated\")`","code":""},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/formatCharacteristics.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Format a summarised_characteristics object into a visual table. — formatCharacteristics","text":"","code":"formatCharacteristics(   result,   type = \"gt\",   splitStrata = TRUE,   format = c(`N (%)` = \"<count> (<percentage>%)\", N = \"<count>\",     \"<median> [<q25> - <q75>]\", \"<mean> (<sd>)\", range = \"<min> to <max>\"),   cdmName = TRUE,   cohortName = TRUE,   style = \"default\",   minCellCount = 5,   .options = list() )"},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/formatCharacteristics.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Format a summarised_characteristics object into a visual table. — formatCharacteristics","text":"result summarised_characteristics object. type Type desired formatted table, possibilities: \"gt\", \"flextable\", \"tibble\". splitStrata Whether split strata, deault True. format columns user wishes see formatted table. cdmName Whether display cdm name, default TRUE. cohortName Weather display cohort name, default TRUE. style style table output. minCellCount Default 5, meaing results 0 less 5 reported. .options See optionsTableCharacteristics() default values.","code":""},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/formatCharacteristics.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Format a summarised_characteristics object into a visual table. — formatCharacteristics","text":"tibble tidy version summarised_characteristics object.","code":""},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/formatCharacteristics.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Format a summarised_characteristics object into a visual table. — formatCharacteristics","text":"","code":"# \\donttest{ library(PatientProfiles)  cdm <- mockPatientProfiles()  cdm$cohort1 |>   summariseCharacteristics() #> ℹ adding demographics columns #> ℹ summarising data #> ✔ summariseCharacteristics finished! #> # A tibble: 45 × 16 #>    result_id cdm_name result_type        package_name package_version group_name #>        <int> <chr>    <chr>              <chr>        <chr>           <chr>      #>  1         1 PP_MOCK  summarised_charac… PatientProf… 0.7.0           cohort_na… #>  2         1 PP_MOCK  summarised_charac… PatientProf… 0.7.0           cohort_na… #>  3         1 PP_MOCK  summarised_charac… PatientProf… 0.7.0           cohort_na… #>  4         1 PP_MOCK  summarised_charac… PatientProf… 0.7.0           cohort_na… #>  5         1 PP_MOCK  summarised_charac… PatientProf… 0.7.0           cohort_na… #>  6         1 PP_MOCK  summarised_charac… PatientProf… 0.7.0           cohort_na… #>  7         1 PP_MOCK  summarised_charac… PatientProf… 0.7.0           cohort_na… #>  8         1 PP_MOCK  summarised_charac… PatientProf… 0.7.0           cohort_na… #>  9         1 PP_MOCK  summarised_charac… PatientProf… 0.7.0           cohort_na… #> 10         1 PP_MOCK  summarised_charac… PatientProf… 0.7.0           cohort_na… #> # ℹ 35 more rows #> # ℹ 10 more variables: group_level <chr>, strata_name <chr>, #> #   strata_level <chr>, variable_name <chr>, variable_level <chr>, #> #   estimate_name <chr>, estimate_type <chr>, estimate_value <chr>, #> #   additional_name <chr>, additional_level <chr>  CDMConnector::cdmDisconnect(cdm = cdm) # }"},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/gtCharacteristics.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a gt table from a summarisedCharacteristics object. — gtCharacteristics","title":"Create a gt table from a summarisedCharacteristics object. — gtCharacteristics","text":"`r lifecycle::badge(\"deprecated\")`","code":""},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/gtCharacteristics.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a gt table from a summarisedCharacteristics object. — gtCharacteristics","text":"","code":"gtCharacteristics(   summarisedCharacteristics,   pivotWide = c(\"CDM Name\", \"Group\", \"Strata\"),   format = c(`N (%)` = \"count (percentage%)\", \"median [min; q25 - q75; max]\",     \"mean (sd)\", \"median [q25 - q75]\", N = \"count\"),   keepNotFormatted = TRUE,   decimals = c(default = 0),   decimalMark = \".\",   bigMark = \",\" )"},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/gtCharacteristics.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a gt table from a summarisedCharacteristics object. — gtCharacteristics","text":"summarisedCharacteristics Summary characteristics long table. pivotWide variables pivot wide. format formats labels use. keepNotFormatted Whether keep formatted estimate types. decimals Decimals per estimate_type. decimalMark decimal mark. bigMark big mark.","code":""},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/gtCharacteristics.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a gt table from a summarisedCharacteristics object. — gtCharacteristics","text":"New table gt format.","code":""},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/gtCharacteristics.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a gt table from a summarisedCharacteristics object. — gtCharacteristics","text":"","code":"# \\donttest{ library(PatientProfiles)  cdm <- mockPatientProfiles()  summariseCharacteristics(   cohort = cdm$cohort1,   ageGroup = list(c(0, 19), c(20, 39), c(40, 59), c(60, 79), c(80, 150)),   tableIntersect = list(     \"Visits\" = list(       tableName = \"visit_occurrence\", value = \"count\", window = c(-365, 0)     )   ),   cohortIntersect = list(     \"Medications\" = list(       targetCohortTable = \"cohort2\", value = \"flag\", window = c(-365, 0)     )   ) ) #> ℹ adding demographics columns #> ℹ adding table intersect columns for table: visit_occurrence #> ℹ adding cohort intersect columns for table: cohort2 #> ℹ summarising data #> ✔ summariseCharacteristics finished! #> # A tibble: 60 × 16 #>    result_id cdm_name result_type        package_name package_version group_name #>        <int> <chr>    <chr>              <chr>        <chr>           <chr>      #>  1         1 PP_MOCK  summarised_charac… PatientProf… 0.7.0           cohort_na… #>  2         1 PP_MOCK  summarised_charac… PatientProf… 0.7.0           cohort_na… #>  3         1 PP_MOCK  summarised_charac… PatientProf… 0.7.0           cohort_na… #>  4         1 PP_MOCK  summarised_charac… PatientProf… 0.7.0           cohort_na… #>  5         1 PP_MOCK  summarised_charac… PatientProf… 0.7.0           cohort_na… #>  6         1 PP_MOCK  summarised_charac… PatientProf… 0.7.0           cohort_na… #>  7         1 PP_MOCK  summarised_charac… PatientProf… 0.7.0           cohort_na… #>  8         1 PP_MOCK  summarised_charac… PatientProf… 0.7.0           cohort_na… #>  9         1 PP_MOCK  summarised_charac… PatientProf… 0.7.0           cohort_na… #> 10         1 PP_MOCK  summarised_charac… PatientProf… 0.7.0           cohort_na… #> # ℹ 50 more rows #> # ℹ 10 more variables: group_level <chr>, strata_name <chr>, #> #   strata_level <chr>, variable_name <chr>, variable_level <chr>, #> #   estimate_name <chr>, estimate_type <chr>, estimate_value <chr>, #> #   additional_name <chr>, additional_level <chr> CDMConnector::cdmDisconnect(cdm = cdm) # }"},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/gtResult.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a gt table from a summary object. — gtResult","title":"Create a gt table from a summary object. — gtResult","text":"`r lifecycle::badge(\"deprecated\")`","code":""},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/gtResult.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a gt table from a summary object. — gtResult","text":"","code":"gtResult(   summarisedResult,   long,   wide,   format = c(`N (%)` = \"count (percentage%)\", \"median [min; q25 - q75; max]\",     \"mean (sd)\", \"median [q25 - q75]\", N = \"count\"),   keepNotFormatted = TRUE,   decimals = c(default = 0),   decimalMark = \".\",   bigMark = \",\" )"},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/gtResult.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a gt table from a summary object. — gtResult","text":"summarisedResult SummarisedResult object. long List variables specification long. wide List variables specification wide. format formats labels use. keepNotFormatted Whether keep formatted estimate types. decimals Decimals per estimate_type. decimalMark decimal mark. bigMark big mark.","code":""},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/gtResult.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a gt table from a summary object. — gtResult","text":"formatted summarisedResult gt object.","code":""},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/gtResult.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a gt table from a summary object. — gtResult","text":"","code":"# \\donttest{ library(PatientProfiles)  cdm <- mockPatientProfiles()  cdm$cohort1 %>%   summariseCharacteristics(     ageGroup = list(c(0, 19), c(20, 39), c(40, 59), c(60, 79), c(80, 150))   ) #> ℹ adding demographics columns #> ℹ summarising data #> ✔ summariseCharacteristics finished! #> # A tibble: 47 × 16 #>    result_id cdm_name result_type        package_name package_version group_name #>        <int> <chr>    <chr>              <chr>        <chr>           <chr>      #>  1         1 PP_MOCK  summarised_charac… PatientProf… 0.7.0           cohort_na… #>  2         1 PP_MOCK  summarised_charac… PatientProf… 0.7.0           cohort_na… #>  3         1 PP_MOCK  summarised_charac… PatientProf… 0.7.0           cohort_na… #>  4         1 PP_MOCK  summarised_charac… PatientProf… 0.7.0           cohort_na… #>  5         1 PP_MOCK  summarised_charac… PatientProf… 0.7.0           cohort_na… #>  6         1 PP_MOCK  summarised_charac… PatientProf… 0.7.0           cohort_na… #>  7         1 PP_MOCK  summarised_charac… PatientProf… 0.7.0           cohort_na… #>  8         1 PP_MOCK  summarised_charac… PatientProf… 0.7.0           cohort_na… #>  9         1 PP_MOCK  summarised_charac… PatientProf… 0.7.0           cohort_na… #> 10         1 PP_MOCK  summarised_charac… PatientProf… 0.7.0           cohort_na… #> # ℹ 37 more rows #> # ℹ 10 more variables: group_level <chr>, strata_name <chr>, #> #   strata_level <chr>, variable_name <chr>, variable_level <chr>, #> #   estimate_name <chr>, estimate_type <chr>, estimate_value <chr>, #> #   additional_name <chr>, additional_level <chr> CDMConnector::cdmDisconnect(cdm = cdm) # }"},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/mockPatientProfiles.html","id":null,"dir":"Reference","previous_headings":"","what":"It creates a mock database for testing PatientProfiles package — mockPatientProfiles","title":"It creates a mock database for testing PatientProfiles package — mockPatientProfiles","text":"creates mock database testing PatientProfiles package","code":""},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/mockPatientProfiles.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"It creates a mock database for testing PatientProfiles package — mockPatientProfiles","text":"","code":"mockPatientProfiles(   connectionDetails = list(con = DBI::dbConnect(duckdb::duckdb(), \":memory:\"),     write_schema = \"main\", mock_prefix = NULL),   drug_exposure = NULL,   drug_strength = NULL,   observation_period = NULL,   condition_occurrence = NULL,   visit_occurrence = NULL,   concept_ancestor = NULL,   person = NULL,   cohort1 = NULL,   cohort2 = NULL,   drug_concept_id_size = 5,   ancestor_concept_id_size = 5,   condition_concept_id_size = 5,   visit_concept_id_size = 5,   visit_occurrence_id_size = 5,   ingredient_concept_id_size = 1,   drug_exposure_size = 10,   patient_size = 1,   min_drug_exposure_start_date = \"2000-01-01\",   max_drug_exposure_start_date = \"2020-01-01\",   earliest_date_of_birth = NULL,   latest_date_of_birth = NULL,   earliest_observation_start_date = NULL,   latest_observation_start_date = NULL,   min_days_to_observation_end = NULL,   max_days_to_observation_end = NULL,   earliest_condition_start_date = NULL,   latest_condition_start_date = NULL,   min_days_to_condition_end = NULL,   max_days_to_condition_end = NULL,   earliest_visit_start_date = NULL,   latest_visit_start_date = NULL,   min_days_to_visit_end = NULL,   max_days_to_visit_end = NULL,   seed = 1,   ... )"},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/mockPatientProfiles.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"It creates a mock database for testing PatientProfiles package — mockPatientProfiles","text":"connectionDetails Connection details create cdm mock object. drug_exposure default null user can define table. drug_strength default null user can define table. observation_period default null user can define table. condition_occurrence default null user can define table. visit_occurrence default null user can define visit_occurrence table. concept_ancestor concept ancestor table. person default null user can define table. cohort1 cohort table test run getindication. cohort2 cohort table test run getindication. drug_concept_id_size number unique drug concept id. ancestor_concept_id_size size concept ancestor table. condition_concept_id_size number unique row condition concept table. visit_concept_id_size number unique visit concept id. visit_occurrence_id_size number unique visit occurrence id. ingredient_concept_id_size number unique drug ingredient concept id. drug_exposure_size number unique drug exposure. patient_size number unique patient. min_drug_exposure_start_date user define minimum drug exposure start date. max_drug_exposure_start_date user define maximum drug exposure start date. earliest_date_of_birth earliest date birth patient person table format \"dd-mm-yyyy\". latest_date_of_birth latest date birth patient person table format \"dd-mm-yyyy\". earliest_observation_start_date earliest observation start date patient format \"dd-mm-yyyy\". latest_observation_start_date latest observation start date patient format \"dd-mm-yyyy\". min_days_to_observation_end minimum number days observational integer. max_days_to_observation_end maximum number days observation period integer. earliest_condition_start_date earliest condition start date patient format \"dd-mm-yyyy\". latest_condition_start_date latest condition start date patient format \"dd-mm-yyyy\". min_days_to_condition_end minimum number days condition integer. max_days_to_condition_end maximum number days condition integer. earliest_visit_start_date earliest visit start date patient format \"dd-mm-yyyy\". latest_visit_start_date latest visit start date patient format \"dd-mm-yyyy\". min_days_to_visit_end minimum number days visit integer. max_days_to_visit_end maximum number days visit integer. seed seed. ... user self defined tibble table put cdm, can input many user want.","code":""},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/mockPatientProfiles.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"It creates a mock database for testing PatientProfiles package — mockPatientProfiles","text":"cdm mock database following user's specifications.","code":""},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/mockPatientProfiles.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"It creates a mock database for testing PatientProfiles package — mockPatientProfiles","text":"","code":"# \\donttest{ library(PatientProfiles) cdm <- mockPatientProfiles() CDMConnector::cdmDisconnect(cdm = cdm) # }"},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/optionsTableCharacteristics.html","id":null,"dir":"Reference","previous_headings":"","what":"Additional arguments for the function tableCharacteristics. — optionsTableCharacteristics","title":"Additional arguments for the function tableCharacteristics. — optionsTableCharacteristics","text":"provides list allowed inputs .option argument tableCharacteristics, given default values.","code":""},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/optionsTableCharacteristics.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Additional arguments for the function tableCharacteristics. — optionsTableCharacteristics","text":"","code":"optionsTableCharacteristics()"},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/optionsTableCharacteristics.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Additional arguments for the function tableCharacteristics. — optionsTableCharacteristics","text":"default .options named list.","code":""},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/optionsTableCharacteristics.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Additional arguments for the function tableCharacteristics. — optionsTableCharacteristics","text":"","code":"{ optionsTableCharacteristics() } #> $decimals #>    integer    numeric percentage proportion  #>          0          2          1          3  #>  #> $decimalMark #> [1] \".\" #>  #> $bigMark #> [1] \",\" #>  #> $keepNotFormatted #> [1] TRUE #>  #> $useFormatOrder #> [1] TRUE #>  #> $delim #> [1] \"\\n\" #>  #> $style #> [1] \"default\" #>  #> $na #> [1] \"-\" #>  #> $title #> NULL #>  #> $subtitle #> NULL #>  #> $caption #> NULL #>  #> $groupNameAsColumn #> [1] FALSE #>  #> $groupOrder #> NULL #>  #> $colsToMergeRows #> [1] \"all_columns\" #>"},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/optionsTableCohortOverlap.html","id":null,"dir":"Reference","previous_headings":"","what":"Additional arguments for the function tableCohortOverlap. — optionsTableCohortOverlap","title":"Additional arguments for the function tableCohortOverlap. — optionsTableCohortOverlap","text":"provides list allowed inputs .option argument tableCohortOverlap given default value.","code":""},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/optionsTableCohortOverlap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Additional arguments for the function tableCohortOverlap. — optionsTableCohortOverlap","text":"","code":"optionsTableCohortOverlap()"},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/optionsTableCohortOverlap.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Additional arguments for the function tableCohortOverlap. — optionsTableCohortOverlap","text":"default .options named list.","code":""},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/optionsTableCohortOverlap.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Additional arguments for the function tableCohortOverlap. — optionsTableCohortOverlap","text":"","code":"{ optionsTableCohortOverlap() } #> $uniqueCombinations #> [1] TRUE #>  #> [[2]] #>    integer percentage    numeric proportion  #>          0          2          2          2  #>  #> $decimalMark #> [1] \".\" #>  #> $bigMark #> [1] \",\" #>  #> $style #> [1] \"default\" #>  #> $na #> [1] \"-\" #>  #> $title #> NULL #>  #> $subtitle #> NULL #>  #> $caption #> NULL #>  #> $groupNameCol #> NULL #>  #> $groupNameAsColumn #> [1] FALSE #>  #> $groupOrder #> NULL #>  #> $colsToMergeRows #> [1] \"all_columns\" #>"},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/optionsTableCohortTiming.html","id":null,"dir":"Reference","previous_headings":"","what":"Additional arguments for the function tableCohortTiming. — optionsTableCohortTiming","title":"Additional arguments for the function tableCohortTiming. — optionsTableCohortTiming","text":"provides list allowed inputs .option argument tableCohortTiming given default value.","code":""},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/optionsTableCohortTiming.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Additional arguments for the function tableCohortTiming. — optionsTableCohortTiming","text":"","code":"optionsTableCohortTiming()"},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/optionsTableCohortTiming.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Additional arguments for the function tableCohortTiming. — optionsTableCohortTiming","text":"default .options named list.","code":""},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/optionsTableCohortTiming.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Additional arguments for the function tableCohortTiming. — optionsTableCohortTiming","text":"","code":"{ optionsTableCohortTiming() } #> $uniqueCombinations #> [1] TRUE #>  #> $decimals #>    integer percentage    numeric proportion  #>          0          2          2          2  #>  #> $decimalMark #> [1] \".\" #>  #> $bigMark #> [1] \",\" #>  #> $keepNotFormatted #> [1] TRUE #>  #> $useFormatOrder #> [1] TRUE #>  #> $delim #> [1] \"\\n\" #>  #> $includeHeaderKey #> [1] TRUE #>  #> $style #> [1] \"default\" #>  #> $na #> [1] \"-\" #>  #> $title #> NULL #>  #> $subtitle #> NULL #>  #> $caption #> NULL #>  #> $groupNameAsColumn #> [1] FALSE #>  #> $groupOrder #> NULL #>  #> $colsToMergeRows #> [1] \"all_columns\" #>"},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/pipe.html","id":null,"dir":"Reference","previous_headings":"","what":"Pipe operator — %>%","title":"Pipe operator — %>%","text":"See magrittr::%>% details.","code":""},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/pipe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pipe operator — %>%","text":"","code":"lhs %>% rhs"},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/pipe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pipe operator — %>%","text":"lhs value magrittr placeholder. rhs function call using magrittr semantics.","code":""},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/pipe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pipe operator — %>%","text":"result calling `rhs(lhs)`.","code":""},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/plotCharacteristics.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a ggplot from the output of summariseCharacteristics.\n`r lifecycle::badge(","title":"Create a ggplot from the output of summariseCharacteristics.\n`r lifecycle::badge(","text":"Create ggplot output summariseCharacteristics. `r lifecycle::badge(\"experimental\")`","code":""},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/plotCharacteristics.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a ggplot from the output of summariseCharacteristics.\n`r lifecycle::badge(","text":"","code":"plotCharacteristics(   data,   xAxis = \"variable_name\",   yAxis = \"estimate_value\",   plotStyle = \"barplot\",   facetVars = NULL,   colorVars = NULL,   facetOrder = NULL,   colorNames = NULL,   vertical_x = FALSE,   options = list() )"},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/plotCharacteristics.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a ggplot from the output of summariseCharacteristics.\n`r lifecycle::badge(","text":"data output summariseCharacteristics. xAxis plot x axis, default variable_name column. column data. yAxis plot y axis, default estimate_value column. column data. One xAxis yAxis estimate_value. plotStyle Now allows boxplot barplot . facetVars column data facet . colorVars column data color . facetOrder order facet, make sure multiple facets separated period order provided facetVars. colorNames vector pre-selected color. vertical_x whether display x axis string vertically. options plot options list.","code":""},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/plotCharacteristics.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a ggplot from the output of summariseCharacteristics.\n`r lifecycle::badge(","text":"ggplot.","code":""},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/plotCharacteristics.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a ggplot from the output of summariseCharacteristics.\n`r lifecycle::badge(","text":"","code":"# \\donttest{ library(PatientProfiles)  cdm <- mockPatientProfiles()  results <- summariseCharacteristics(   cohort = cdm$cohort1,   ageGroup = list(c(0, 19), c(20, 39), c(40, 59), c(60, 79), c(80, 150)),   tableIntersect = list(     tableName = \"visit_occurrence\", value = \"count\", window = c(-365, -1)   ),   cohortIntersect = list(     targetCohortTable = \"cohort2\", value = \"flag\", window = c(-365, -1)   ) ) #> ℹ adding demographics columns #> ℹ adding table intersect columns for table: visit_occurrence #> ℹ adding cohort intersect columns for table: cohort2 #> ℹ summarising data #> ✔ summariseCharacteristics finished!  plotCharacteristics(results)   CDMConnector::cdmDisconnect(cdm = cdm) # }"},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/plotCohortIntersect.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot summariseCohortIntersect output. — plotCohortIntersect","title":"Plot summariseCohortIntersect output. — plotCohortIntersect","text":"`r lifecycle::badge(\"experimental\")`","code":""},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/plotCohortIntersect.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot summariseCohortIntersect output. — plotCohortIntersect","text":"","code":"plotCohortIntersect(   data,   xAxis = \"variable_name\",   yAxis = \"estimate_value\",   plotStyle = \"barplot\",   facetVars = NULL,   colorVars = NULL,   facetOrder = NULL,   colorNames = NULL,   vertical_x = FALSE,   options = list() )"},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/plotCohortIntersect.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot summariseCohortIntersect output. — plotCohortIntersect","text":"data output summariseCohortIntersect xAxis plot x axis, default variable_name column. column data. yAxis plot y axis, default estimate_value column. column data. One xAxis yAxis estimate_value. plotStyle Now allows boxplot barplot . facetVars column data facet . colorVars column data color . facetOrder order facet, make sure multiple facets separated period order provided facetVars. colorNames vector pre-selected color. vertical_x whether display x axis string vertically. options plot options list.","code":""},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/plotCohortIntersect.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot summariseCohortIntersect output. — plotCohortIntersect","text":"ggplot.","code":""},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/plotCohortIntersect.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot summariseCohortIntersect output. — plotCohortIntersect","text":"","code":"# \\donttest{ library(PatientProfiles) cdm <- mockPatientProfiles() results <- summariseCohortIntersect(   cohort = cdm$cohort1,   cohortIntersect = list(     \"Medications in the prior year\" = list(       targetCohortTable = \"cohort2\", value = \"flag\", window = c(-365, -1)     )   ) ) #> ℹ adding cohort intersect columns for table: cohort2 #> ℹ summarising data #> ✔ summariseCharacteristics finished! graph <- plotCohortIntersect(results) CDMConnector::cdmDisconnect(cdm = cdm) # }"},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/plotCohortOverlap.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot the result of summariseCohortOverlap. — plotCohortOverlap","title":"Plot the result of summariseCohortOverlap. — plotCohortOverlap","text":"`r lifecycle::badge(\"experimental\")`","code":""},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/plotCohortOverlap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot the result of summariseCohortOverlap. — plotCohortOverlap","text":"","code":"plotCohortOverlap(   result,   facetBy = \"variable_name\",   overlapLabel = \"{cohort_name_reference}; {cohort_name_comparator}\",   uniqueCombinations = TRUE )"},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/plotCohortOverlap.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot the result of summariseCohortOverlap. — plotCohortOverlap","text":"result summariseCohortOverlap result. facetBy Names columns result table faceting ggplot object. overlapLabel glue expression identify plotted cohort overlap. uniqueCombinations TRUE, unique combinations reference comparator plots plotted.","code":""},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/plotCohortOverlap.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot the result of summariseCohortOverlap. — plotCohortOverlap","text":"ggplot.","code":""},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/plotCohortOverlap.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot the result of summariseCohortOverlap. — plotCohortOverlap","text":"","code":"# \\donttest{ library(PatientProfiles) cdm <- PatientProfiles::mockPatientProfiles() overlap <- summariseCohortOverlap(cdm$cohort2) plotCohortOverlap(overlap) #> Warning: Removed 3 rows containing missing values or values outside the scale range #> (`geom_col()`).  # }"},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/plotCohortTiming.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot summariseCohortTiming results. — plotCohortTiming","title":"Plot summariseCohortTiming results. — plotCohortTiming","text":"`r lifecycle::badge(\"experimental\")`","code":""},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/plotCohortTiming.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot summariseCohortTiming results. — plotCohortTiming","text":"","code":"plotCohortTiming(   result,   type = \"boxplot\",   facetBy = NULL,   color = c(\"cohort_name_reference\", \"cohort_name_comparator\"),   timingLabel = \"{cohort_name_reference}; {cohort_name_comparator}\",   uniqueCombinations = TRUE )"},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/plotCohortTiming.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot summariseCohortTiming results. — plotCohortTiming","text":"result summariseCohortTiming result. type Type desired formatted table, possibilities \"boxplot\" \"density\". facetBy Vector column names  cohort_overlap table faceting ggplot object. color Vector column names distinct colors. timingLabel glue expression identify plotted cohort overlap. uniqueCombinations TRUE, unique combinations reference comparator plots plotted.","code":""},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/plotCohortTiming.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot summariseCohortTiming results. — plotCohortTiming","text":"ggplot.","code":""},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/plotCohortTiming.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot summariseCohortTiming results. — plotCohortTiming","text":"","code":"# \\donttest{ library(PatientProfiles) cdm <- PatientProfiles::mockPatientProfiles() timing <- summariseCohortTiming(cdm$cohort2) #> ℹ The following estimates will be computed: #> • diff_days: min, q25, median, q75, max #> → Start summary of data, at 2024-03-28 18:19:02.163817 #> ✔ Summary finished, at 2024-03-28 18:19:02.219944 plotCohortTiming(timing) #> Warning: There was 1 warning in `dplyr::mutate()`. #> ℹ In argument: `estimate_value = as.numeric(.data$estimate_value)`. #> Caused by warning: #> ! NAs introduced by coercion  CDMConnector::cdmDisconnect(cdm = cdm) # }"},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/plotDemographics.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot summariseDemographics output. — plotDemographics","title":"Plot summariseDemographics output. — plotDemographics","text":"`r lifecycle::badge(\"experimental\")`","code":""},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/plotDemographics.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot summariseDemographics output. — plotDemographics","text":"","code":"plotDemographics(   data,   xAxis = \"variable_name\",   yAxis = \"estimate_value\",   plotStyle = \"barplot\",   facetVars = NULL,   colorVars = \"variable_level\",   facetOrder = NULL,   colorNames = NULL,   vertical_x = FALSE,   options = list() )"},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/plotDemographics.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot summariseDemographics output. — plotDemographics","text":"data output summariseCharacteristics. xAxis plot x axis, default variable_name column. column data. yAxis plot y axis, default estimate_value column. column data. One xAxis yAxis estimate_value. plotStyle Now allows boxplot barplot . facetVars column data facet . colorVars column data color . facetOrder order facet, make sure multiple facets separated period order provided facetVars. colorNames vector pre-selected color. vertical_x whether display x axis string vertically. options plot options list.","code":""},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/plotDemographics.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot summariseDemographics output. — plotDemographics","text":"ggplot.","code":""},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/plotDemographics.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot summariseDemographics output. — plotDemographics","text":"","code":"# \\donttest{ library(PatientProfiles) cdm <- mockPatientProfiles() results <- summariseDemographics(   cohort = cdm$cohort1,   ageGroup = list(c(0, 19), c(20, 39), c(40, 59), c(60, 79), c(80, 150)) ) #> ℹ adding demographics columns #> ℹ summarising data #> ✔ summariseCharacteristics finished! graph <- plotDemographics(results) CDMConnector::cdmDisconnect(cdm = cdm) # }"},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/plotLargeScaleCharacteristics.html","id":null,"dir":"Reference","previous_headings":"","what":"create a ggplot from the output of summariseLargeScaleCharacteristics. — plotLargeScaleCharacteristics","title":"create a ggplot from the output of summariseLargeScaleCharacteristics. — plotLargeScaleCharacteristics","text":"`r lifecycle::badge(\"experimental\")`","code":""},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/plotLargeScaleCharacteristics.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"create a ggplot from the output of summariseLargeScaleCharacteristics. — plotLargeScaleCharacteristics","text":"","code":"plotLargeScaleCharacteristics(   data,   xAxis = \"variable_name\",   yAxis = \"estimate_value\",   facetVars = NULL,   colorVars = NULL,   facetOrder = NULL,   colorNames = NULL,   vertical_x = FALSE,   options = list() )"},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/plotLargeScaleCharacteristics.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"create a ggplot from the output of summariseLargeScaleCharacteristics. — plotLargeScaleCharacteristics","text":"data output summariseLargeScaleCharacteristics. xAxis plot x axis, default variable_name column. column data. yAxis plot y axis, default estimate_value column. column data. One xAxis yAxis estimate_value. facetVars column data facet . colorVars column data color . facetOrder order facet, make  sure multiple facets separated period order provided facetVars. colorNames vector pre-selected color. vertical_x whether display x axis string vertically. options plot options list.","code":""},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/plotLargeScaleCharacteristics.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"create a ggplot from the output of summariseLargeScaleCharacteristics. — plotLargeScaleCharacteristics","text":"ggplot.","code":""},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/plotLargeScaleCharacteristics.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"create a ggplot from the output of summariseLargeScaleCharacteristics. — plotLargeScaleCharacteristics","text":"","code":"# \\donttest{ library(PatientProfiles) cdm <- PatientProfiles::mockPatientProfiles()  concept <- dplyr::tibble( concept_id = c(1125315, 1503328, 1516978, 317009, 378253, 4266367), domain_id = NA_character_, vocabulary_id = NA_character_, concept_class_id = NA_character_, concept_code = NA_character_, valid_start_date = as.Date(\"1900-01-01\"), valid_end_date = as.Date(\"2099-01-01\") ) %>%  dplyr::mutate(concept_name = paste0(\"concept: \", .data$concept_id)) cdm <- CDMConnector::insertTable(cdm, \"concept\", concept) results <- cdm$cohort2 %>% summariseLargeScaleCharacteristics(   episodeInWindow = c(\"condition_occurrence\"),   minimumFrequency = 0 ) graphs <- plotLargeScaleCharacteristics(results) CDMConnector::cdmDisconnect(cdm = cdm) # }"},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/plotTableIntersect.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot summariseTableIntersect output. — plotTableIntersect","title":"Plot summariseTableIntersect output. — plotTableIntersect","text":"`r lifecycle::badge(\"experimental\")`","code":""},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/plotTableIntersect.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot summariseTableIntersect output. — plotTableIntersect","text":"","code":"plotTableIntersect(   data,   xAxis = \"variable_name\",   yAxis = \"estimate_value\",   plotStyle = \"boxplot\",   facetVars = NULL,   colorVars = NULL,   facetOrder = NULL,   colorNames = NULL,   vertical_x = FALSE,   options = list() )"},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/plotTableIntersect.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot summariseTableIntersect output. — plotTableIntersect","text":"data output summariseTableIntersect xAxis plot x axis, default variable_name column. column data. yAxis plot y axis, default estimate_value column. column data. One xAxis yAxis estimate_value. plotStyle Now allows boxplot barplot . facetVars column data facet . colorVars column data color . facetOrder order facet, make sure multiple facets separated period order provided facetVars. colorNames vector pre-selected color. vertical_x whether display x axis string vertically. options plot options list.","code":""},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/plotTableIntersect.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot summariseTableIntersect output. — plotTableIntersect","text":"ggplot.","code":""},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/reexports.html","id":null,"dir":"Reference","previous_headings":"","what":"Objects exported from other packages — reexports","title":"Objects exported from other packages — reexports","text":"objects imported packages. Follow links see documentation. omopgenerics settings, suppress","code":""},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/sourceConceptIdColumn.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the name of the source concept_id column for a certain table in the cdm — sourceConceptIdColumn","title":"Get the name of the source concept_id column for a certain table in the cdm — sourceConceptIdColumn","text":"Get name source concept_id column certain table cdm","code":""},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/sourceConceptIdColumn.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the name of the source concept_id column for a certain table in the cdm — sourceConceptIdColumn","text":"","code":"sourceConceptIdColumn(tableName)"},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/sourceConceptIdColumn.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get the name of the source concept_id column for a certain table in the cdm — sourceConceptIdColumn","text":"tableName Name table.","code":""},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/sourceConceptIdColumn.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the name of the source concept_id column for a certain table in the cdm — sourceConceptIdColumn","text":"Name source_concept_id column table.","code":""},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/sourceConceptIdColumn.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get the name of the source concept_id column for a certain table in the cdm — sourceConceptIdColumn","text":"","code":"# \\donttest{ library(PatientProfiles) sourceConceptIdColumn(\"condition_occurrence\") #> [1] \"condition_source_concept_id\" # }"},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/standardConceptIdColumn.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the name of the standard concept_id column for a certain table in the cdm — standardConceptIdColumn","title":"Get the name of the standard concept_id column for a certain table in the cdm — standardConceptIdColumn","text":"Get name standard concept_id column certain table cdm","code":""},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/standardConceptIdColumn.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the name of the standard concept_id column for a certain table in the cdm — standardConceptIdColumn","text":"","code":"standardConceptIdColumn(tableName)"},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/standardConceptIdColumn.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get the name of the standard concept_id column for a certain table in the cdm — standardConceptIdColumn","text":"tableName Name table.","code":""},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/standardConceptIdColumn.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the name of the standard concept_id column for a certain table in the cdm — standardConceptIdColumn","text":"Name concept_id column table.","code":""},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/standardConceptIdColumn.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get the name of the standard concept_id column for a certain table in the cdm — standardConceptIdColumn","text":"","code":"# \\donttest{ library(PatientProfiles) standardConceptIdColumn(\"condition_occurrence\") #> [1] \"condition_concept_id\" # }"},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/startDateColumn.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the name of the start date column for a certain table in the cdm — startDateColumn","title":"Get the name of the start date column for a certain table in the cdm — startDateColumn","text":"Get name start date column certain table cdm","code":""},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/startDateColumn.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the name of the start date column for a certain table in the cdm — startDateColumn","text":"","code":"startDateColumn(tableName)"},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/startDateColumn.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get the name of the start date column for a certain table in the cdm — startDateColumn","text":"tableName Name table.","code":""},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/startDateColumn.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the name of the start date column for a certain table in the cdm — startDateColumn","text":"Name start date column table.","code":""},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/startDateColumn.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get the name of the start date column for a certain table in the cdm — startDateColumn","text":"","code":"# \\donttest{ library(PatientProfiles) startDateColumn(\"condition_occurrence\") #> [1] \"condition_start_date\" # }"},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/summariseCharacteristics.html","id":null,"dir":"Reference","previous_headings":"","what":"Summarise characteristics of individuals — summariseCharacteristics","title":"Summarise characteristics of individuals — summariseCharacteristics","text":"Summarise characteristics individuals","code":""},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/summariseCharacteristics.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summarise characteristics of individuals — summariseCharacteristics","text":"","code":"summariseCharacteristics(   cohort,   cdm = lifecycle::deprecated(),   strata = list(),   demographics = TRUE,   ageGroup = NULL,   tableIntersect = list(),   cohortIntersect = list(),   conceptIntersect = list(),   otherVariables = character() )"},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/summariseCharacteristics.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summarise characteristics of individuals — summariseCharacteristics","text":"cohort cohort cdm. cdm cdm reference. strata Stratification list. demographics Whether summarise demographics data. ageGroup list age groups. tableIntersect list arguments uses addTableIntersect function add variables summarise. cohortIntersect list arguments uses addCohortIntersect function add variables summarise. conceptIntersect list arguments uses addConceptIntersect function add variables summarise. otherVariables variables contained cohort want summarised.","code":""},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/summariseCharacteristics.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Summarise characteristics of individuals — summariseCharacteristics","text":"summary characteristics individuals.","code":""},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/summariseCharacteristics.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Summarise characteristics of individuals — summariseCharacteristics","text":"","code":"# \\donttest{ library(PatientProfiles)  cdm <- mockPatientProfiles()  summariseCharacteristics(   cohort = cdm$cohort1,   ageGroup = list(c(0, 19), c(20, 39), c(40, 59), c(60, 79), c(80, 150)),   tableIntersect = list(     \"Number visits prior year\" = list(       tableName = \"visit_occurrence\", value = \"count\", window = c(-365, -1)     )   ),   cohortIntersect = list(     \"Drugs prior year\" = list(       targetCohortTable = \"cohort2\", value = \"flag\", window = c(-365, -1)     ),     \"Conditions any time prior\" = list(       targetCohortTable = \"cohort2\", value = \"flag\", window = c(-Inf, -1)     )   ) ) #> ℹ adding demographics columns #> ℹ adding table intersect columns for table: visit_occurrence #> ℹ adding cohort intersect columns for table: cohort2 #> ℹ adding cohort intersect columns for table: cohort2 #> ℹ summarising data #> ✔ summariseCharacteristics finished! #> # A tibble: 64 × 16 #>    result_id cdm_name result_type        package_name package_version group_name #>        <int> <chr>    <chr>              <chr>        <chr>           <chr>      #>  1         1 PP_MOCK  summarised_charac… PatientProf… 0.7.0           cohort_na… #>  2         1 PP_MOCK  summarised_charac… PatientProf… 0.7.0           cohort_na… #>  3         1 PP_MOCK  summarised_charac… PatientProf… 0.7.0           cohort_na… #>  4         1 PP_MOCK  summarised_charac… PatientProf… 0.7.0           cohort_na… #>  5         1 PP_MOCK  summarised_charac… PatientProf… 0.7.0           cohort_na… #>  6         1 PP_MOCK  summarised_charac… PatientProf… 0.7.0           cohort_na… #>  7         1 PP_MOCK  summarised_charac… PatientProf… 0.7.0           cohort_na… #>  8         1 PP_MOCK  summarised_charac… PatientProf… 0.7.0           cohort_na… #>  9         1 PP_MOCK  summarised_charac… PatientProf… 0.7.0           cohort_na… #> 10         1 PP_MOCK  summarised_charac… PatientProf… 0.7.0           cohort_na… #> # ℹ 54 more rows #> # ℹ 10 more variables: group_level <chr>, strata_name <chr>, #> #   strata_level <chr>, variable_name <chr>, variable_level <chr>, #> #   estimate_name <chr>, estimate_type <chr>, estimate_value <chr>, #> #   additional_name <chr>, additional_level <chr> CDMConnector::cdmDisconnect(cdm = cdm) # }"},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/summariseCohortIntersect.html","id":null,"dir":"Reference","previous_headings":"","what":"Summarise cohort intersection information — summariseCohortIntersect","title":"Summarise cohort intersection information — summariseCohortIntersect","text":"Summarise cohort intersection information","code":""},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/summariseCohortIntersect.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summarise cohort intersection information — summariseCohortIntersect","text":"","code":"summariseCohortIntersect(cohort, cohortIntersect = list(), strata = list())"},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/summariseCohortIntersect.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summarise cohort intersection information — summariseCohortIntersect","text":"cohort cohort cdm. cohortIntersect settings cohort intersection settings. strata Stratification list.","code":""},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/summariseCohortIntersect.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Summarise cohort intersection information — summariseCohortIntersect","text":"summary cohort intersection informations.","code":""},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/summariseCohortIntersect.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Summarise cohort intersection information — summariseCohortIntersect","text":"","code":"# \\donttest{ library(PatientProfiles)  cdm <- mockPatientProfiles()  summariseCohortIntersect(   cohort = cdm$cohort1,   cohortIntersect = list(     \"Medications in the prior year\" = list(       targetCohortTable = \"cohort2\", value = \"flag\", window = c(-365, -1)     )   ) ) #> ℹ adding cohort intersect columns for table: cohort2 #> ℹ summarising data #> ✔ summariseCharacteristics finished! #> # A tibble: 4 × 16 #>   result_id cdm_name result_type         package_name package_version group_name #>       <int> <chr>    <chr>               <chr>        <chr>           <chr>      #> 1         1 PP_MOCK  summarised_cohort_… PatientProf… 0.7.0           cohort_na… #> 2         1 PP_MOCK  summarised_cohort_… PatientProf… 0.7.0           cohort_na… #> 3         1 PP_MOCK  summarised_cohort_… PatientProf… 0.7.0           cohort_na… #> 4         1 PP_MOCK  summarised_cohort_… PatientProf… 0.7.0           cohort_na… #> # ℹ 10 more variables: group_level <chr>, strata_name <chr>, #> #   strata_level <chr>, variable_name <chr>, variable_level <chr>, #> #   estimate_name <chr>, estimate_type <chr>, estimate_value <chr>, #> #   additional_name <chr>, additional_level <chr> CDMConnector::cdmDisconnect(cdm = cdm) # }"},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/summariseCohortOverlap.html","id":null,"dir":"Reference","previous_headings":"","what":"Summarise cohort overlap — summariseCohortOverlap","title":"Summarise cohort overlap — summariseCohortOverlap","text":"Summarise cohort overlap","code":""},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/summariseCohortOverlap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summarise cohort overlap — summariseCohortOverlap","text":"","code":"summariseCohortOverlap(cohort, cohortId = NULL, strata = list())"},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/summariseCohortOverlap.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summarise cohort overlap — summariseCohortOverlap","text":"cohort cohort table cdm reference. cohortId Vector cohort definition ids include, NULL, cohort definition ids used. strata List stratifications within group considered. Must column names cohort table provided.","code":""},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/summariseCohortOverlap.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Summarise cohort overlap — summariseCohortOverlap","text":"summarised result.","code":""},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/summariseCohortOverlap.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Summarise cohort overlap — summariseCohortOverlap","text":"","code":"# \\donttest{ library(PatientProfiles) cdm <- PatientProfiles::mockPatientProfiles() results <- summariseCohortOverlap(cdm$cohort2) CDMConnector::cdmDisconnect(cdm = cdm) # }"},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/summariseCohortTiming.html","id":null,"dir":"Reference","previous_headings":"","what":"Summarise cohort timing — summariseCohortTiming","title":"Summarise cohort timing — summariseCohortTiming","text":"Summarise cohort timing","code":""},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/summariseCohortTiming.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summarise cohort timing — summariseCohortTiming","text":"","code":"summariseCohortTiming(   cohort,   cohortId = NULL,   strata = list(),   restrictToFirstEntry = TRUE,   timing = c(\"min\", \"q25\", \"median\", \"q75\", \"max\"),   density = FALSE )"},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/summariseCohortTiming.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summarise cohort timing — summariseCohortTiming","text":"cohort cohort table cdm reference. cohortId Vector cohort definition ids include, NULL, cohort definition ids used. strata List stratifications within group considered. Must column names cohort table provided. restrictToFirstEntry TRUE individual's first entry per cohort considered. FALSE entries per individual considered. timing Summary statistics timing. density Get data density plot.","code":""},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/summariseCohortTiming.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Summarise cohort timing — summariseCohortTiming","text":"summarised result.","code":""},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/summariseCohortTiming.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Summarise cohort timing — summariseCohortTiming","text":"","code":"# \\donttest{ library(PatientProfiles) cdm <- PatientProfiles::mockPatientProfiles() results <- summariseCohortTiming(cdm$cohort2) #> ℹ The following estimates will be computed: #> • diff_days: min, q25, median, q75, max #> → Start summary of data, at 2024-03-28 18:19:35.515573 #> ✔ Summary finished, at 2024-03-28 18:19:35.565401 CDMConnector::cdmDisconnect(cdm = cdm) # }"},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/summariseConceptIntersect.html","id":null,"dir":"Reference","previous_headings":"","what":"Summarise concept intersect with a cohort_table — summariseConceptIntersect","title":"Summarise concept intersect with a cohort_table — summariseConceptIntersect","text":"Summarise concept intersect cohort_table","code":""},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/summariseConceptIntersect.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summarise concept intersect with a cohort_table — summariseConceptIntersect","text":"","code":"summariseConceptIntersect(cohort, conceptIntersect, strata = list())"},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/summariseConceptIntersect.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summarise concept intersect with a cohort_table — summariseConceptIntersect","text":"cohort cohort cdm conceptIntersect list arguments uses addConceptIntersect function add variables summarise. strata Stratification list","code":""},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/summariseConceptIntersect.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Summarise concept intersect with a cohort_table — summariseConceptIntersect","text":"summary concept intersect individuals","code":""},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/summariseDemographics.html","id":null,"dir":"Reference","previous_headings":"","what":"Summarise demographics of individuals — summariseDemographics","title":"Summarise demographics of individuals — summariseDemographics","text":"Summarise demographics individuals","code":""},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/summariseDemographics.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summarise demographics of individuals — summariseDemographics","text":"","code":"summariseDemographics(cohort, strata = list(), ageGroup = NULL)"},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/summariseDemographics.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summarise demographics of individuals — summariseDemographics","text":"cohort cohort cdm. strata Stratification list. ageGroup list age groups.","code":""},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/summariseDemographics.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Summarise demographics of individuals — summariseDemographics","text":"summary demographics individuals.","code":""},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/summariseDemographics.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Summarise demographics of individuals — summariseDemographics","text":"","code":"# \\donttest{ library(PatientProfiles)  cdm <- mockPatientProfiles()  summariseDemographics(   cohort = cdm$cohort1,   ageGroup = list(c(0, 19), c(20, 39), c(40, 59), c(60, 79), c(80, 150)) ) #> ℹ adding demographics columns #> ℹ summarising data #> ✔ summariseCharacteristics finished! #> # A tibble: 31 × 16 #>    result_id cdm_name result_type        package_name package_version group_name #>        <int> <chr>    <chr>              <chr>        <chr>           <chr>      #>  1         1 PP_MOCK  summarised_demogr… PatientProf… 0.7.0           cohort_na… #>  2         1 PP_MOCK  summarised_demogr… PatientProf… 0.7.0           cohort_na… #>  3         1 PP_MOCK  summarised_demogr… PatientProf… 0.7.0           cohort_na… #>  4         1 PP_MOCK  summarised_demogr… PatientProf… 0.7.0           cohort_na… #>  5         1 PP_MOCK  summarised_demogr… PatientProf… 0.7.0           cohort_na… #>  6         1 PP_MOCK  summarised_demogr… PatientProf… 0.7.0           cohort_na… #>  7         1 PP_MOCK  summarised_demogr… PatientProf… 0.7.0           cohort_na… #>  8         1 PP_MOCK  summarised_demogr… PatientProf… 0.7.0           cohort_na… #>  9         1 PP_MOCK  summarised_demogr… PatientProf… 0.7.0           cohort_na… #> 10         1 PP_MOCK  summarised_demogr… PatientProf… 0.7.0           cohort_na… #> # ℹ 21 more rows #> # ℹ 10 more variables: group_level <chr>, strata_name <chr>, #> #   strata_level <chr>, variable_name <chr>, variable_level <chr>, #> #   estimate_name <chr>, estimate_type <chr>, estimate_value <chr>, #> #   additional_name <chr>, additional_level <chr> CDMConnector::cdmDisconnect(cdm = cdm) # }"},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/summariseLargeScaleCharacteristics.html","id":null,"dir":"Reference","previous_headings":"","what":"This function is used to summarise the large scale characteristics of a\ncohort table — summariseLargeScaleCharacteristics","title":"This function is used to summarise the large scale characteristics of a\ncohort table — summariseLargeScaleCharacteristics","text":"function used summarise large scale characteristics cohort table","code":""},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/summariseLargeScaleCharacteristics.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"This function is used to summarise the large scale characteristics of a\ncohort table — summariseLargeScaleCharacteristics","text":"","code":"summariseLargeScaleCharacteristics(   cohort,   strata = list(),   window = list(c(-Inf, -366), c(-365, -31), c(-30, -1), c(0, 0), c(1, 30), c(31, 365),     c(366, Inf)),   eventInWindow = NULL,   episodeInWindow = NULL,   indexDate = \"cohort_start_date\",   censorDate = NULL,   includeSource = FALSE,   minimumFrequency = 0.005,   excludedCodes = c(0),   cdm = lifecycle::deprecated() )"},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/summariseLargeScaleCharacteristics.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"This function is used to summarise the large scale characteristics of a\ncohort table — summariseLargeScaleCharacteristics","text":"cohort cohort characterise. strata Stratification list. window Temporal windows want characterize. eventInWindow Tables characterise events window. eventInWindow must provided episodeInWindow specified. episodeInWindow Tables characterise episodes window. episodeInWindow must provided eventInWindow specified. indexDate Variable x contains date compute intersection. censorDate whether censor overlap events specific date column date x includeSource Whether include source concepts. minimumFrequency Minimum frequency covariates report. excludedCodes Codes excluded. cdm cdm reference.","code":""},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/summariseLargeScaleCharacteristics.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"This function is used to summarise the large scale characteristics of a\ncohort table — summariseLargeScaleCharacteristics","text":"output function `ResultSummary` containing relevant information.","code":""},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/summariseLargeScaleCharacteristics.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"This function is used to summarise the large scale characteristics of a\ncohort table — summariseLargeScaleCharacteristics","text":"","code":"# \\donttest{ library(PatientProfiles) cdm <- PatientProfiles::mockPatientProfiles()  concept <- dplyr::tibble( concept_id = c(1125315, 1503328, 1516978, 317009, 378253, 4266367), domain_id = NA_character_, vocabulary_id = NA_character_, concept_class_id = NA_character_, concept_code = NA_character_, valid_start_date = as.Date(\"1900-01-01\"), valid_end_date = as.Date(\"2099-01-01\") ) %>%  dplyr::mutate(concept_name = paste0(\"concept: \", .data$concept_id)) cdm <- CDMConnector::insertTable(cdm, \"concept\", concept) results <- cdm$cohort2 %>% summariseLargeScaleCharacteristics(  episodeInWindow = c(\"condition_occurrence\"),  minimumFrequency = 0  ) CDMConnector::cdmDisconnect(cdm = cdm) # }"},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/summariseResult.html","id":null,"dir":"Reference","previous_headings":"","what":"Summarise variables using a set of estimate functions. The output will be\na formatted summarised_result object. — summariseResult","title":"Summarise variables using a set of estimate functions. The output will be\na formatted summarised_result object. — summariseResult","text":"Summarise variables using set estimate functions. output formatted summarised_result object.","code":""},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/summariseResult.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summarise variables using a set of estimate functions. The output will be\na formatted summarised_result object. — summariseResult","text":"","code":"summariseResult(   table,   group = list(),   includeOverallGroup = FALSE,   strata = list(),   includeOverallStrata = TRUE,   variables = NULL,   functions = lifecycle::deprecated(),   estimates = c(\"min\", \"q25\", \"median\", \"q75\", \"max\", \"count\", \"percentage\"),   counts = TRUE,   verbose = TRUE )"},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/summariseResult.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summarise variables using a set of estimate functions. The output will be\na formatted summarised_result object. — summariseResult","text":"table Table different records. group List groups considered. includeOverallGroup TRUE FALSE. TRUE, results overall group reported list groups specified. strata List stratifications within group considered. includeOverallStrata TRUE FALSE. TRUE, results overall strata reported list strata specified. variables Variables summarise, can list point different set estimate names. functions deprecated. estimates Estimates obtain, can list point different set variables. counts Whether compute number records number subjects. verbose Whether print progress.","code":""},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/summariseResult.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Summarise variables using a set of estimate functions. The output will be\na formatted summarised_result object. — summariseResult","text":"summarised_result object summarised data interest.","code":""},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/summariseResult.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Summarise variables using a set of estimate functions. The output will be\na formatted summarised_result object. — summariseResult","text":"","code":"# \\donttest{ library(PatientProfiles) library(dplyr) #>  #> Attaching package: ‘dplyr’ #> The following objects are masked from ‘package:stats’: #>  #>     filter, lag #> The following objects are masked from ‘package:base’: #>  #>     intersect, setdiff, setequal, union  cdm <- mockPatientProfiles() x <- cdm$cohort1 %>%   addDemographics() %>%   collect() result <- summariseResult(x) #> ℹ The following estimates will be computed: #> • cohort_start_date: min, q25, median, q75, max #> • cohort_end_date: min, q25, median, q75, max #> • age: min, q25, median, q75, max #> • sex: count, percentage #> • prior_observation: min, q25, median, q75, max #> • future_observation: min, q25, median, q75, max #> → Start summary of data, at 2024-03-28 18:19:49.488208 #> ✔ Summary finished, at 2024-03-28 18:19:49.58232 CDMConnector::cdmDisconnect(cdm = cdm) # }"},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/summariseTableIntersect.html","id":null,"dir":"Reference","previous_headings":"","what":"Summarise table intersection information — summariseTableIntersect","title":"Summarise table intersection information — summariseTableIntersect","text":"Summarise table intersection information","code":""},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/summariseTableIntersect.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summarise table intersection information — summariseTableIntersect","text":"","code":"summariseTableIntersect(cohort, tableIntersect = list(), strata = list())"},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/summariseTableIntersect.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summarise table intersection information — summariseTableIntersect","text":"cohort cohort cdm. tableIntersect list arguments uses addTableIntersect function add variables summarise. strata Stratification list.","code":""},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/summariseTableIntersect.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Summarise table intersection information — summariseTableIntersect","text":"summary table intersections.","code":""},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/tableCharacteristics.html","id":null,"dir":"Reference","previous_headings":"","what":"Format a summarised_characteristics object into a visual table. — tableCharacteristics","title":"Format a summarised_characteristics object into a visual table. — tableCharacteristics","text":"`r lifecycle::badge(\"experimental\")`","code":""},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/tableCharacteristics.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Format a summarised_characteristics object into a visual table. — tableCharacteristics","text":"","code":"tableCharacteristics(   result,   type = \"gt\",   formatEstimateName = c(`N (%)` = \"<count> (<percentage>%)\", N = \"<count>\",     `Median [Q25 - Q75]` = \"<median> [<q25> - <q75>]\", `[Q05 - Q95]` = \"[<q05> - <q95>]\",     `Mean (SD)` = \"<mean> (<sd>)\", Range = \"<min> to <max>\"),   header = c(\"group\"),   split = c(\"group\", \"strata\"),   groupColumn = NULL,   minCellCount = 5,   excludeColumns = c(\"result_id\", \"result_type\", \"package_name\", \"package_version\",     \"estimate_type\", \"additional_name\", \"additional_level\"),   .options = list() )"},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/tableCharacteristics.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Format a summarised_characteristics object into a visual table. — tableCharacteristics","text":"result summarised_characteristics object. type Type desired formatted table, possibilities: \"gt\", \"flextable\", \"tibble\". formatEstimateName Named list estimate name's join, sorted computation order. Indicate estimate_name's <...>. header vector containing elements go header order. Allowed : `cdm_name`, `group`, `strata`, `additional`, `variable`, `estimate`, `settings`. split vector containing name-level groups split (\"group\", \"strata\", \"additional\"), empty character vector split. groupColumn Column use group labels. minCellCount Counts results clouded. excludeColumns Columns drop output table. .options Named list additional formatting options. PatientProfiles::optionsTableCharacteristics() shows allowed arguments default values.","code":""},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/tableCharacteristics.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Format a summarised_characteristics object into a visual table. — tableCharacteristics","text":"table formatted version summariseCharacteristics result.","code":""},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/tableCharacteristics.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Format a summarised_characteristics object into a visual table. — tableCharacteristics","text":"","code":"# \\donttest{ library(PatientProfiles)  cdm <- mockPatientProfiles()  cdm$cohort1 |>   summariseCharacteristics() |>   tableCharacteristics() #> ℹ adding demographics columns #> ℹ summarising data #> ✔ summariseCharacteristics finished! #> <div id=\"ffdccmiygy\" style=\"padding-left:0px;padding-right:0px;padding-top:10px;padding-bottom:10px;overflow-x:auto;overflow-y:auto;width:auto;height:auto;\"> #>   <style>#ffdccmiygy table { #>   font-family: system-ui, 'Segoe UI', Roboto, Helvetica, Arial, sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol', 'Noto Color Emoji'; #>   -webkit-font-smoothing: antialiased; #>   -moz-osx-font-smoothing: grayscale; #> } #>  #> #ffdccmiygy thead, #ffdccmiygy tbody, #ffdccmiygy tfoot, #ffdccmiygy tr, #ffdccmiygy td, #ffdccmiygy th { #>   border-style: none; #> } #>  #> #ffdccmiygy p { #>   margin: 0; #>   padding: 0; #> } #>  #> #ffdccmiygy .gt_table { #>   display: table; #>   border-collapse: collapse; #>   line-height: normal; #>   margin-left: auto; #>   margin-right: auto; #>   color: #333333; #>   font-size: 16px; #>   font-weight: normal; #>   font-style: normal; #>   background-color: #FFFFFF; #>   width: auto; #>   border-top-style: solid; #>   border-top-width: 2px; #>   border-top-color: #A8A8A8; #>   border-right-style: none; #>   border-right-width: 2px; #>   border-right-color: #D3D3D3; #>   border-bottom-style: solid; #>   border-bottom-width: 2px; #>   border-bottom-color: #A8A8A8; #>   border-left-style: none; #>   border-left-width: 2px; #>   border-left-color: #D3D3D3; #> } #>  #> #ffdccmiygy .gt_caption { #>   padding-top: 4px; #>   padding-bottom: 4px; #> } #>  #> #ffdccmiygy .gt_title { #>   color: #333333; #>   font-size: 125%; #>   font-weight: initial; #>   padding-top: 4px; #>   padding-bottom: 4px; #>   padding-left: 5px; #>   padding-right: 5px; #>   border-bottom-color: #FFFFFF; #>   border-bottom-width: 0; #> } #>  #> #ffdccmiygy .gt_subtitle { #>   color: #333333; #>   font-size: 85%; #>   font-weight: initial; #>   padding-top: 3px; #>   padding-bottom: 5px; #>   padding-left: 5px; #>   padding-right: 5px; #>   border-top-color: #FFFFFF; #>   border-top-width: 0; #> } #>  #> #ffdccmiygy .gt_heading { #>   background-color: #FFFFFF; #>   text-align: center; #>   border-bottom-color: #FFFFFF; #>   border-left-style: none; #>   border-left-width: 1px; #>   border-left-color: #D3D3D3; #>   border-right-style: none; #>   border-right-width: 1px; #>   border-right-color: #D3D3D3; #> } #>  #> #ffdccmiygy .gt_bottom_border { #>   border-bottom-style: solid; #>   border-bottom-width: 2px; #>   border-bottom-color: #D3D3D3; #> } #>  #> #ffdccmiygy .gt_col_headings { #>   border-top-style: solid; #>   border-top-width: 2px; #>   border-top-color: #D3D3D3; #>   border-bottom-style: solid; #>   border-bottom-width: 2px; #>   border-bottom-color: #D3D3D3; #>   border-left-style: none; #>   border-left-width: 1px; #>   border-left-color: #D3D3D3; #>   border-right-style: none; #>   border-right-width: 1px; #>   border-right-color: #D3D3D3; #> } #>  #> #ffdccmiygy .gt_col_heading { #>   color: #333333; #>   background-color: #FFFFFF; #>   font-size: 100%; #>   font-weight: normal; #>   text-transform: inherit; #>   border-left-style: none; #>   border-left-width: 1px; #>   border-left-color: #D3D3D3; #>   border-right-style: none; #>   border-right-width: 1px; #>   border-right-color: #D3D3D3; #>   vertical-align: bottom; #>   padding-top: 5px; #>   padding-bottom: 6px; #>   padding-left: 5px; #>   padding-right: 5px; #>   overflow-x: hidden; #> } #>  #> #ffdccmiygy .gt_column_spanner_outer { #>   color: #333333; #>   background-color: #FFFFFF; #>   font-size: 100%; #>   font-weight: normal; #>   text-transform: inherit; #>   padding-top: 0; #>   padding-bottom: 0; #>   padding-left: 4px; #>   padding-right: 4px; #> } #>  #> #ffdccmiygy .gt_column_spanner_outer:first-child { #>   padding-left: 0; #> } #>  #> #ffdccmiygy .gt_column_spanner_outer:last-child { #>   padding-right: 0; #> } #>  #> #ffdccmiygy .gt_column_spanner { #>   border-bottom-style: solid; #>   border-bottom-width: 2px; #>   border-bottom-color: #D3D3D3; #>   vertical-align: bottom; #>   padding-top: 5px; #>   padding-bottom: 5px; #>   overflow-x: hidden; #>   display: inline-block; #>   width: 100%; #> } #>  #> #ffdccmiygy .gt_spanner_row { #>   border-bottom-style: hidden; #> } #>  #> #ffdccmiygy .gt_group_heading { #>   padding-top: 8px; #>   padding-bottom: 8px; #>   padding-left: 5px; #>   padding-right: 5px; #>   color: #333333; #>   background-color: #FFFFFF; #>   font-size: 100%; #>   font-weight: initial; #>   text-transform: inherit; #>   border-top-style: solid; #>   border-top-width: 2px; #>   border-top-color: #D3D3D3; #>   border-bottom-style: solid; #>   border-bottom-width: 2px; #>   border-bottom-color: #D3D3D3; #>   border-left-style: none; #>   border-left-width: 1px; #>   border-left-color: #D3D3D3; #>   border-right-style: none; #>   border-right-width: 1px; #>   border-right-color: #D3D3D3; #>   vertical-align: middle; #>   text-align: left; #> } #>  #> #ffdccmiygy .gt_empty_group_heading { #>   padding: 0.5px; #>   color: #333333; #>   background-color: #FFFFFF; #>   font-size: 100%; #>   font-weight: initial; #>   border-top-style: solid; #>   border-top-width: 2px; #>   border-top-color: #D3D3D3; #>   border-bottom-style: solid; #>   border-bottom-width: 2px; #>   border-bottom-color: #D3D3D3; #>   vertical-align: middle; #> } #>  #> #ffdccmiygy .gt_from_md > :first-child { #>   margin-top: 0; #> } #>  #> #ffdccmiygy .gt_from_md > :last-child { #>   margin-bottom: 0; #> } #>  #> #ffdccmiygy .gt_row { #>   padding-top: 8px; #>   padding-bottom: 8px; #>   padding-left: 5px; #>   padding-right: 5px; #>   margin: 10px; #>   border-top-style: solid; #>   border-top-width: 1px; #>   border-top-color: #D3D3D3; #>   border-left-style: none; #>   border-left-width: 1px; #>   border-left-color: #D3D3D3; #>   border-right-style: none; #>   border-right-width: 1px; #>   border-right-color: #D3D3D3; #>   vertical-align: middle; #>   overflow-x: hidden; #> } #>  #> #ffdccmiygy .gt_stub { #>   color: #333333; #>   background-color: #FFFFFF; #>   font-size: 100%; #>   font-weight: initial; #>   text-transform: inherit; #>   border-right-style: solid; #>   border-right-width: 2px; #>   border-right-color: #D3D3D3; #>   padding-left: 5px; #>   padding-right: 5px; #> } #>  #> #ffdccmiygy .gt_stub_row_group { #>   color: #333333; #>   background-color: #FFFFFF; #>   font-size: 100%; #>   font-weight: initial; #>   text-transform: inherit; #>   border-right-style: solid; #>   border-right-width: 2px; #>   border-right-color: #D3D3D3; #>   padding-left: 5px; #>   padding-right: 5px; #>   vertical-align: top; #> } #>  #> #ffdccmiygy .gt_row_group_first td { #>   border-top-width: 2px; #> } #>  #> #ffdccmiygy .gt_row_group_first th { #>   border-top-width: 2px; #> } #>  #> #ffdccmiygy .gt_summary_row { #>   color: #333333; #>   background-color: #FFFFFF; #>   text-transform: inherit; #>   padding-top: 8px; #>   padding-bottom: 8px; #>   padding-left: 5px; #>   padding-right: 5px; #> } #>  #> #ffdccmiygy .gt_first_summary_row { #>   border-top-style: solid; #>   border-top-color: #D3D3D3; #> } #>  #> #ffdccmiygy .gt_first_summary_row.thick { #>   border-top-width: 2px; #> } #>  #> #ffdccmiygy .gt_last_summary_row { #>   padding-top: 8px; #>   padding-bottom: 8px; #>   padding-left: 5px; #>   padding-right: 5px; #>   border-bottom-style: solid; #>   border-bottom-width: 2px; #>   border-bottom-color: #D3D3D3; #> } #>  #> #ffdccmiygy .gt_grand_summary_row { #>   color: #333333; #>   background-color: #FFFFFF; #>   text-transform: inherit; #>   padding-top: 8px; #>   padding-bottom: 8px; #>   padding-left: 5px; #>   padding-right: 5px; #> } #>  #> #ffdccmiygy .gt_first_grand_summary_row { #>   padding-top: 8px; #>   padding-bottom: 8px; #>   padding-left: 5px; #>   padding-right: 5px; #>   border-top-style: double; #>   border-top-width: 6px; #>   border-top-color: #D3D3D3; #> } #>  #> #ffdccmiygy .gt_last_grand_summary_row_top { #>   padding-top: 8px; #>   padding-bottom: 8px; #>   padding-left: 5px; #>   padding-right: 5px; #>   border-bottom-style: double; #>   border-bottom-width: 6px; #>   border-bottom-color: #D3D3D3; #> } #>  #> #ffdccmiygy .gt_striped { #>   background-color: rgba(128, 128, 128, 0.05); #> } #>  #> #ffdccmiygy .gt_table_body { #>   border-top-style: solid; #>   border-top-width: 2px; #>   border-top-color: #D3D3D3; #>   border-bottom-style: solid; #>   border-bottom-width: 2px; #>   border-bottom-color: #D3D3D3; #> } #>  #> #ffdccmiygy .gt_footnotes { #>   color: #333333; #>   background-color: #FFFFFF; #>   border-bottom-style: none; #>   border-bottom-width: 2px; #>   border-bottom-color: #D3D3D3; #>   border-left-style: none; #>   border-left-width: 2px; #>   border-left-color: #D3D3D3; #>   border-right-style: none; #>   border-right-width: 2px; #>   border-right-color: #D3D3D3; #> } #>  #> #ffdccmiygy .gt_footnote { #>   margin: 0px; #>   font-size: 90%; #>   padding-top: 4px; #>   padding-bottom: 4px; #>   padding-left: 5px; #>   padding-right: 5px; #> } #>  #> #ffdccmiygy .gt_sourcenotes { #>   color: #333333; #>   background-color: #FFFFFF; #>   border-bottom-style: none; #>   border-bottom-width: 2px; #>   border-bottom-color: #D3D3D3; #>   border-left-style: none; #>   border-left-width: 2px; #>   border-left-color: #D3D3D3; #>   border-right-style: none; #>   border-right-width: 2px; #>   border-right-color: #D3D3D3; #> } #>  #> #ffdccmiygy .gt_sourcenote { #>   font-size: 90%; #>   padding-top: 4px; #>   padding-bottom: 4px; #>   padding-left: 5px; #>   padding-right: 5px; #> } #>  #> #ffdccmiygy .gt_left { #>   text-align: left; #> } #>  #> #ffdccmiygy .gt_center { #>   text-align: center; #> } #>  #> #ffdccmiygy .gt_right { #>   text-align: right; #>   font-variant-numeric: tabular-nums; #> } #>  #> #ffdccmiygy .gt_font_normal { #>   font-weight: normal; #> } #>  #> #ffdccmiygy .gt_font_bold { #>   font-weight: bold; #> } #>  #> #ffdccmiygy .gt_font_italic { #>   font-style: italic; #> } #>  #> #ffdccmiygy .gt_super { #>   font-size: 65%; #> } #>  #> #ffdccmiygy .gt_footnote_marks { #>   font-size: 75%; #>   vertical-align: 0.4em; #>   position: initial; #> } #>  #> #ffdccmiygy .gt_asterisk { #>   font-size: 100%; #>   vertical-align: 0; #> } #>  #> #ffdccmiygy .gt_indent_1 { #>   text-indent: 5px; #> } #>  #> #ffdccmiygy .gt_indent_2 { #>   text-indent: 10px; #> } #>  #> #ffdccmiygy .gt_indent_3 { #>   text-indent: 15px; #> } #>  #> #ffdccmiygy .gt_indent_4 { #>   text-indent: 20px; #> } #>  #> #ffdccmiygy .gt_indent_5 { #>   text-indent: 25px; #> } #> <\/style> #>   <table class=\"gt_table\" data-quarto-disable-processing=\"false\" data-quarto-bootstrap=\"false\"> #>   <thead> #>     <tr class=\"gt_col_headings gt_spanner_row\"> #>       <th class=\"gt_col_heading gt_columns_bottom_border gt_left\" rowspan=\"2\" colspan=\"1\" style=\"text-align: center; font-weight: bold;\" scope=\"col\" id=\"CDM name\">CDM name<\/th> #>       <th class=\"gt_col_heading gt_columns_bottom_border gt_left\" rowspan=\"2\" colspan=\"1\" style=\"text-align: center; font-weight: bold;\" scope=\"col\" id=\"Variable name\">Variable name<\/th> #>       <th class=\"gt_col_heading gt_columns_bottom_border gt_left\" rowspan=\"2\" colspan=\"1\" style=\"text-align: center; font-weight: bold;\" scope=\"col\" id=\"Variable level\">Variable level<\/th> #>       <th class=\"gt_col_heading gt_columns_bottom_border gt_left\" rowspan=\"2\" colspan=\"1\" style=\"text-align: center; font-weight: bold;\" scope=\"col\" id=\"Estimate name\">Estimate name<\/th> #>       <th class=\"gt_center gt_columns_top_border gt_column_spanner_outer\" rowspan=\"1\" colspan=\"1\" style=\"background-color: #C8C8C8; text-align: center; font-weight: bold;\" scope=\"col\" id=\"Cohort name\"> #>         <span class=\"gt_column_spanner\">Cohort name<\/span> #>       <\/th> #>     <\/tr> #>     <tr class=\"gt_col_headings\"> #>       <th class=\"gt_col_heading gt_columns_bottom_border gt_left\" rowspan=\"1\" colspan=\"1\" scope=\"col\" id=\"Cohort 1\">Cohort 1<\/th> #>     <\/tr> #>   <\/thead> #>   <tbody class=\"gt_table_body\"> #>     <tr><td headers=\"CDM name\" class=\"gt_row gt_left\" style=\"text-align: left;\">PP_MOCK<\/td> #> <td headers=\"Variable name\" class=\"gt_row gt_left\" style=\"text-align: left; border-left-width: 1px; border-left-style: solid; border-left-color: #D3D3D3; border-right-width: 1px; border-right-style: solid; border-right-color: #D3D3D3; border-top-width: 1px; border-top-style: solid; border-top-color: #D3D3D3; border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: #D3D3D3;\">Number records<\/td> #> <td headers=\"Variable level\" class=\"gt_row gt_left\" style=\"text-align: left; border-left-width: 1px; border-left-style: solid; border-left-color: #D3D3D3; border-right-width: 1px; border-right-style: solid; border-right-color: #D3D3D3; border-top-width: 1px; border-top-style: solid; border-top-color: #D3D3D3; border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: #D3D3D3;\">-<\/td> #> <td headers=\"Estimate name\" class=\"gt_row gt_left\" style=\"text-align: left; border-left-width: 1px; border-left-style: solid; border-left-color: #D3D3D3; border-right-width: 1px; border-right-style: solid; border-right-color: #D3D3D3; border-top-width: 1px; border-top-style: solid; border-top-color: #D3D3D3; border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: #D3D3D3;\">N<\/td> #> <td headers=\"[header]Cohort name #> [header_level]Cohort 1\" class=\"gt_row gt_left\" style=\"text-align: right;\">&lt;5<\/td><\/tr> #>     <tr><td headers=\"CDM name\" class=\"gt_row gt_left\" style=\"text-align: left; border-top-width: 1px; border-top-style: hidden; border-top-color: #000000;\"><\/td> #> <td headers=\"Variable name\" class=\"gt_row gt_left\" style=\"text-align: left; border-left-width: 1px; border-left-style: solid; border-left-color: #D3D3D3; border-right-width: 1px; border-right-style: solid; border-right-color: #D3D3D3; border-top-width: 1px; border-top-style: solid; border-top-color: #D3D3D3; border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: #D3D3D3;\">Number subjects<\/td> #> <td headers=\"Variable level\" class=\"gt_row gt_left\" style=\"text-align: left; border-left-width: 1px; border-left-style: solid; border-left-color: #D3D3D3; border-right-width: 1px; border-right-style: solid; border-right-color: #D3D3D3; border-top-width: 1px; border-top-style: solid; border-top-color: #D3D3D3; border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: #D3D3D3;\">-<\/td> #> <td headers=\"Estimate name\" class=\"gt_row gt_left\" style=\"text-align: left; border-left-width: 1px; border-left-style: solid; border-left-color: #D3D3D3; border-right-width: 1px; border-right-style: solid; border-right-color: #D3D3D3; border-top-width: 1px; border-top-style: solid; border-top-color: #D3D3D3; border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: #D3D3D3;\">N<\/td> #> <td headers=\"[header]Cohort name #> [header_level]Cohort 1\" class=\"gt_row gt_left\" style=\"text-align: right;\">&lt;5<\/td><\/tr> #>     <tr><td headers=\"CDM name\" class=\"gt_row gt_left\" style=\"text-align: left; border-top-width: 1px; border-top-style: hidden; border-top-color: #000000;\"><\/td> #> <td headers=\"Variable name\" class=\"gt_row gt_left\" style=\"text-align: left; border-left-width: 1px; border-left-style: solid; border-left-color: #D3D3D3; border-right-width: 1px; border-right-style: solid; border-right-color: #D3D3D3; border-top-width: 1px; border-top-style: solid; border-top-color: #D3D3D3; border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: #D3D3D3;\">Cohort start date<\/td> #> <td headers=\"Variable level\" class=\"gt_row gt_left\" style=\"text-align: left; border-left-width: 1px; border-left-style: solid; border-left-color: #D3D3D3; border-right-width: 1px; border-right-style: solid; border-right-color: #D3D3D3; border-top-width: 1px; border-top-style: solid; border-top-color: #D3D3D3; border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: #D3D3D3;\">-<\/td> #> <td headers=\"Estimate name\" class=\"gt_row gt_left\" style=\"text-align: left; border-left-width: 1px; border-left-style: solid; border-left-color: #D3D3D3; border-right-width: 1px; border-right-style: solid; border-right-color: #D3D3D3; border-top-width: 1px; border-top-style: solid; border-top-color: #D3D3D3; border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: #D3D3D3;\">Median [Q25 - Q75]<\/td> #> <td headers=\"[header]Cohort name #> [header_level]Cohort 1\" class=\"gt_row gt_left\" style=\"text-align: right;\">2020-03-17 [2020-02-08 - 2020-04-24]<\/td><\/tr> #>     <tr><td headers=\"CDM name\" class=\"gt_row gt_left\" style=\"text-align: left; border-top-width: 1px; border-top-style: hidden; border-top-color: #000000;\"><\/td> #> <td headers=\"Variable name\" class=\"gt_row gt_left\" style=\"text-align: left; border-left-width: 1px; border-left-style: solid; border-left-color: #D3D3D3; border-right-width: 1px; border-right-style: solid; border-right-color: #D3D3D3; border-top-width: 1px; border-top-style: hidden; border-top-color: #000000; border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: #D3D3D3;\"><\/td> #> <td headers=\"Variable level\" class=\"gt_row gt_left\" style=\"text-align: left; border-left-width: 1px; border-left-style: solid; border-left-color: #D3D3D3; border-right-width: 1px; border-right-style: solid; border-right-color: #D3D3D3; border-top-width: 1px; border-top-style: hidden; border-top-color: #000000; border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: #D3D3D3;\"><\/td> #> <td headers=\"Estimate name\" class=\"gt_row gt_left\" style=\"text-align: left; border-left-width: 1px; border-left-style: solid; border-left-color: #D3D3D3; border-right-width: 1px; border-right-style: solid; border-right-color: #D3D3D3; border-top-width: 1px; border-top-style: solid; border-top-color: #D3D3D3; border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: #D3D3D3;\">[Q05 - Q95]<\/td> #> <td headers=\"[header]Cohort name #> [header_level]Cohort 1\" class=\"gt_row gt_left\" style=\"text-align: right;\">[2020-01-09 - 2020-05-24]<\/td><\/tr> #>     <tr><td headers=\"CDM name\" class=\"gt_row gt_left\" style=\"text-align: left; border-top-width: 1px; border-top-style: hidden; border-top-color: #000000;\"><\/td> #> <td headers=\"Variable name\" class=\"gt_row gt_left\" style=\"text-align: left; border-left-width: 1px; border-left-style: solid; border-left-color: #D3D3D3; border-right-width: 1px; border-right-style: solid; border-right-color: #D3D3D3; border-top-width: 1px; border-top-style: hidden; border-top-color: #000000; border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: #D3D3D3;\"><\/td> #> <td headers=\"Variable level\" class=\"gt_row gt_left\" style=\"text-align: left; border-left-width: 1px; border-left-style: solid; border-left-color: #D3D3D3; border-right-width: 1px; border-right-style: solid; border-right-color: #D3D3D3; border-top-width: 1px; border-top-style: hidden; border-top-color: #000000; border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: #D3D3D3;\"><\/td> #> <td headers=\"Estimate name\" class=\"gt_row gt_left\" style=\"text-align: left; border-left-width: 1px; border-left-style: solid; border-left-color: #D3D3D3; border-right-width: 1px; border-right-style: solid; border-right-color: #D3D3D3; border-top-width: 1px; border-top-style: solid; border-top-color: #D3D3D3; border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: #D3D3D3;\">Range<\/td> #> <td headers=\"[header]Cohort name #> [header_level]Cohort 1\" class=\"gt_row gt_left\" style=\"text-align: right;\">2020-01-01 to 2020-06-01<\/td><\/tr> #>     <tr><td headers=\"CDM name\" class=\"gt_row gt_left\" style=\"text-align: left; border-top-width: 1px; border-top-style: hidden; border-top-color: #000000;\"><\/td> #> <td headers=\"Variable name\" class=\"gt_row gt_left\" style=\"text-align: left; border-left-width: 1px; border-left-style: solid; border-left-color: #D3D3D3; border-right-width: 1px; border-right-style: solid; border-right-color: #D3D3D3; border-top-width: 1px; border-top-style: solid; border-top-color: #D3D3D3; border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: #D3D3D3;\">Cohort end date<\/td> #> <td headers=\"Variable level\" class=\"gt_row gt_left\" style=\"text-align: left; border-left-width: 1px; border-left-style: solid; border-left-color: #D3D3D3; border-right-width: 1px; border-right-style: solid; border-right-color: #D3D3D3; border-top-width: 1px; border-top-style: solid; border-top-color: #D3D3D3; border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: #D3D3D3;\">-<\/td> #> <td headers=\"Estimate name\" class=\"gt_row gt_left\" style=\"text-align: left; border-left-width: 1px; border-left-style: solid; border-left-color: #D3D3D3; border-right-width: 1px; border-right-style: solid; border-right-color: #D3D3D3; border-top-width: 1px; border-top-style: solid; border-top-color: #D3D3D3; border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: #D3D3D3;\">Median [Q25 - Q75]<\/td> #> <td headers=\"[header]Cohort name #> [header_level]Cohort 1\" class=\"gt_row gt_left\" style=\"text-align: right;\">2020-06-01 [2020-05-02 - 2020-07-01]<\/td><\/tr> #>     <tr><td headers=\"CDM name\" class=\"gt_row gt_left\" style=\"text-align: left; border-top-width: 1px; border-top-style: hidden; border-top-color: #000000;\"><\/td> #> <td headers=\"Variable name\" class=\"gt_row gt_left\" style=\"text-align: left; border-left-width: 1px; border-left-style: solid; border-left-color: #D3D3D3; border-right-width: 1px; border-right-style: solid; border-right-color: #D3D3D3; border-top-width: 1px; border-top-style: hidden; border-top-color: #000000; border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: #D3D3D3;\"><\/td> #> <td headers=\"Variable level\" class=\"gt_row gt_left\" style=\"text-align: left; border-left-width: 1px; border-left-style: solid; border-left-color: #D3D3D3; border-right-width: 1px; border-right-style: solid; border-right-color: #D3D3D3; border-top-width: 1px; border-top-style: hidden; border-top-color: #000000; border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: #D3D3D3;\"><\/td> #> <td headers=\"Estimate name\" class=\"gt_row gt_left\" style=\"text-align: left; border-left-width: 1px; border-left-style: solid; border-left-color: #D3D3D3; border-right-width: 1px; border-right-style: solid; border-right-color: #D3D3D3; border-top-width: 1px; border-top-style: solid; border-top-color: #D3D3D3; border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: #D3D3D3;\">[Q05 - Q95]<\/td> #> <td headers=\"[header]Cohort name #> [header_level]Cohort 1\" class=\"gt_row gt_left\" style=\"text-align: right;\">[2020-04-07 - 2020-07-26]<\/td><\/tr> #>     <tr><td headers=\"CDM name\" class=\"gt_row gt_left\" style=\"text-align: left; border-top-width: 1px; border-top-style: hidden; border-top-color: #000000;\"><\/td> #> <td headers=\"Variable name\" class=\"gt_row gt_left\" style=\"text-align: left; border-left-width: 1px; border-left-style: solid; border-left-color: #D3D3D3; border-right-width: 1px; border-right-style: solid; border-right-color: #D3D3D3; border-top-width: 1px; border-top-style: hidden; border-top-color: #000000; border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: #D3D3D3;\"><\/td> #> <td headers=\"Variable level\" class=\"gt_row gt_left\" style=\"text-align: left; border-left-width: 1px; border-left-style: solid; border-left-color: #D3D3D3; border-right-width: 1px; border-right-style: solid; border-right-color: #D3D3D3; border-top-width: 1px; border-top-style: hidden; border-top-color: #000000; border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: #D3D3D3;\"><\/td> #> <td headers=\"Estimate name\" class=\"gt_row gt_left\" style=\"text-align: left; border-left-width: 1px; border-left-style: solid; border-left-color: #D3D3D3; border-right-width: 1px; border-right-style: solid; border-right-color: #D3D3D3; border-top-width: 1px; border-top-style: solid; border-top-color: #D3D3D3; border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: #D3D3D3;\">Range<\/td> #> <td headers=\"[header]Cohort name #> [header_level]Cohort 1\" class=\"gt_row gt_left\" style=\"text-align: right;\">2020-04-01 to 2020-08-01<\/td><\/tr> #>     <tr><td headers=\"CDM name\" class=\"gt_row gt_left\" style=\"text-align: left; border-top-width: 1px; border-top-style: hidden; border-top-color: #000000;\"><\/td> #> <td headers=\"Variable name\" class=\"gt_row gt_left\" style=\"text-align: left; border-left-width: 1px; border-left-style: solid; border-left-color: #D3D3D3; border-right-width: 1px; border-right-style: solid; border-right-color: #D3D3D3; border-top-width: 1px; border-top-style: solid; border-top-color: #D3D3D3; border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: #D3D3D3;\">Age<\/td> #> <td headers=\"Variable level\" class=\"gt_row gt_left\" style=\"text-align: left; border-left-width: 1px; border-left-style: solid; border-left-color: #D3D3D3; border-right-width: 1px; border-right-style: solid; border-right-color: #D3D3D3; border-top-width: 1px; border-top-style: solid; border-top-color: #D3D3D3; border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: #D3D3D3;\">-<\/td> #> <td headers=\"Estimate name\" class=\"gt_row gt_left\" style=\"text-align: left; border-left-width: 1px; border-left-style: solid; border-left-color: #D3D3D3; border-right-width: 1px; border-right-style: solid; border-right-color: #D3D3D3; border-top-width: 1px; border-top-style: solid; border-top-color: #D3D3D3; border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: #D3D3D3;\">Median [Q25 - Q75]<\/td> #> <td headers=\"[header]Cohort name #> [header_level]Cohort 1\" class=\"gt_row gt_left\" style=\"text-align: right;\">27.00 [27.00 - 27.00]<\/td><\/tr> #>     <tr><td headers=\"CDM name\" class=\"gt_row gt_left\" style=\"text-align: left; border-top-width: 1px; border-top-style: hidden; border-top-color: #000000;\"><\/td> #> <td headers=\"Variable name\" class=\"gt_row gt_left\" style=\"text-align: left; border-left-width: 1px; border-left-style: solid; border-left-color: #D3D3D3; border-right-width: 1px; border-right-style: solid; border-right-color: #D3D3D3; border-top-width: 1px; border-top-style: hidden; border-top-color: #000000; border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: #D3D3D3;\"><\/td> #> <td headers=\"Variable level\" class=\"gt_row gt_left\" style=\"text-align: left; border-left-width: 1px; border-left-style: solid; border-left-color: #D3D3D3; border-right-width: 1px; border-right-style: solid; border-right-color: #D3D3D3; border-top-width: 1px; border-top-style: hidden; border-top-color: #000000; border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: #D3D3D3;\"><\/td> #> <td headers=\"Estimate name\" class=\"gt_row gt_left\" style=\"text-align: left; border-left-width: 1px; border-left-style: solid; border-left-color: #D3D3D3; border-right-width: 1px; border-right-style: solid; border-right-color: #D3D3D3; border-top-width: 1px; border-top-style: solid; border-top-color: #D3D3D3; border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: #D3D3D3;\">[Q05 - Q95]<\/td> #> <td headers=\"[header]Cohort name #> [header_level]Cohort 1\" class=\"gt_row gt_left\" style=\"text-align: right;\">[27.00 - 27.00]<\/td><\/tr> #>     <tr><td headers=\"CDM name\" class=\"gt_row gt_left\" style=\"text-align: left; border-top-width: 1px; border-top-style: hidden; border-top-color: #000000;\"><\/td> #> <td headers=\"Variable name\" class=\"gt_row gt_left\" style=\"text-align: left; border-left-width: 1px; border-left-style: solid; border-left-color: #D3D3D3; border-right-width: 1px; border-right-style: solid; border-right-color: #D3D3D3; border-top-width: 1px; border-top-style: hidden; border-top-color: #000000; border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: #D3D3D3;\"><\/td> #> <td headers=\"Variable level\" class=\"gt_row gt_left\" style=\"text-align: left; border-left-width: 1px; border-left-style: solid; border-left-color: #D3D3D3; border-right-width: 1px; border-right-style: solid; border-right-color: #D3D3D3; border-top-width: 1px; border-top-style: hidden; border-top-color: #000000; border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: #D3D3D3;\"><\/td> #> <td headers=\"Estimate name\" class=\"gt_row gt_left\" style=\"text-align: left; border-left-width: 1px; border-left-style: solid; border-left-color: #D3D3D3; border-right-width: 1px; border-right-style: solid; border-right-color: #D3D3D3; border-top-width: 1px; border-top-style: solid; border-top-color: #D3D3D3; border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: #D3D3D3;\">Mean (SD)<\/td> #> <td headers=\"[header]Cohort name #> [header_level]Cohort 1\" class=\"gt_row gt_left\" style=\"text-align: right;\">27.00 (0.00)<\/td><\/tr> #>     <tr><td headers=\"CDM name\" class=\"gt_row gt_left\" style=\"text-align: left; border-top-width: 1px; border-top-style: hidden; border-top-color: #000000;\"><\/td> #> <td headers=\"Variable name\" class=\"gt_row gt_left\" style=\"text-align: left; border-left-width: 1px; border-left-style: solid; border-left-color: #D3D3D3; border-right-width: 1px; border-right-style: solid; border-right-color: #D3D3D3; border-top-width: 1px; border-top-style: hidden; border-top-color: #000000; border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: #D3D3D3;\"><\/td> #> <td headers=\"Variable level\" class=\"gt_row gt_left\" style=\"text-align: left; border-left-width: 1px; border-left-style: solid; border-left-color: #D3D3D3; border-right-width: 1px; border-right-style: solid; border-right-color: #D3D3D3; border-top-width: 1px; border-top-style: hidden; border-top-color: #000000; border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: #D3D3D3;\"><\/td> #> <td headers=\"Estimate name\" class=\"gt_row gt_left\" style=\"text-align: left; border-left-width: 1px; border-left-style: solid; border-left-color: #D3D3D3; border-right-width: 1px; border-right-style: solid; border-right-color: #D3D3D3; border-top-width: 1px; border-top-style: solid; border-top-color: #D3D3D3; border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: #D3D3D3;\">Range<\/td> #> <td headers=\"[header]Cohort name #> [header_level]Cohort 1\" class=\"gt_row gt_left\" style=\"text-align: right;\">27.00 to 27.00<\/td><\/tr> #>     <tr><td headers=\"CDM name\" class=\"gt_row gt_left\" style=\"text-align: left; border-top-width: 1px; border-top-style: hidden; border-top-color: #000000;\"><\/td> #> <td headers=\"Variable name\" class=\"gt_row gt_left\" style=\"text-align: left; border-left-width: 1px; border-left-style: solid; border-left-color: #D3D3D3; border-right-width: 1px; border-right-style: solid; border-right-color: #D3D3D3; border-top-width: 1px; border-top-style: solid; border-top-color: #D3D3D3; border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: #D3D3D3;\">Sex<\/td> #> <td headers=\"Variable level\" class=\"gt_row gt_left\" style=\"text-align: left; border-left-width: 1px; border-left-style: solid; border-left-color: #D3D3D3; border-right-width: 1px; border-right-style: solid; border-right-color: #D3D3D3; border-top-width: 1px; border-top-style: solid; border-top-color: #D3D3D3; border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: #D3D3D3;\">Female<\/td> #> <td headers=\"Estimate name\" class=\"gt_row gt_left\" style=\"text-align: left; border-left-width: 1px; border-left-style: solid; border-left-color: #D3D3D3; border-right-width: 1px; border-right-style: solid; border-right-color: #D3D3D3; border-top-width: 1px; border-top-style: solid; border-top-color: #D3D3D3; border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: #D3D3D3;\">N (%)<\/td> #> <td headers=\"[header]Cohort name #> [header_level]Cohort 1\" class=\"gt_row gt_left\" style=\"text-align: right;\">&lt;5 (&lt;5%)<\/td><\/tr> #>     <tr><td headers=\"CDM name\" class=\"gt_row gt_left\" style=\"text-align: left; border-top-width: 1px; border-top-style: hidden; border-top-color: #000000;\"><\/td> #> <td headers=\"Variable name\" class=\"gt_row gt_left\" style=\"text-align: left; border-left-width: 1px; border-left-style: solid; border-left-color: #D3D3D3; border-right-width: 1px; border-right-style: solid; border-right-color: #D3D3D3; border-top-width: 1px; border-top-style: solid; border-top-color: #D3D3D3; border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: #D3D3D3;\">Prior observation<\/td> #> <td headers=\"Variable level\" class=\"gt_row gt_left\" style=\"text-align: left; border-left-width: 1px; border-left-style: solid; border-left-color: #D3D3D3; border-right-width: 1px; border-right-style: solid; border-right-color: #D3D3D3; border-top-width: 1px; border-top-style: solid; border-top-color: #D3D3D3; border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: #D3D3D3;\">-<\/td> #> <td headers=\"Estimate name\" class=\"gt_row gt_left\" style=\"text-align: left; border-left-width: 1px; border-left-style: solid; border-left-color: #D3D3D3; border-right-width: 1px; border-right-style: solid; border-right-color: #D3D3D3; border-top-width: 1px; border-top-style: solid; border-top-color: #D3D3D3; border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: #D3D3D3;\">Median [Q25 - Q75]<\/td> #> <td headers=\"[header]Cohort name #> [header_level]Cohort 1\" class=\"gt_row gt_left\" style=\"text-align: right;\">5,120.00 [5,082.00 - 5,158.00]<\/td><\/tr> #>     <tr><td headers=\"CDM name\" class=\"gt_row gt_left\" style=\"text-align: left; border-top-width: 1px; border-top-style: hidden; border-top-color: #000000;\"><\/td> #> <td headers=\"Variable name\" class=\"gt_row gt_left\" style=\"text-align: left; border-left-width: 1px; border-left-style: solid; border-left-color: #D3D3D3; border-right-width: 1px; border-right-style: solid; border-right-color: #D3D3D3; border-top-width: 1px; border-top-style: hidden; border-top-color: #000000; border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: #D3D3D3;\"><\/td> #> <td headers=\"Variable level\" class=\"gt_row gt_left\" style=\"text-align: left; border-left-width: 1px; border-left-style: solid; border-left-color: #D3D3D3; border-right-width: 1px; border-right-style: solid; border-right-color: #D3D3D3; border-top-width: 1px; border-top-style: hidden; border-top-color: #000000; border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: #D3D3D3;\"><\/td> #> <td headers=\"Estimate name\" class=\"gt_row gt_left\" style=\"text-align: left; border-left-width: 1px; border-left-style: solid; border-left-color: #D3D3D3; border-right-width: 1px; border-right-style: solid; border-right-color: #D3D3D3; border-top-width: 1px; border-top-style: solid; border-top-color: #D3D3D3; border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: #D3D3D3;\">[Q05 - Q95]<\/td> #> <td headers=\"[header]Cohort name #> [header_level]Cohort 1\" class=\"gt_row gt_left\" style=\"text-align: right;\">[5,051.60 - 5,188.40]<\/td><\/tr> #>     <tr><td headers=\"CDM name\" class=\"gt_row gt_left\" style=\"text-align: left; border-top-width: 1px; border-top-style: hidden; border-top-color: #000000;\"><\/td> #> <td headers=\"Variable name\" class=\"gt_row gt_left\" style=\"text-align: left; border-left-width: 1px; border-left-style: solid; border-left-color: #D3D3D3; border-right-width: 1px; border-right-style: solid; border-right-color: #D3D3D3; border-top-width: 1px; border-top-style: hidden; border-top-color: #000000; border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: #D3D3D3;\"><\/td> #> <td headers=\"Variable level\" class=\"gt_row gt_left\" style=\"text-align: left; border-left-width: 1px; border-left-style: solid; border-left-color: #D3D3D3; border-right-width: 1px; border-right-style: solid; border-right-color: #D3D3D3; border-top-width: 1px; border-top-style: hidden; border-top-color: #000000; border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: #D3D3D3;\"><\/td> #> <td headers=\"Estimate name\" class=\"gt_row gt_left\" style=\"text-align: left; border-left-width: 1px; border-left-style: solid; border-left-color: #D3D3D3; border-right-width: 1px; border-right-style: solid; border-right-color: #D3D3D3; border-top-width: 1px; border-top-style: solid; border-top-color: #D3D3D3; border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: #D3D3D3;\">Mean (SD)<\/td> #> <td headers=\"[header]Cohort name #> [header_level]Cohort 1\" class=\"gt_row gt_left\" style=\"text-align: right;\">5,120.00 (107.48)<\/td><\/tr> #>     <tr><td headers=\"CDM name\" class=\"gt_row gt_left\" style=\"text-align: left; border-top-width: 1px; border-top-style: hidden; border-top-color: #000000;\"><\/td> #> <td headers=\"Variable name\" class=\"gt_row gt_left\" style=\"text-align: left; border-left-width: 1px; border-left-style: solid; border-left-color: #D3D3D3; border-right-width: 1px; border-right-style: solid; border-right-color: #D3D3D3; border-top-width: 1px; border-top-style: hidden; border-top-color: #000000; border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: #D3D3D3;\"><\/td> #> <td headers=\"Variable level\" class=\"gt_row gt_left\" style=\"text-align: left; border-left-width: 1px; border-left-style: solid; border-left-color: #D3D3D3; border-right-width: 1px; border-right-style: solid; border-right-color: #D3D3D3; border-top-width: 1px; border-top-style: hidden; border-top-color: #000000; border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: #D3D3D3;\"><\/td> #> <td headers=\"Estimate name\" class=\"gt_row gt_left\" style=\"text-align: left; border-left-width: 1px; border-left-style: solid; border-left-color: #D3D3D3; border-right-width: 1px; border-right-style: solid; border-right-color: #D3D3D3; border-top-width: 1px; border-top-style: solid; border-top-color: #D3D3D3; border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: #D3D3D3;\">Range<\/td> #> <td headers=\"[header]Cohort name #> [header_level]Cohort 1\" class=\"gt_row gt_left\" style=\"text-align: right;\">5,044.00 to 5,196.00<\/td><\/tr> #>     <tr><td headers=\"CDM name\" class=\"gt_row gt_left\" style=\"text-align: left; border-top-width: 1px; border-top-style: hidden; border-top-color: #000000;\"><\/td> #> <td headers=\"Variable name\" class=\"gt_row gt_left\" style=\"text-align: left; border-left-width: 1px; border-left-style: solid; border-left-color: #D3D3D3; border-right-width: 1px; border-right-style: solid; border-right-color: #D3D3D3; border-top-width: 1px; border-top-style: solid; border-top-color: #D3D3D3; border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: #D3D3D3;\">Future observation<\/td> #> <td headers=\"Variable level\" class=\"gt_row gt_left\" style=\"text-align: left; border-left-width: 1px; border-left-style: solid; border-left-color: #D3D3D3; border-right-width: 1px; border-right-style: solid; border-right-color: #D3D3D3; border-top-width: 1px; border-top-style: solid; border-top-color: #D3D3D3; border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: #D3D3D3;\">-<\/td> #> <td headers=\"Estimate name\" class=\"gt_row gt_left\" style=\"text-align: left; border-left-width: 1px; border-left-style: solid; border-left-color: #D3D3D3; border-right-width: 1px; border-right-style: solid; border-right-color: #D3D3D3; border-top-width: 1px; border-top-style: solid; border-top-color: #D3D3D3; border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: #D3D3D3;\">Median [Q25 - Q75]<\/td> #> <td headers=\"[header]Cohort name #> [header_level]Cohort 1\" class=\"gt_row gt_left\" style=\"text-align: right;\">29,965.00 [29,927.00 - 30,003.00]<\/td><\/tr> #>     <tr><td headers=\"CDM name\" class=\"gt_row gt_left\" style=\"text-align: left; border-top-width: 1px; border-top-style: hidden; border-top-color: #000000;\"><\/td> #> <td headers=\"Variable name\" class=\"gt_row gt_left\" style=\"text-align: left; border-left-width: 1px; border-left-style: solid; border-left-color: #D3D3D3; border-right-width: 1px; border-right-style: solid; border-right-color: #D3D3D3; border-top-width: 1px; border-top-style: hidden; border-top-color: #000000; border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: #D3D3D3;\"><\/td> #> <td headers=\"Variable level\" class=\"gt_row gt_left\" style=\"text-align: left; border-left-width: 1px; border-left-style: solid; border-left-color: #D3D3D3; border-right-width: 1px; border-right-style: solid; border-right-color: #D3D3D3; border-top-width: 1px; border-top-style: hidden; border-top-color: #000000; border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: #D3D3D3;\"><\/td> #> <td headers=\"Estimate name\" class=\"gt_row gt_left\" style=\"text-align: left; border-left-width: 1px; border-left-style: solid; border-left-color: #D3D3D3; border-right-width: 1px; border-right-style: solid; border-right-color: #D3D3D3; border-top-width: 1px; border-top-style: solid; border-top-color: #D3D3D3; border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: #D3D3D3;\">[Q05 - Q95]<\/td> #> <td headers=\"[header]Cohort name #> [header_level]Cohort 1\" class=\"gt_row gt_left\" style=\"text-align: right;\">[29,896.60 - 30,033.40]<\/td><\/tr> #>     <tr><td headers=\"CDM name\" class=\"gt_row gt_left\" style=\"text-align: left; border-top-width: 1px; border-top-style: hidden; border-top-color: #000000;\"><\/td> #> <td headers=\"Variable name\" class=\"gt_row gt_left\" style=\"text-align: left; border-left-width: 1px; border-left-style: solid; border-left-color: #D3D3D3; border-right-width: 1px; border-right-style: solid; border-right-color: #D3D3D3; border-top-width: 1px; border-top-style: hidden; border-top-color: #000000; border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: #D3D3D3;\"><\/td> #> <td headers=\"Variable level\" class=\"gt_row gt_left\" style=\"text-align: left; border-left-width: 1px; border-left-style: solid; border-left-color: #D3D3D3; border-right-width: 1px; border-right-style: solid; border-right-color: #D3D3D3; border-top-width: 1px; border-top-style: hidden; border-top-color: #000000; border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: #D3D3D3;\"><\/td> #> <td headers=\"Estimate name\" class=\"gt_row gt_left\" style=\"text-align: left; border-left-width: 1px; border-left-style: solid; border-left-color: #D3D3D3; border-right-width: 1px; border-right-style: solid; border-right-color: #D3D3D3; border-top-width: 1px; border-top-style: solid; border-top-color: #D3D3D3; border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: #D3D3D3;\">Mean (SD)<\/td> #> <td headers=\"[header]Cohort name #> [header_level]Cohort 1\" class=\"gt_row gt_left\" style=\"text-align: right;\">29,965.00 (107.48)<\/td><\/tr> #>     <tr><td headers=\"CDM name\" class=\"gt_row gt_left\" style=\"text-align: left; border-top-width: 1px; border-top-style: hidden; border-top-color: #000000;\"><\/td> #> <td headers=\"Variable name\" class=\"gt_row gt_left\" style=\"text-align: left; border-left-width: 1px; border-left-style: solid; border-left-color: #D3D3D3; border-right-width: 1px; border-right-style: solid; border-right-color: #D3D3D3; border-top-width: 1px; border-top-style: hidden; border-top-color: #000000; border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: #D3D3D3;\"><\/td> #> <td headers=\"Variable level\" class=\"gt_row gt_left\" style=\"text-align: left; border-left-width: 1px; border-left-style: solid; border-left-color: #D3D3D3; border-right-width: 1px; border-right-style: solid; border-right-color: #D3D3D3; border-top-width: 1px; border-top-style: hidden; border-top-color: #000000; border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: #D3D3D3;\"><\/td> #> <td headers=\"Estimate name\" class=\"gt_row gt_left\" style=\"text-align: left; border-left-width: 1px; border-left-style: solid; border-left-color: #D3D3D3; border-right-width: 1px; border-right-style: solid; border-right-color: #D3D3D3; border-top-width: 1px; border-top-style: solid; border-top-color: #D3D3D3; border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: #D3D3D3;\">Range<\/td> #> <td headers=\"[header]Cohort name #> [header_level]Cohort 1\" class=\"gt_row gt_left\" style=\"text-align: right;\">29,889.00 to 30,041.00<\/td><\/tr> #>   <\/tbody> #>    #>    #> <\/table> #> <\/div>  CDMConnector::cdmDisconnect(cdm = cdm) # }"},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/tableCohortIntersect.html","id":null,"dir":"Reference","previous_headings":"","what":"Format a summariseCohortIntersect result into a visual table. — tableCohortIntersect","title":"Format a summariseCohortIntersect result into a visual table. — tableCohortIntersect","text":"`r lifecycle::badge(\"experimental\")`","code":""},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/tableCohortIntersect.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Format a summariseCohortIntersect result into a visual table. — tableCohortIntersect","text":"","code":"tableCohortIntersect(   result,   type = \"gt\",   formatEstimateName = c(`N (%)` = \"<count> (<percentage>%)\", `Median [Q25 - Q75]` =     \"<median> [<q25> - <q75>]\", `Mean (SD)` = \"<mean> (<sd>)\", Range = \"<min> to <max>\"),   header = c(\"group\"),   split = c(\"group\", \"strata\"),   groupColumn = NULL,   minCellCount = 5,   excludeColumns = c(\"result_id\", \"result_type\", \"package_name\", \"package_version\",     \"estimate_type\", \"additional_name\", \"additional_level\"),   .options = list() )"},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/tableCohortIntersect.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Format a summariseCohortIntersect result into a visual table. — tableCohortIntersect","text":"result result summariseCohortIntersect. type Type desired formatted table, possibilities: \"gt\", \"flextable\", \"tibble\". formatEstimateName Named list estimate name's join, sorted computation order. Indicate estimate_name's <...>. header vector containing elements go header order. Allowed : `cdm_name`, `group`, `strata`, `additional`, `variable`, `estimate`, `settings`. split vector containing name-level groups split (\"group\", \"strata\", \"additional\"), empty character vector split. groupColumn Column use group labels. minCellCount Counts results clouded. excludeColumns Columns drop output table. .options Named list additional formatting options. PatientProfiles::optionsTableCharacteristics() shows allowed arguments default values.","code":""},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/tableCohortIntersect.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Format a summariseCohortIntersect result into a visual table. — tableCohortIntersect","text":"table formatted version summariseCohortIntersect result.","code":""},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/tableCohortIntersect.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Format a summariseCohortIntersect result into a visual table. — tableCohortIntersect","text":"","code":"# \\donttest{ library(PatientProfiles)  cdm <- mockPatientProfiles()  cdm$cohort1 |>  summariseCohortIntersect(   cohortIntersect = list(     \"Medications in the prior year\" = list(       targetCohortTable = \"cohort2\", value = \"flag\", window = c(-365, -1)     )    )   ) |>   tableCohortIntersect() #> ℹ adding cohort intersect columns for table: cohort2 #> ℹ summarising data #> ✔ summariseCharacteristics finished! #> Warning: <median> [<q25> - <q75>] has not been formatted. #> Warning: <mean> (<sd>) has not been formatted. #> Warning: <min> to <max> has not been formatted. #> <div id=\"zmaszwdpqy\" style=\"padding-left:0px;padding-right:0px;padding-top:10px;padding-bottom:10px;overflow-x:auto;overflow-y:auto;width:auto;height:auto;\"> #>   <style>#zmaszwdpqy table { #>   font-family: system-ui, 'Segoe UI', Roboto, Helvetica, Arial, sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol', 'Noto Color Emoji'; #>   -webkit-font-smoothing: antialiased; #>   -moz-osx-font-smoothing: grayscale; #> } #>  #> #zmaszwdpqy thead, #zmaszwdpqy tbody, #zmaszwdpqy tfoot, #zmaszwdpqy tr, #zmaszwdpqy td, #zmaszwdpqy th { #>   border-style: none; #> } #>  #> #zmaszwdpqy p { #>   margin: 0; #>   padding: 0; #> } #>  #> #zmaszwdpqy .gt_table { #>   display: table; #>   border-collapse: collapse; #>   line-height: normal; #>   margin-left: auto; #>   margin-right: auto; #>   color: #333333; #>   font-size: 16px; #>   font-weight: normal; #>   font-style: normal; #>   background-color: #FFFFFF; #>   width: auto; #>   border-top-style: solid; #>   border-top-width: 2px; #>   border-top-color: #A8A8A8; #>   border-right-style: none; #>   border-right-width: 2px; #>   border-right-color: #D3D3D3; #>   border-bottom-style: solid; #>   border-bottom-width: 2px; #>   border-bottom-color: #A8A8A8; #>   border-left-style: none; #>   border-left-width: 2px; #>   border-left-color: #D3D3D3; #> } #>  #> #zmaszwdpqy .gt_caption { #>   padding-top: 4px; #>   padding-bottom: 4px; #> } #>  #> #zmaszwdpqy .gt_title { #>   color: #333333; #>   font-size: 125%; #>   font-weight: initial; #>   padding-top: 4px; #>   padding-bottom: 4px; #>   padding-left: 5px; #>   padding-right: 5px; #>   border-bottom-color: #FFFFFF; #>   border-bottom-width: 0; #> } #>  #> #zmaszwdpqy .gt_subtitle { #>   color: #333333; #>   font-size: 85%; #>   font-weight: initial; #>   padding-top: 3px; #>   padding-bottom: 5px; #>   padding-left: 5px; #>   padding-right: 5px; #>   border-top-color: #FFFFFF; #>   border-top-width: 0; #> } #>  #> #zmaszwdpqy .gt_heading { #>   background-color: #FFFFFF; #>   text-align: center; #>   border-bottom-color: #FFFFFF; #>   border-left-style: none; #>   border-left-width: 1px; #>   border-left-color: #D3D3D3; #>   border-right-style: none; #>   border-right-width: 1px; #>   border-right-color: #D3D3D3; #> } #>  #> #zmaszwdpqy .gt_bottom_border { #>   border-bottom-style: solid; #>   border-bottom-width: 2px; #>   border-bottom-color: #D3D3D3; #> } #>  #> #zmaszwdpqy .gt_col_headings { #>   border-top-style: solid; #>   border-top-width: 2px; #>   border-top-color: #D3D3D3; #>   border-bottom-style: solid; #>   border-bottom-width: 2px; #>   border-bottom-color: #D3D3D3; #>   border-left-style: none; #>   border-left-width: 1px; #>   border-left-color: #D3D3D3; #>   border-right-style: none; #>   border-right-width: 1px; #>   border-right-color: #D3D3D3; #> } #>  #> #zmaszwdpqy .gt_col_heading { #>   color: #333333; #>   background-color: #FFFFFF; #>   font-size: 100%; #>   font-weight: normal; #>   text-transform: inherit; #>   border-left-style: none; #>   border-left-width: 1px; #>   border-left-color: #D3D3D3; #>   border-right-style: none; #>   border-right-width: 1px; #>   border-right-color: #D3D3D3; #>   vertical-align: bottom; #>   padding-top: 5px; #>   padding-bottom: 6px; #>   padding-left: 5px; #>   padding-right: 5px; #>   overflow-x: hidden; #> } #>  #> #zmaszwdpqy .gt_column_spanner_outer { #>   color: #333333; #>   background-color: #FFFFFF; #>   font-size: 100%; #>   font-weight: normal; #>   text-transform: inherit; #>   padding-top: 0; #>   padding-bottom: 0; #>   padding-left: 4px; #>   padding-right: 4px; #> } #>  #> #zmaszwdpqy .gt_column_spanner_outer:first-child { #>   padding-left: 0; #> } #>  #> #zmaszwdpqy .gt_column_spanner_outer:last-child { #>   padding-right: 0; #> } #>  #> #zmaszwdpqy .gt_column_spanner { #>   border-bottom-style: solid; #>   border-bottom-width: 2px; #>   border-bottom-color: #D3D3D3; #>   vertical-align: bottom; #>   padding-top: 5px; #>   padding-bottom: 5px; #>   overflow-x: hidden; #>   display: inline-block; #>   width: 100%; #> } #>  #> #zmaszwdpqy .gt_spanner_row { #>   border-bottom-style: hidden; #> } #>  #> #zmaszwdpqy .gt_group_heading { #>   padding-top: 8px; #>   padding-bottom: 8px; #>   padding-left: 5px; #>   padding-right: 5px; #>   color: #333333; #>   background-color: #FFFFFF; #>   font-size: 100%; #>   font-weight: initial; #>   text-transform: inherit; #>   border-top-style: solid; #>   border-top-width: 2px; #>   border-top-color: #D3D3D3; #>   border-bottom-style: solid; #>   border-bottom-width: 2px; #>   border-bottom-color: #D3D3D3; #>   border-left-style: none; #>   border-left-width: 1px; #>   border-left-color: #D3D3D3; #>   border-right-style: none; #>   border-right-width: 1px; #>   border-right-color: #D3D3D3; #>   vertical-align: middle; #>   text-align: left; #> } #>  #> #zmaszwdpqy .gt_empty_group_heading { #>   padding: 0.5px; #>   color: #333333; #>   background-color: #FFFFFF; #>   font-size: 100%; #>   font-weight: initial; #>   border-top-style: solid; #>   border-top-width: 2px; #>   border-top-color: #D3D3D3; #>   border-bottom-style: solid; #>   border-bottom-width: 2px; #>   border-bottom-color: #D3D3D3; #>   vertical-align: middle; #> } #>  #> #zmaszwdpqy .gt_from_md > :first-child { #>   margin-top: 0; #> } #>  #> #zmaszwdpqy .gt_from_md > :last-child { #>   margin-bottom: 0; #> } #>  #> #zmaszwdpqy .gt_row { #>   padding-top: 8px; #>   padding-bottom: 8px; #>   padding-left: 5px; #>   padding-right: 5px; #>   margin: 10px; #>   border-top-style: solid; #>   border-top-width: 1px; #>   border-top-color: #D3D3D3; #>   border-left-style: none; #>   border-left-width: 1px; #>   border-left-color: #D3D3D3; #>   border-right-style: none; #>   border-right-width: 1px; #>   border-right-color: #D3D3D3; #>   vertical-align: middle; #>   overflow-x: hidden; #> } #>  #> #zmaszwdpqy .gt_stub { #>   color: #333333; #>   background-color: #FFFFFF; #>   font-size: 100%; #>   font-weight: initial; #>   text-transform: inherit; #>   border-right-style: solid; #>   border-right-width: 2px; #>   border-right-color: #D3D3D3; #>   padding-left: 5px; #>   padding-right: 5px; #> } #>  #> #zmaszwdpqy .gt_stub_row_group { #>   color: #333333; #>   background-color: #FFFFFF; #>   font-size: 100%; #>   font-weight: initial; #>   text-transform: inherit; #>   border-right-style: solid; #>   border-right-width: 2px; #>   border-right-color: #D3D3D3; #>   padding-left: 5px; #>   padding-right: 5px; #>   vertical-align: top; #> } #>  #> #zmaszwdpqy .gt_row_group_first td { #>   border-top-width: 2px; #> } #>  #> #zmaszwdpqy .gt_row_group_first th { #>   border-top-width: 2px; #> } #>  #> #zmaszwdpqy .gt_summary_row { #>   color: #333333; #>   background-color: #FFFFFF; #>   text-transform: inherit; #>   padding-top: 8px; #>   padding-bottom: 8px; #>   padding-left: 5px; #>   padding-right: 5px; #> } #>  #> #zmaszwdpqy .gt_first_summary_row { #>   border-top-style: solid; #>   border-top-color: #D3D3D3; #> } #>  #> #zmaszwdpqy .gt_first_summary_row.thick { #>   border-top-width: 2px; #> } #>  #> #zmaszwdpqy .gt_last_summary_row { #>   padding-top: 8px; #>   padding-bottom: 8px; #>   padding-left: 5px; #>   padding-right: 5px; #>   border-bottom-style: solid; #>   border-bottom-width: 2px; #>   border-bottom-color: #D3D3D3; #> } #>  #> #zmaszwdpqy .gt_grand_summary_row { #>   color: #333333; #>   background-color: #FFFFFF; #>   text-transform: inherit; #>   padding-top: 8px; #>   padding-bottom: 8px; #>   padding-left: 5px; #>   padding-right: 5px; #> } #>  #> #zmaszwdpqy .gt_first_grand_summary_row { #>   padding-top: 8px; #>   padding-bottom: 8px; #>   padding-left: 5px; #>   padding-right: 5px; #>   border-top-style: double; #>   border-top-width: 6px; #>   border-top-color: #D3D3D3; #> } #>  #> #zmaszwdpqy .gt_last_grand_summary_row_top { #>   padding-top: 8px; #>   padding-bottom: 8px; #>   padding-left: 5px; #>   padding-right: 5px; #>   border-bottom-style: double; #>   border-bottom-width: 6px; #>   border-bottom-color: #D3D3D3; #> } #>  #> #zmaszwdpqy .gt_striped { #>   background-color: rgba(128, 128, 128, 0.05); #> } #>  #> #zmaszwdpqy .gt_table_body { #>   border-top-style: solid; #>   border-top-width: 2px; #>   border-top-color: #D3D3D3; #>   border-bottom-style: solid; #>   border-bottom-width: 2px; #>   border-bottom-color: #D3D3D3; #> } #>  #> #zmaszwdpqy .gt_footnotes { #>   color: #333333; #>   background-color: #FFFFFF; #>   border-bottom-style: none; #>   border-bottom-width: 2px; #>   border-bottom-color: #D3D3D3; #>   border-left-style: none; #>   border-left-width: 2px; #>   border-left-color: #D3D3D3; #>   border-right-style: none; #>   border-right-width: 2px; #>   border-right-color: #D3D3D3; #> } #>  #> #zmaszwdpqy .gt_footnote { #>   margin: 0px; #>   font-size: 90%; #>   padding-top: 4px; #>   padding-bottom: 4px; #>   padding-left: 5px; #>   padding-right: 5px; #> } #>  #> #zmaszwdpqy .gt_sourcenotes { #>   color: #333333; #>   background-color: #FFFFFF; #>   border-bottom-style: none; #>   border-bottom-width: 2px; #>   border-bottom-color: #D3D3D3; #>   border-left-style: none; #>   border-left-width: 2px; #>   border-left-color: #D3D3D3; #>   border-right-style: none; #>   border-right-width: 2px; #>   border-right-color: #D3D3D3; #> } #>  #> #zmaszwdpqy .gt_sourcenote { #>   font-size: 90%; #>   padding-top: 4px; #>   padding-bottom: 4px; #>   padding-left: 5px; #>   padding-right: 5px; #> } #>  #> #zmaszwdpqy .gt_left { #>   text-align: left; #> } #>  #> #zmaszwdpqy .gt_center { #>   text-align: center; #> } #>  #> #zmaszwdpqy .gt_right { #>   text-align: right; #>   font-variant-numeric: tabular-nums; #> } #>  #> #zmaszwdpqy .gt_font_normal { #>   font-weight: normal; #> } #>  #> #zmaszwdpqy .gt_font_bold { #>   font-weight: bold; #> } #>  #> #zmaszwdpqy .gt_font_italic { #>   font-style: italic; #> } #>  #> #zmaszwdpqy .gt_super { #>   font-size: 65%; #> } #>  #> #zmaszwdpqy .gt_footnote_marks { #>   font-size: 75%; #>   vertical-align: 0.4em; #>   position: initial; #> } #>  #> #zmaszwdpqy .gt_asterisk { #>   font-size: 100%; #>   vertical-align: 0; #> } #>  #> #zmaszwdpqy .gt_indent_1 { #>   text-indent: 5px; #> } #>  #> #zmaszwdpqy .gt_indent_2 { #>   text-indent: 10px; #> } #>  #> #zmaszwdpqy .gt_indent_3 { #>   text-indent: 15px; #> } #>  #> #zmaszwdpqy .gt_indent_4 { #>   text-indent: 20px; #> } #>  #> #zmaszwdpqy .gt_indent_5 { #>   text-indent: 25px; #> } #> <\/style> #>   <table class=\"gt_table\" data-quarto-disable-processing=\"false\" data-quarto-bootstrap=\"false\"> #>   <thead> #>     <tr class=\"gt_col_headings gt_spanner_row\"> #>       <th class=\"gt_col_heading gt_columns_bottom_border gt_left\" rowspan=\"2\" colspan=\"1\" style=\"text-align: center; font-weight: bold;\" scope=\"col\" id=\"CDM name\">CDM name<\/th> #>       <th class=\"gt_col_heading gt_columns_bottom_border gt_left\" rowspan=\"2\" colspan=\"1\" style=\"text-align: center; font-weight: bold;\" scope=\"col\" id=\"Variable name\">Variable name<\/th> #>       <th class=\"gt_col_heading gt_columns_bottom_border gt_left\" rowspan=\"2\" colspan=\"1\" style=\"text-align: center; font-weight: bold;\" scope=\"col\" id=\"Variable level\">Variable level<\/th> #>       <th class=\"gt_col_heading gt_columns_bottom_border gt_left\" rowspan=\"2\" colspan=\"1\" style=\"text-align: center; font-weight: bold;\" scope=\"col\" id=\"Estimate name\">Estimate name<\/th> #>       <th class=\"gt_center gt_columns_top_border gt_column_spanner_outer\" rowspan=\"1\" colspan=\"1\" style=\"background-color: #C8C8C8; text-align: center; font-weight: bold;\" scope=\"col\" id=\"Cohort name\"> #>         <span class=\"gt_column_spanner\">Cohort name<\/span> #>       <\/th> #>     <\/tr> #>     <tr class=\"gt_col_headings\"> #>       <th class=\"gt_col_heading gt_columns_bottom_border gt_left\" rowspan=\"1\" colspan=\"1\" scope=\"col\" id=\"Cohort 1\">Cohort 1<\/th> #>     <\/tr> #>   <\/thead> #>   <tbody class=\"gt_table_body\"> #>     <tr><td headers=\"CDM name\" class=\"gt_row gt_left\" style=\"text-align: left;\">PP_MOCK<\/td> #> <td headers=\"Variable name\" class=\"gt_row gt_left\" style=\"text-align: left; border-left-width: 1px; border-left-style: solid; border-left-color: #D3D3D3; border-right-width: 1px; border-right-style: solid; border-right-color: #D3D3D3; border-top-width: 1px; border-top-style: solid; border-top-color: #D3D3D3; border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: #D3D3D3;\">Medications in the prior year<\/td> #> <td headers=\"Variable level\" class=\"gt_row gt_left\" style=\"text-align: left; border-left-width: 1px; border-left-style: solid; border-left-color: #D3D3D3; border-right-width: 1px; border-right-style: solid; border-right-color: #D3D3D3; border-top-width: 1px; border-top-style: solid; border-top-color: #D3D3D3; border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: #D3D3D3;\">Cohort 1<\/td> #> <td headers=\"Estimate name\" class=\"gt_row gt_left\" style=\"text-align: left; border-left-width: 1px; border-left-style: solid; border-left-color: #D3D3D3; border-right-width: 1px; border-right-style: solid; border-right-color: #D3D3D3; border-top-width: 1px; border-top-style: solid; border-top-color: #D3D3D3; border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: #D3D3D3;\">N (%)<\/td> #> <td headers=\"[header]Cohort name #> [header_level]Cohort 1\" class=\"gt_row gt_left\" style=\"text-align: right;\">&lt;5 (&lt;5%)<\/td><\/tr> #>     <tr><td headers=\"CDM name\" class=\"gt_row gt_left\" style=\"text-align: left; border-top-width: 1px; border-top-style: hidden; border-top-color: #000000;\"><\/td> #> <td headers=\"Variable name\" class=\"gt_row gt_left\" style=\"text-align: left; border-left-width: 1px; border-left-style: solid; border-left-color: #D3D3D3; border-right-width: 1px; border-right-style: solid; border-right-color: #D3D3D3; border-top-width: 1px; border-top-style: hidden; border-top-color: #000000; border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: #D3D3D3;\"><\/td> #> <td headers=\"Variable level\" class=\"gt_row gt_left\" style=\"text-align: left; border-left-width: 1px; border-left-style: solid; border-left-color: #D3D3D3; border-right-width: 1px; border-right-style: solid; border-right-color: #D3D3D3; border-top-width: 1px; border-top-style: solid; border-top-color: #D3D3D3; border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: #D3D3D3;\">Cohort 2<\/td> #> <td headers=\"Estimate name\" class=\"gt_row gt_left\" style=\"text-align: left; border-left-width: 1px; border-left-style: solid; border-left-color: #D3D3D3; border-right-width: 1px; border-right-style: solid; border-right-color: #D3D3D3; border-top-width: 1px; border-top-style: solid; border-top-color: #D3D3D3; border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: #D3D3D3;\">N (%)<\/td> #> <td headers=\"[header]Cohort name #> [header_level]Cohort 1\" class=\"gt_row gt_left\" style=\"text-align: right;\">&lt;5 (&lt;5%)<\/td><\/tr> #>   <\/tbody> #>    #>    #> <\/table> #> <\/div>  CDMConnector::cdmDisconnect(cdm = cdm) # }"},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/tableCohortOverlap.html","id":null,"dir":"Reference","previous_headings":"","what":"Format a summariseOverlapCohort result into a visual table. — tableCohortOverlap","title":"Format a summariseOverlapCohort result into a visual table. — tableCohortOverlap","text":"`r lifecycle::badge(\"experimental\")`","code":""},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/tableCohortOverlap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Format a summariseOverlapCohort result into a visual table. — tableCohortOverlap","text":"","code":"tableCohortOverlap(   result,   type = \"gt\",   formatEstimateName = c(`N (%)` = \"<count> (<percentage>%)\"),   header = c(\"strata\"),   split = c(\"group\", \"strata\", \"additional\"),   groupColumn = NULL,   minCellCount = 5,   excludeColumns = c(\"result_id\", \"result_type\", \"package_name\", \"package_version\",     \"estimate_type\"),   .options = list() )"},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/tableCohortOverlap.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Format a summariseOverlapCohort result into a visual table. — tableCohortOverlap","text":"result summariseOverlapCohort result. type Type desired formatted table, possibilities: \"gt\", \"flextable\", \"tibble\". formatEstimateName Named list estimate name's join, sorted computation order. Indicate estimate_name's <...>. header vector containing elements go header order. Allowed : `cdm_name`, `group`, `strata`, `additional`, `variable`, `estimate`, `settings`. split vector containing name-level groups split (\"group\", \"strata\", \"additional\"), empty character vector split. groupColumn Column use group labels. minCellCount Counts results clouded. excludeColumns Columns drop output table. .options Named list additional formatting options. PatientProfiles::optionsTableCohortOverlap() shows allowed arguments default values.","code":""},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/tableCohortOverlap.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Format a summariseOverlapCohort result into a visual table. — tableCohortOverlap","text":"formatted table summariseOverlapCohort result.","code":""},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/tableCohortOverlap.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Format a summariseOverlapCohort result into a visual table. — tableCohortOverlap","text":"","code":"# \\donttest{ library(PatientProfiles) cdm <- PatientProfiles::mockPatientProfiles() overlap <- summariseCohortOverlap(cdm$cohort2) tableCohortOverlap(overlap) #> <div id=\"ffdccmiygy\" style=\"padding-left:0px;padding-right:0px;padding-top:10px;padding-bottom:10px;overflow-x:auto;overflow-y:auto;width:auto;height:auto;\"> #>   <style>#ffdccmiygy table { #>   font-family: system-ui, 'Segoe UI', Roboto, Helvetica, Arial, sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol', 'Noto Color Emoji'; #>   -webkit-font-smoothing: antialiased; #>   -moz-osx-font-smoothing: grayscale; #> } #>  #> #ffdccmiygy thead, #ffdccmiygy tbody, #ffdccmiygy tfoot, #ffdccmiygy tr, #ffdccmiygy td, #ffdccmiygy th { #>   border-style: none; #> } #>  #> #ffdccmiygy p { #>   margin: 0; #>   padding: 0; #> } #>  #> #ffdccmiygy .gt_table { #>   display: table; #>   border-collapse: collapse; #>   line-height: normal; #>   margin-left: auto; #>   margin-right: auto; #>   color: #333333; #>   font-size: 16px; #>   font-weight: normal; #>   font-style: normal; #>   background-color: #FFFFFF; #>   width: auto; #>   border-top-style: solid; #>   border-top-width: 2px; #>   border-top-color: #A8A8A8; #>   border-right-style: none; #>   border-right-width: 2px; #>   border-right-color: #D3D3D3; #>   border-bottom-style: solid; #>   border-bottom-width: 2px; #>   border-bottom-color: #A8A8A8; #>   border-left-style: none; #>   border-left-width: 2px; #>   border-left-color: #D3D3D3; #> } #>  #> #ffdccmiygy .gt_caption { #>   padding-top: 4px; #>   padding-bottom: 4px; #> } #>  #> #ffdccmiygy .gt_title { #>   color: #333333; #>   font-size: 125%; #>   font-weight: initial; #>   padding-top: 4px; #>   padding-bottom: 4px; #>   padding-left: 5px; #>   padding-right: 5px; #>   border-bottom-color: #FFFFFF; #>   border-bottom-width: 0; #> } #>  #> #ffdccmiygy .gt_subtitle { #>   color: #333333; #>   font-size: 85%; #>   font-weight: initial; #>   padding-top: 3px; #>   padding-bottom: 5px; #>   padding-left: 5px; #>   padding-right: 5px; #>   border-top-color: #FFFFFF; #>   border-top-width: 0; #> } #>  #> #ffdccmiygy .gt_heading { #>   background-color: #FFFFFF; #>   text-align: center; #>   border-bottom-color: #FFFFFF; #>   border-left-style: none; #>   border-left-width: 1px; #>   border-left-color: #D3D3D3; #>   border-right-style: none; #>   border-right-width: 1px; #>   border-right-color: #D3D3D3; #> } #>  #> #ffdccmiygy .gt_bottom_border { #>   border-bottom-style: solid; #>   border-bottom-width: 2px; #>   border-bottom-color: #D3D3D3; #> } #>  #> #ffdccmiygy .gt_col_headings { #>   border-top-style: solid; #>   border-top-width: 2px; #>   border-top-color: #D3D3D3; #>   border-bottom-style: solid; #>   border-bottom-width: 2px; #>   border-bottom-color: #D3D3D3; #>   border-left-style: none; #>   border-left-width: 1px; #>   border-left-color: #D3D3D3; #>   border-right-style: none; #>   border-right-width: 1px; #>   border-right-color: #D3D3D3; #> } #>  #> #ffdccmiygy .gt_col_heading { #>   color: #333333; #>   background-color: #FFFFFF; #>   font-size: 100%; #>   font-weight: normal; #>   text-transform: inherit; #>   border-left-style: none; #>   border-left-width: 1px; #>   border-left-color: #D3D3D3; #>   border-right-style: none; #>   border-right-width: 1px; #>   border-right-color: #D3D3D3; #>   vertical-align: bottom; #>   padding-top: 5px; #>   padding-bottom: 6px; #>   padding-left: 5px; #>   padding-right: 5px; #>   overflow-x: hidden; #> } #>  #> #ffdccmiygy .gt_column_spanner_outer { #>   color: #333333; #>   background-color: #FFFFFF; #>   font-size: 100%; #>   font-weight: normal; #>   text-transform: inherit; #>   padding-top: 0; #>   padding-bottom: 0; #>   padding-left: 4px; #>   padding-right: 4px; #> } #>  #> #ffdccmiygy .gt_column_spanner_outer:first-child { #>   padding-left: 0; #> } #>  #> #ffdccmiygy .gt_column_spanner_outer:last-child { #>   padding-right: 0; #> } #>  #> #ffdccmiygy .gt_column_spanner { #>   border-bottom-style: solid; #>   border-bottom-width: 2px; #>   border-bottom-color: #D3D3D3; #>   vertical-align: bottom; #>   padding-top: 5px; #>   padding-bottom: 5px; #>   overflow-x: hidden; #>   display: inline-block; #>   width: 100%; #> } #>  #> #ffdccmiygy .gt_spanner_row { #>   border-bottom-style: hidden; #> } #>  #> #ffdccmiygy .gt_group_heading { #>   padding-top: 8px; #>   padding-bottom: 8px; #>   padding-left: 5px; #>   padding-right: 5px; #>   color: #333333; #>   background-color: #FFFFFF; #>   font-size: 100%; #>   font-weight: initial; #>   text-transform: inherit; #>   border-top-style: solid; #>   border-top-width: 2px; #>   border-top-color: #D3D3D3; #>   border-bottom-style: solid; #>   border-bottom-width: 2px; #>   border-bottom-color: #D3D3D3; #>   border-left-style: none; #>   border-left-width: 1px; #>   border-left-color: #D3D3D3; #>   border-right-style: none; #>   border-right-width: 1px; #>   border-right-color: #D3D3D3; #>   vertical-align: middle; #>   text-align: left; #> } #>  #> #ffdccmiygy .gt_empty_group_heading { #>   padding: 0.5px; #>   color: #333333; #>   background-color: #FFFFFF; #>   font-size: 100%; #>   font-weight: initial; #>   border-top-style: solid; #>   border-top-width: 2px; #>   border-top-color: #D3D3D3; #>   border-bottom-style: solid; #>   border-bottom-width: 2px; #>   border-bottom-color: #D3D3D3; #>   vertical-align: middle; #> } #>  #> #ffdccmiygy .gt_from_md > :first-child { #>   margin-top: 0; #> } #>  #> #ffdccmiygy .gt_from_md > :last-child { #>   margin-bottom: 0; #> } #>  #> #ffdccmiygy .gt_row { #>   padding-top: 8px; #>   padding-bottom: 8px; #>   padding-left: 5px; #>   padding-right: 5px; #>   margin: 10px; #>   border-top-style: solid; #>   border-top-width: 1px; #>   border-top-color: #D3D3D3; #>   border-left-style: none; #>   border-left-width: 1px; #>   border-left-color: #D3D3D3; #>   border-right-style: none; #>   border-right-width: 1px; #>   border-right-color: #D3D3D3; #>   vertical-align: middle; #>   overflow-x: hidden; #> } #>  #> #ffdccmiygy .gt_stub { #>   color: #333333; #>   background-color: #FFFFFF; #>   font-size: 100%; #>   font-weight: initial; #>   text-transform: inherit; #>   border-right-style: solid; #>   border-right-width: 2px; #>   border-right-color: #D3D3D3; #>   padding-left: 5px; #>   padding-right: 5px; #> } #>  #> #ffdccmiygy .gt_stub_row_group { #>   color: #333333; #>   background-color: #FFFFFF; #>   font-size: 100%; #>   font-weight: initial; #>   text-transform: inherit; #>   border-right-style: solid; #>   border-right-width: 2px; #>   border-right-color: #D3D3D3; #>   padding-left: 5px; #>   padding-right: 5px; #>   vertical-align: top; #> } #>  #> #ffdccmiygy .gt_row_group_first td { #>   border-top-width: 2px; #> } #>  #> #ffdccmiygy .gt_row_group_first th { #>   border-top-width: 2px; #> } #>  #> #ffdccmiygy .gt_summary_row { #>   color: #333333; #>   background-color: #FFFFFF; #>   text-transform: inherit; #>   padding-top: 8px; #>   padding-bottom: 8px; #>   padding-left: 5px; #>   padding-right: 5px; #> } #>  #> #ffdccmiygy .gt_first_summary_row { #>   border-top-style: solid; #>   border-top-color: #D3D3D3; #> } #>  #> #ffdccmiygy .gt_first_summary_row.thick { #>   border-top-width: 2px; #> } #>  #> #ffdccmiygy .gt_last_summary_row { #>   padding-top: 8px; #>   padding-bottom: 8px; #>   padding-left: 5px; #>   padding-right: 5px; #>   border-bottom-style: solid; #>   border-bottom-width: 2px; #>   border-bottom-color: #D3D3D3; #> } #>  #> #ffdccmiygy .gt_grand_summary_row { #>   color: #333333; #>   background-color: #FFFFFF; #>   text-transform: inherit; #>   padding-top: 8px; #>   padding-bottom: 8px; #>   padding-left: 5px; #>   padding-right: 5px; #> } #>  #> #ffdccmiygy .gt_first_grand_summary_row { #>   padding-top: 8px; #>   padding-bottom: 8px; #>   padding-left: 5px; #>   padding-right: 5px; #>   border-top-style: double; #>   border-top-width: 6px; #>   border-top-color: #D3D3D3; #> } #>  #> #ffdccmiygy .gt_last_grand_summary_row_top { #>   padding-top: 8px; #>   padding-bottom: 8px; #>   padding-left: 5px; #>   padding-right: 5px; #>   border-bottom-style: double; #>   border-bottom-width: 6px; #>   border-bottom-color: #D3D3D3; #> } #>  #> #ffdccmiygy .gt_striped { #>   background-color: rgba(128, 128, 128, 0.05); #> } #>  #> #ffdccmiygy .gt_table_body { #>   border-top-style: solid; #>   border-top-width: 2px; #>   border-top-color: #D3D3D3; #>   border-bottom-style: solid; #>   border-bottom-width: 2px; #>   border-bottom-color: #D3D3D3; #> } #>  #> #ffdccmiygy .gt_footnotes { #>   color: #333333; #>   background-color: #FFFFFF; #>   border-bottom-style: none; #>   border-bottom-width: 2px; #>   border-bottom-color: #D3D3D3; #>   border-left-style: none; #>   border-left-width: 2px; #>   border-left-color: #D3D3D3; #>   border-right-style: none; #>   border-right-width: 2px; #>   border-right-color: #D3D3D3; #> } #>  #> #ffdccmiygy .gt_footnote { #>   margin: 0px; #>   font-size: 90%; #>   padding-top: 4px; #>   padding-bottom: 4px; #>   padding-left: 5px; #>   padding-right: 5px; #> } #>  #> #ffdccmiygy .gt_sourcenotes { #>   color: #333333; #>   background-color: #FFFFFF; #>   border-bottom-style: none; #>   border-bottom-width: 2px; #>   border-bottom-color: #D3D3D3; #>   border-left-style: none; #>   border-left-width: 2px; #>   border-left-color: #D3D3D3; #>   border-right-style: none; #>   border-right-width: 2px; #>   border-right-color: #D3D3D3; #> } #>  #> #ffdccmiygy .gt_sourcenote { #>   font-size: 90%; #>   padding-top: 4px; #>   padding-bottom: 4px; #>   padding-left: 5px; #>   padding-right: 5px; #> } #>  #> #ffdccmiygy .gt_left { #>   text-align: left; #> } #>  #> #ffdccmiygy .gt_center { #>   text-align: center; #> } #>  #> #ffdccmiygy .gt_right { #>   text-align: right; #>   font-variant-numeric: tabular-nums; #> } #>  #> #ffdccmiygy .gt_font_normal { #>   font-weight: normal; #> } #>  #> #ffdccmiygy .gt_font_bold { #>   font-weight: bold; #> } #>  #> #ffdccmiygy .gt_font_italic { #>   font-style: italic; #> } #>  #> #ffdccmiygy .gt_super { #>   font-size: 65%; #> } #>  #> #ffdccmiygy .gt_footnote_marks { #>   font-size: 75%; #>   vertical-align: 0.4em; #>   position: initial; #> } #>  #> #ffdccmiygy .gt_asterisk { #>   font-size: 100%; #>   vertical-align: 0; #> } #>  #> #ffdccmiygy .gt_indent_1 { #>   text-indent: 5px; #> } #>  #> #ffdccmiygy .gt_indent_2 { #>   text-indent: 10px; #> } #>  #> #ffdccmiygy .gt_indent_3 { #>   text-indent: 15px; #> } #>  #> #ffdccmiygy .gt_indent_4 { #>   text-indent: 20px; #> } #>  #> #ffdccmiygy .gt_indent_5 { #>   text-indent: 25px; #> } #> <\/style> #>   <table class=\"gt_table\" data-quarto-disable-processing=\"false\" data-quarto-bootstrap=\"false\"> #>   <thead> #>     <tr class=\"gt_col_headings gt_spanner_row\"> #>       <th class=\"gt_col_heading gt_columns_bottom_border gt_left\" rowspan=\"2\" colspan=\"1\" style=\"text-align: center; font-weight: bold;\" scope=\"col\" id=\"CDM name\">CDM name<\/th> #>       <th class=\"gt_col_heading gt_columns_bottom_border gt_left\" rowspan=\"2\" colspan=\"1\" style=\"text-align: center; font-weight: bold;\" scope=\"col\" id=\"Cohort name reference\">Cohort name reference<\/th> #>       <th class=\"gt_col_heading gt_columns_bottom_border gt_left\" rowspan=\"2\" colspan=\"1\" style=\"text-align: center; font-weight: bold;\" scope=\"col\" id=\"Cohort name comparator\">Cohort name comparator<\/th> #>       <th class=\"gt_col_heading gt_columns_bottom_border gt_left\" rowspan=\"2\" colspan=\"1\" style=\"text-align: center; font-weight: bold;\" scope=\"col\" id=\"Estimate name\">Estimate name<\/th> #>       <th class=\"gt_center gt_columns_top_border gt_column_spanner_outer\" rowspan=\"1\" colspan=\"3\" style=\"background-color: #E1E1E1; text-align: center; font-weight: bold;\" scope=\"colgroup\" id=\"Number subjects\"> #>         <span class=\"gt_column_spanner\">Number subjects<\/span> #>       <\/th> #>     <\/tr> #>     <tr class=\"gt_col_headings\"> #>       <th class=\"gt_col_heading gt_columns_bottom_border gt_right\" rowspan=\"1\" colspan=\"1\" style=\"background-color: #E1E1E1; text-align: center; font-weight: bold;\" scope=\"col\" id=\"Only in reference\">Only in reference<\/th> #>       <th class=\"gt_col_heading gt_columns_bottom_border gt_right\" rowspan=\"1\" colspan=\"1\" style=\"background-color: #E1E1E1; text-align: center; font-weight: bold;\" scope=\"col\" id=\"Only in comparator\">Only in comparator<\/th> #>       <th class=\"gt_col_heading gt_columns_bottom_border gt_left\" rowspan=\"1\" colspan=\"1\" style=\"background-color: #E1E1E1; text-align: center; font-weight: bold;\" scope=\"col\" id=\"Overlap\">Overlap<\/th> #>     <\/tr> #>   <\/thead> #>   <tbody class=\"gt_table_body\"> #>     <tr><td headers=\"CDM name\" class=\"gt_row gt_left\" style=\"text-align: left;\">PP_MOCK<\/td> #> <td headers=\"Cohort name reference\" class=\"gt_row gt_left\" style=\"text-align: left; border-left-width: 1px; border-left-style: solid; border-left-color: #D3D3D3; border-right-width: 1px; border-right-style: solid; border-right-color: #D3D3D3; border-top-width: 1px; border-top-style: solid; border-top-color: #D3D3D3; border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: #D3D3D3;\">Cohort 1<\/td> #> <td headers=\"Cohort name comparator\" class=\"gt_row gt_left\" style=\"text-align: left; border-left-width: 1px; border-left-style: solid; border-left-color: #D3D3D3; border-right-width: 1px; border-right-style: solid; border-right-color: #D3D3D3; border-top-width: 1px; border-top-style: solid; border-top-color: #D3D3D3; border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: #D3D3D3;\">Cohort 2<\/td> #> <td headers=\"Estimate name\" class=\"gt_row gt_left\" style=\"text-align: left; border-left-width: 1px; border-left-style: solid; border-left-color: #D3D3D3; border-right-width: 1px; border-right-style: solid; border-right-color: #D3D3D3; border-top-width: 1px; border-top-style: solid; border-top-color: #D3D3D3; border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: #D3D3D3;\">N (%)<\/td> #> <td headers=\"[header_level]Number subjects #> [header_level]Only in reference\" class=\"gt_row gt_right\" style=\"text-align: right; border-left-width: 1px; border-left-style: solid; border-left-color: #D3D3D3; border-right-width: 1px; border-right-style: solid; border-right-color: #D3D3D3; border-top-width: 1px; border-top-style: solid; border-top-color: #D3D3D3; border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: #D3D3D3;\">0 (0.00%)<\/td> #> <td headers=\"[header_level]Number subjects #> [header_level]Only in comparator\" class=\"gt_row gt_right\" style=\"text-align: right; border-left-width: 1px; border-left-style: solid; border-left-color: #D3D3D3; border-right-width: 1px; border-right-style: solid; border-right-color: #D3D3D3; border-top-width: 1px; border-top-style: solid; border-top-color: #D3D3D3; border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: #D3D3D3;\">0 (0.00%)<\/td> #> <td headers=\"[header_level]Number subjects #> [header_level]Overlap\" class=\"gt_row gt_left\" style=\"text-align: right;\">&lt;5 (&lt;5%)<\/td><\/tr> #>   <\/tbody> #>    #>    #> <\/table> #> <\/div> CDMConnector::cdmDisconnect(cdm = cdm) # }"},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/tableCohortTiming.html","id":null,"dir":"Reference","previous_headings":"","what":"Format a summariseCohortTiming result into a visual table. — tableCohortTiming","title":"Format a summariseCohortTiming result into a visual table. — tableCohortTiming","text":"`r lifecycle::badge(\"experimental\")`","code":""},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/tableCohortTiming.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Format a summariseCohortTiming result into a visual table. — tableCohortTiming","text":"","code":"tableCohortTiming(   result,   type = \"gt\",   formatEstimateName = c(N = \"<count>\", `Median [Q25 - Q75]` =     \"<median> [<q25> - <q75>]\", Range = \"<min> - <max>\"),   header = c(\"strata\"),   split = c(\"group\", \"strata\", \"additional\"),   groupColumn = NULL,   minCellCount = 5,   excludeColumns = c(\"result_id\", \"result_type\", \"package_name\", \"package_version\",     \"estimate_type\", \"variable_level\"),   .options = list() )"},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/tableCohortTiming.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Format a summariseCohortTiming result into a visual table. — tableCohortTiming","text":"result summariseCohortTiming result type Type desired formatted table, possibilities: \"gt\", \"flextable\", \"tibble\". formatEstimateName Named list estimate name's join, sorted computation order. Indicate estimate_name's <...>. header vector containing elements go header order. Allowed : `cdm_name`, `group`, `strata`, `additional`, `variable`, `estimate`, `settings`. split vector containing name-level groups split (\"group\", \"strata\", \"additional\"), empty character vector split. groupColumn Column use group labels. minCellCount Counts results clouded. excludeColumns Columns drop output table. .options named list additional formatting options. PatientProfiles::optionsTableCohortTiming() shows allowed arguments default values.","code":""},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/tableCohortTiming.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Format a summariseCohortTiming result into a visual table. — tableCohortTiming","text":"formatted table summariseCohortTiming result.","code":""},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/tableCohortTiming.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Format a summariseCohortTiming result into a visual table. — tableCohortTiming","text":"","code":"# \\donttest{ library(PatientProfiles) cdm <- PatientProfiles::mockPatientProfiles() timing <- summariseCohortTiming(cdm$cohort2) #> ℹ The following estimates will be computed: #> • diff_days: min, q25, median, q75, max #> → Start summary of data, at 2024-03-28 18:20:04.481488 #> ✔ Summary finished, at 2024-03-28 18:20:04.538539 tableCohortTiming(timing) #> <div id=\"ffdccmiygy\" style=\"padding-left:0px;padding-right:0px;padding-top:10px;padding-bottom:10px;overflow-x:auto;overflow-y:auto;width:auto;height:auto;\"> #>   <style>#ffdccmiygy table { #>   font-family: system-ui, 'Segoe UI', Roboto, Helvetica, Arial, sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol', 'Noto Color Emoji'; #>   -webkit-font-smoothing: antialiased; #>   -moz-osx-font-smoothing: grayscale; #> } #>  #> #ffdccmiygy thead, #ffdccmiygy tbody, #ffdccmiygy tfoot, #ffdccmiygy tr, #ffdccmiygy td, #ffdccmiygy th { #>   border-style: none; #> } #>  #> #ffdccmiygy p { #>   margin: 0; #>   padding: 0; #> } #>  #> #ffdccmiygy .gt_table { #>   display: table; #>   border-collapse: collapse; #>   line-height: normal; #>   margin-left: auto; #>   margin-right: auto; #>   color: #333333; #>   font-size: 16px; #>   font-weight: normal; #>   font-style: normal; #>   background-color: #FFFFFF; #>   width: auto; #>   border-top-style: solid; #>   border-top-width: 2px; #>   border-top-color: #A8A8A8; #>   border-right-style: none; #>   border-right-width: 2px; #>   border-right-color: #D3D3D3; #>   border-bottom-style: solid; #>   border-bottom-width: 2px; #>   border-bottom-color: #A8A8A8; #>   border-left-style: none; #>   border-left-width: 2px; #>   border-left-color: #D3D3D3; #> } #>  #> #ffdccmiygy .gt_caption { #>   padding-top: 4px; #>   padding-bottom: 4px; #> } #>  #> #ffdccmiygy .gt_title { #>   color: #333333; #>   font-size: 125%; #>   font-weight: initial; #>   padding-top: 4px; #>   padding-bottom: 4px; #>   padding-left: 5px; #>   padding-right: 5px; #>   border-bottom-color: #FFFFFF; #>   border-bottom-width: 0; #> } #>  #> #ffdccmiygy .gt_subtitle { #>   color: #333333; #>   font-size: 85%; #>   font-weight: initial; #>   padding-top: 3px; #>   padding-bottom: 5px; #>   padding-left: 5px; #>   padding-right: 5px; #>   border-top-color: #FFFFFF; #>   border-top-width: 0; #> } #>  #> #ffdccmiygy .gt_heading { #>   background-color: #FFFFFF; #>   text-align: center; #>   border-bottom-color: #FFFFFF; #>   border-left-style: none; #>   border-left-width: 1px; #>   border-left-color: #D3D3D3; #>   border-right-style: none; #>   border-right-width: 1px; #>   border-right-color: #D3D3D3; #> } #>  #> #ffdccmiygy .gt_bottom_border { #>   border-bottom-style: solid; #>   border-bottom-width: 2px; #>   border-bottom-color: #D3D3D3; #> } #>  #> #ffdccmiygy .gt_col_headings { #>   border-top-style: solid; #>   border-top-width: 2px; #>   border-top-color: #D3D3D3; #>   border-bottom-style: solid; #>   border-bottom-width: 2px; #>   border-bottom-color: #D3D3D3; #>   border-left-style: none; #>   border-left-width: 1px; #>   border-left-color: #D3D3D3; #>   border-right-style: none; #>   border-right-width: 1px; #>   border-right-color: #D3D3D3; #> } #>  #> #ffdccmiygy .gt_col_heading { #>   color: #333333; #>   background-color: #FFFFFF; #>   font-size: 100%; #>   font-weight: normal; #>   text-transform: inherit; #>   border-left-style: none; #>   border-left-width: 1px; #>   border-left-color: #D3D3D3; #>   border-right-style: none; #>   border-right-width: 1px; #>   border-right-color: #D3D3D3; #>   vertical-align: bottom; #>   padding-top: 5px; #>   padding-bottom: 6px; #>   padding-left: 5px; #>   padding-right: 5px; #>   overflow-x: hidden; #> } #>  #> #ffdccmiygy .gt_column_spanner_outer { #>   color: #333333; #>   background-color: #FFFFFF; #>   font-size: 100%; #>   font-weight: normal; #>   text-transform: inherit; #>   padding-top: 0; #>   padding-bottom: 0; #>   padding-left: 4px; #>   padding-right: 4px; #> } #>  #> #ffdccmiygy .gt_column_spanner_outer:first-child { #>   padding-left: 0; #> } #>  #> #ffdccmiygy .gt_column_spanner_outer:last-child { #>   padding-right: 0; #> } #>  #> #ffdccmiygy .gt_column_spanner { #>   border-bottom-style: solid; #>   border-bottom-width: 2px; #>   border-bottom-color: #D3D3D3; #>   vertical-align: bottom; #>   padding-top: 5px; #>   padding-bottom: 5px; #>   overflow-x: hidden; #>   display: inline-block; #>   width: 100%; #> } #>  #> #ffdccmiygy .gt_spanner_row { #>   border-bottom-style: hidden; #> } #>  #> #ffdccmiygy .gt_group_heading { #>   padding-top: 8px; #>   padding-bottom: 8px; #>   padding-left: 5px; #>   padding-right: 5px; #>   color: #333333; #>   background-color: #FFFFFF; #>   font-size: 100%; #>   font-weight: initial; #>   text-transform: inherit; #>   border-top-style: solid; #>   border-top-width: 2px; #>   border-top-color: #D3D3D3; #>   border-bottom-style: solid; #>   border-bottom-width: 2px; #>   border-bottom-color: #D3D3D3; #>   border-left-style: none; #>   border-left-width: 1px; #>   border-left-color: #D3D3D3; #>   border-right-style: none; #>   border-right-width: 1px; #>   border-right-color: #D3D3D3; #>   vertical-align: middle; #>   text-align: left; #> } #>  #> #ffdccmiygy .gt_empty_group_heading { #>   padding: 0.5px; #>   color: #333333; #>   background-color: #FFFFFF; #>   font-size: 100%; #>   font-weight: initial; #>   border-top-style: solid; #>   border-top-width: 2px; #>   border-top-color: #D3D3D3; #>   border-bottom-style: solid; #>   border-bottom-width: 2px; #>   border-bottom-color: #D3D3D3; #>   vertical-align: middle; #> } #>  #> #ffdccmiygy .gt_from_md > :first-child { #>   margin-top: 0; #> } #>  #> #ffdccmiygy .gt_from_md > :last-child { #>   margin-bottom: 0; #> } #>  #> #ffdccmiygy .gt_row { #>   padding-top: 8px; #>   padding-bottom: 8px; #>   padding-left: 5px; #>   padding-right: 5px; #>   margin: 10px; #>   border-top-style: solid; #>   border-top-width: 1px; #>   border-top-color: #D3D3D3; #>   border-left-style: none; #>   border-left-width: 1px; #>   border-left-color: #D3D3D3; #>   border-right-style: none; #>   border-right-width: 1px; #>   border-right-color: #D3D3D3; #>   vertical-align: middle; #>   overflow-x: hidden; #> } #>  #> #ffdccmiygy .gt_stub { #>   color: #333333; #>   background-color: #FFFFFF; #>   font-size: 100%; #>   font-weight: initial; #>   text-transform: inherit; #>   border-right-style: solid; #>   border-right-width: 2px; #>   border-right-color: #D3D3D3; #>   padding-left: 5px; #>   padding-right: 5px; #> } #>  #> #ffdccmiygy .gt_stub_row_group { #>   color: #333333; #>   background-color: #FFFFFF; #>   font-size: 100%; #>   font-weight: initial; #>   text-transform: inherit; #>   border-right-style: solid; #>   border-right-width: 2px; #>   border-right-color: #D3D3D3; #>   padding-left: 5px; #>   padding-right: 5px; #>   vertical-align: top; #> } #>  #> #ffdccmiygy .gt_row_group_first td { #>   border-top-width: 2px; #> } #>  #> #ffdccmiygy .gt_row_group_first th { #>   border-top-width: 2px; #> } #>  #> #ffdccmiygy .gt_summary_row { #>   color: #333333; #>   background-color: #FFFFFF; #>   text-transform: inherit; #>   padding-top: 8px; #>   padding-bottom: 8px; #>   padding-left: 5px; #>   padding-right: 5px; #> } #>  #> #ffdccmiygy .gt_first_summary_row { #>   border-top-style: solid; #>   border-top-color: #D3D3D3; #> } #>  #> #ffdccmiygy .gt_first_summary_row.thick { #>   border-top-width: 2px; #> } #>  #> #ffdccmiygy .gt_last_summary_row { #>   padding-top: 8px; #>   padding-bottom: 8px; #>   padding-left: 5px; #>   padding-right: 5px; #>   border-bottom-style: solid; #>   border-bottom-width: 2px; #>   border-bottom-color: #D3D3D3; #> } #>  #> #ffdccmiygy .gt_grand_summary_row { #>   color: #333333; #>   background-color: #FFFFFF; #>   text-transform: inherit; #>   padding-top: 8px; #>   padding-bottom: 8px; #>   padding-left: 5px; #>   padding-right: 5px; #> } #>  #> #ffdccmiygy .gt_first_grand_summary_row { #>   padding-top: 8px; #>   padding-bottom: 8px; #>   padding-left: 5px; #>   padding-right: 5px; #>   border-top-style: double; #>   border-top-width: 6px; #>   border-top-color: #D3D3D3; #> } #>  #> #ffdccmiygy .gt_last_grand_summary_row_top { #>   padding-top: 8px; #>   padding-bottom: 8px; #>   padding-left: 5px; #>   padding-right: 5px; #>   border-bottom-style: double; #>   border-bottom-width: 6px; #>   border-bottom-color: #D3D3D3; #> } #>  #> #ffdccmiygy .gt_striped { #>   background-color: rgba(128, 128, 128, 0.05); #> } #>  #> #ffdccmiygy .gt_table_body { #>   border-top-style: solid; #>   border-top-width: 2px; #>   border-top-color: #D3D3D3; #>   border-bottom-style: solid; #>   border-bottom-width: 2px; #>   border-bottom-color: #D3D3D3; #> } #>  #> #ffdccmiygy .gt_footnotes { #>   color: #333333; #>   background-color: #FFFFFF; #>   border-bottom-style: none; #>   border-bottom-width: 2px; #>   border-bottom-color: #D3D3D3; #>   border-left-style: none; #>   border-left-width: 2px; #>   border-left-color: #D3D3D3; #>   border-right-style: none; #>   border-right-width: 2px; #>   border-right-color: #D3D3D3; #> } #>  #> #ffdccmiygy .gt_footnote { #>   margin: 0px; #>   font-size: 90%; #>   padding-top: 4px; #>   padding-bottom: 4px; #>   padding-left: 5px; #>   padding-right: 5px; #> } #>  #> #ffdccmiygy .gt_sourcenotes { #>   color: #333333; #>   background-color: #FFFFFF; #>   border-bottom-style: none; #>   border-bottom-width: 2px; #>   border-bottom-color: #D3D3D3; #>   border-left-style: none; #>   border-left-width: 2px; #>   border-left-color: #D3D3D3; #>   border-right-style: none; #>   border-right-width: 2px; #>   border-right-color: #D3D3D3; #> } #>  #> #ffdccmiygy .gt_sourcenote { #>   font-size: 90%; #>   padding-top: 4px; #>   padding-bottom: 4px; #>   padding-left: 5px; #>   padding-right: 5px; #> } #>  #> #ffdccmiygy .gt_left { #>   text-align: left; #> } #>  #> #ffdccmiygy .gt_center { #>   text-align: center; #> } #>  #> #ffdccmiygy .gt_right { #>   text-align: right; #>   font-variant-numeric: tabular-nums; #> } #>  #> #ffdccmiygy .gt_font_normal { #>   font-weight: normal; #> } #>  #> #ffdccmiygy .gt_font_bold { #>   font-weight: bold; #> } #>  #> #ffdccmiygy .gt_font_italic { #>   font-style: italic; #> } #>  #> #ffdccmiygy .gt_super { #>   font-size: 65%; #> } #>  #> #ffdccmiygy .gt_footnote_marks { #>   font-size: 75%; #>   vertical-align: 0.4em; #>   position: initial; #> } #>  #> #ffdccmiygy .gt_asterisk { #>   font-size: 100%; #>   vertical-align: 0; #> } #>  #> #ffdccmiygy .gt_indent_1 { #>   text-indent: 5px; #> } #>  #> #ffdccmiygy .gt_indent_2 { #>   text-indent: 10px; #> } #>  #> #ffdccmiygy .gt_indent_3 { #>   text-indent: 15px; #> } #>  #> #ffdccmiygy .gt_indent_4 { #>   text-indent: 20px; #> } #>  #> #ffdccmiygy .gt_indent_5 { #>   text-indent: 25px; #> } #> <\/style> #>   <table class=\"gt_table\" data-quarto-disable-processing=\"false\" data-quarto-bootstrap=\"false\"> #>   <thead> #>     <tr class=\"gt_col_headings\"> #>       <th class=\"gt_col_heading gt_columns_bottom_border gt_left\" rowspan=\"1\" colspan=\"1\" style=\"text-align: center; font-weight: bold;\" scope=\"col\" id=\"CDM name\">CDM name<\/th> #>       <th class=\"gt_col_heading gt_columns_bottom_border gt_left\" rowspan=\"1\" colspan=\"1\" style=\"text-align: center; font-weight: bold;\" scope=\"col\" id=\"Cohort name reference\">Cohort name reference<\/th> #>       <th class=\"gt_col_heading gt_columns_bottom_border gt_left\" rowspan=\"1\" colspan=\"1\" style=\"text-align: center; font-weight: bold;\" scope=\"col\" id=\"Cohort name comparator\">Cohort name comparator<\/th> #>       <th class=\"gt_col_heading gt_columns_bottom_border gt_left\" rowspan=\"1\" colspan=\"1\" style=\"text-align: center; font-weight: bold;\" scope=\"col\" id=\"Variable name\">Variable name<\/th> #>       <th class=\"gt_col_heading gt_columns_bottom_border gt_left\" rowspan=\"1\" colspan=\"1\" style=\"text-align: center; font-weight: bold;\" scope=\"col\" id=\"Estimate name\">Estimate name<\/th> #>       <th class=\"gt_col_heading gt_columns_bottom_border gt_left\" rowspan=\"1\" colspan=\"1\" style=\"text-align: center; font-weight: bold;\" scope=\"col\" id=\"Estimate value\">Estimate value<\/th> #>     <\/tr> #>   <\/thead> #>   <tbody class=\"gt_table_body\"> #>     <tr><td headers=\"CDM name\" class=\"gt_row gt_left\" style=\"text-align: left;\">PP_MOCK<\/td> #> <td headers=\"Cohort name reference\" class=\"gt_row gt_left\" style=\"text-align: left; border-left-width: 1px; border-left-style: solid; border-left-color: #D3D3D3; border-right-width: 1px; border-right-style: solid; border-right-color: #D3D3D3; border-top-width: 1px; border-top-style: solid; border-top-color: #D3D3D3; border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: #D3D3D3;\">Cohort 1<\/td> #> <td headers=\"Cohort name comparator\" class=\"gt_row gt_left\" style=\"text-align: left; border-left-width: 1px; border-left-style: solid; border-left-color: #D3D3D3; border-right-width: 1px; border-right-style: solid; border-right-color: #D3D3D3; border-top-width: 1px; border-top-style: solid; border-top-color: #D3D3D3; border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: #D3D3D3;\">Cohort 2<\/td> #> <td headers=\"Variable name\" class=\"gt_row gt_left\" style=\"text-align: left; border-left-width: 1px; border-left-style: solid; border-left-color: #D3D3D3; border-right-width: 1px; border-right-style: solid; border-right-color: #D3D3D3; border-top-width: 1px; border-top-style: solid; border-top-color: #D3D3D3; border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: #D3D3D3;\">Number records<\/td> #> <td headers=\"Estimate name\" class=\"gt_row gt_left\" style=\"text-align: left; border-left-width: 1px; border-left-style: solid; border-left-color: #D3D3D3; border-right-width: 1px; border-right-style: solid; border-right-color: #D3D3D3; border-top-width: 1px; border-top-style: solid; border-top-color: #D3D3D3; border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: #D3D3D3;\">N<\/td> #> <td headers=\"Estimate value\" class=\"gt_row gt_left\" style=\"text-align: left;\">&lt;5<\/td><\/tr> #>     <tr><td headers=\"CDM name\" class=\"gt_row gt_left\" style=\"text-align: left; border-top-width: 1px; border-top-style: hidden; border-top-color: #000000;\"><\/td> #> <td headers=\"Cohort name reference\" class=\"gt_row gt_left\" style=\"text-align: left; border-left-width: 1px; border-left-style: solid; border-left-color: #D3D3D3; border-right-width: 1px; border-right-style: solid; border-right-color: #D3D3D3; border-top-width: 1px; border-top-style: hidden; border-top-color: #000000; border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: #D3D3D3;\"><\/td> #> <td headers=\"Cohort name comparator\" class=\"gt_row gt_left\" style=\"text-align: left; border-left-width: 1px; border-left-style: solid; border-left-color: #D3D3D3; border-right-width: 1px; border-right-style: solid; border-right-color: #D3D3D3; border-top-width: 1px; border-top-style: hidden; border-top-color: #000000; border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: #D3D3D3;\"><\/td> #> <td headers=\"Variable name\" class=\"gt_row gt_left\" style=\"text-align: left; border-left-width: 1px; border-left-style: solid; border-left-color: #D3D3D3; border-right-width: 1px; border-right-style: solid; border-right-color: #D3D3D3; border-top-width: 1px; border-top-style: solid; border-top-color: #D3D3D3; border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: #D3D3D3;\">Number subjects<\/td> #> <td headers=\"Estimate name\" class=\"gt_row gt_left\" style=\"text-align: left; border-left-width: 1px; border-left-style: solid; border-left-color: #D3D3D3; border-right-width: 1px; border-right-style: solid; border-right-color: #D3D3D3; border-top-width: 1px; border-top-style: solid; border-top-color: #D3D3D3; border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: #D3D3D3;\">N<\/td> #> <td headers=\"Estimate value\" class=\"gt_row gt_left\" style=\"text-align: left;\">&lt;5<\/td><\/tr> #>     <tr><td headers=\"CDM name\" class=\"gt_row gt_left\" style=\"text-align: left; border-top-width: 1px; border-top-style: hidden; border-top-color: #000000;\"><\/td> #> <td headers=\"Cohort name reference\" class=\"gt_row gt_left\" style=\"text-align: left; border-left-width: 1px; border-left-style: solid; border-left-color: #D3D3D3; border-right-width: 1px; border-right-style: solid; border-right-color: #D3D3D3; border-top-width: 1px; border-top-style: hidden; border-top-color: #000000; border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: #D3D3D3;\"><\/td> #> <td headers=\"Cohort name comparator\" class=\"gt_row gt_left\" style=\"text-align: left; border-left-width: 1px; border-left-style: solid; border-left-color: #D3D3D3; border-right-width: 1px; border-right-style: solid; border-right-color: #D3D3D3; border-top-width: 1px; border-top-style: hidden; border-top-color: #000000; border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: #D3D3D3;\"><\/td> #> <td headers=\"Variable name\" class=\"gt_row gt_left\" style=\"text-align: left; border-left-width: 1px; border-left-style: solid; border-left-color: #D3D3D3; border-right-width: 1px; border-right-style: solid; border-right-color: #D3D3D3; border-top-width: 1px; border-top-style: solid; border-top-color: #D3D3D3; border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: #D3D3D3;\">Diff days<\/td> #> <td headers=\"Estimate name\" class=\"gt_row gt_left\" style=\"text-align: left; border-left-width: 1px; border-left-style: solid; border-left-color: #D3D3D3; border-right-width: 1px; border-right-style: solid; border-right-color: #D3D3D3; border-top-width: 1px; border-top-style: solid; border-top-color: #D3D3D3; border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: #D3D3D3;\">Median [Q25 - Q75]<\/td> #> <td headers=\"Estimate value\" class=\"gt_row gt_left\" style=\"text-align: left;\">&lt;5 [&lt;5 - &lt;5]<\/td><\/tr> #>     <tr><td headers=\"CDM name\" class=\"gt_row gt_left\" style=\"text-align: left; border-top-width: 1px; border-top-style: hidden; border-top-color: #000000;\"><\/td> #> <td headers=\"Cohort name reference\" class=\"gt_row gt_left\" style=\"text-align: left; border-left-width: 1px; border-left-style: solid; border-left-color: #D3D3D3; border-right-width: 1px; border-right-style: solid; border-right-color: #D3D3D3; border-top-width: 1px; border-top-style: hidden; border-top-color: #000000; border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: #D3D3D3;\"><\/td> #> <td headers=\"Cohort name comparator\" class=\"gt_row gt_left\" style=\"text-align: left; border-left-width: 1px; border-left-style: solid; border-left-color: #D3D3D3; border-right-width: 1px; border-right-style: solid; border-right-color: #D3D3D3; border-top-width: 1px; border-top-style: hidden; border-top-color: #000000; border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: #D3D3D3;\"><\/td> #> <td headers=\"Variable name\" class=\"gt_row gt_left\" style=\"text-align: left; border-left-width: 1px; border-left-style: solid; border-left-color: #D3D3D3; border-right-width: 1px; border-right-style: solid; border-right-color: #D3D3D3; border-top-width: 1px; border-top-style: hidden; border-top-color: #000000; border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: #D3D3D3;\"><\/td> #> <td headers=\"Estimate name\" class=\"gt_row gt_left\" style=\"text-align: left; border-left-width: 1px; border-left-style: solid; border-left-color: #D3D3D3; border-right-width: 1px; border-right-style: solid; border-right-color: #D3D3D3; border-top-width: 1px; border-top-style: solid; border-top-color: #D3D3D3; border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: #D3D3D3;\">Range<\/td> #> <td headers=\"Estimate value\" class=\"gt_row gt_left\" style=\"text-align: left;\">&lt;5 - &lt;5<\/td><\/tr> #>   <\/tbody> #>    #>    #> <\/table> #> <\/div> CDMConnector::cdmDisconnect(cdm = cdm) # }"},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/tableDemographics.html","id":null,"dir":"Reference","previous_headings":"","what":"Format a summariseDemographics result into a visual table. — tableDemographics","title":"Format a summariseDemographics result into a visual table. — tableDemographics","text":"`r lifecycle::badge(\"experimental\")`","code":""},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/tableDemographics.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Format a summariseDemographics result into a visual table. — tableDemographics","text":"","code":"tableDemographics(   result,   type = \"gt\",   formatEstimateName = c(`N (%)` = \"<count> (<percentage>%)\", `Median [Q25 - Q75]` =     \"<median> [<q25> - <q75>]\", `[Q05 - Q95]` = \"[<q05> - <q95>]\", `Mean (SD)` =     \"<mean> (<sd>)\", Range = \"<min> to <max>\"),   header = c(\"group\"),   split = c(\"group\", \"strata\"),   groupColumn = NULL,   minCellCount = 5,   excludeColumns = c(\"result_id\", \"result_type\", \"package_name\", \"package_version\",     \"estimate_type\", \"additional_name\", \"additional_level\"),   .options = list() )"},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/tableDemographics.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Format a summariseDemographics result into a visual table. — tableDemographics","text":"result result summariseDemographics. type Type desired formatted table, possibilities: \"gt\", \"flextable\", \"tibble\". formatEstimateName Named list estimate name's join, sorted computation order. Indicate estimate_name's <...>. header vector containing elements go header order. Allowed : `cdm_name`, `group`, `strata`, `additional`, `variable`, `estimate`, `settings`. split vector containing name-level groups split (\"group\", \"strata\", \"additional\"), empty character vector split. groupColumn Column use group labels. minCellCount Counts results clouded. excludeColumns Columns drop output table. .options Named list additional formatting options. PatientProfiles::optionsTableCharacteristics() shows allowed arguments default values.","code":""},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/tableDemographics.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Format a summariseDemographics result into a visual table. — tableDemographics","text":"table formatted version summariseDemographics result.","code":""},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/tableDemographics.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Format a summariseDemographics result into a visual table. — tableDemographics","text":"","code":"# \\donttest{ library(PatientProfiles)  cdm <- mockPatientProfiles()  cdm$cohort1 |>  summariseDemographics() |>  tableDemographics() #> ℹ adding demographics columns #> ℹ summarising data #> ✔ summariseCharacteristics finished! #> <div id=\"ffdccmiygy\" style=\"padding-left:0px;padding-right:0px;padding-top:10px;padding-bottom:10px;overflow-x:auto;overflow-y:auto;width:auto;height:auto;\"> #>   <style>#ffdccmiygy table { #>   font-family: system-ui, 'Segoe UI', Roboto, Helvetica, Arial, sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol', 'Noto Color Emoji'; #>   -webkit-font-smoothing: antialiased; #>   -moz-osx-font-smoothing: grayscale; #> } #>  #> #ffdccmiygy thead, #ffdccmiygy tbody, #ffdccmiygy tfoot, #ffdccmiygy tr, #ffdccmiygy td, #ffdccmiygy th { #>   border-style: none; #> } #>  #> #ffdccmiygy p { #>   margin: 0; #>   padding: 0; #> } #>  #> #ffdccmiygy .gt_table { #>   display: table; #>   border-collapse: collapse; #>   line-height: normal; #>   margin-left: auto; #>   margin-right: auto; #>   color: #333333; #>   font-size: 16px; #>   font-weight: normal; #>   font-style: normal; #>   background-color: #FFFFFF; #>   width: auto; #>   border-top-style: solid; #>   border-top-width: 2px; #>   border-top-color: #A8A8A8; #>   border-right-style: none; #>   border-right-width: 2px; #>   border-right-color: #D3D3D3; #>   border-bottom-style: solid; #>   border-bottom-width: 2px; #>   border-bottom-color: #A8A8A8; #>   border-left-style: none; #>   border-left-width: 2px; #>   border-left-color: #D3D3D3; #> } #>  #> #ffdccmiygy .gt_caption { #>   padding-top: 4px; #>   padding-bottom: 4px; #> } #>  #> #ffdccmiygy .gt_title { #>   color: #333333; #>   font-size: 125%; #>   font-weight: initial; #>   padding-top: 4px; #>   padding-bottom: 4px; #>   padding-left: 5px; #>   padding-right: 5px; #>   border-bottom-color: #FFFFFF; #>   border-bottom-width: 0; #> } #>  #> #ffdccmiygy .gt_subtitle { #>   color: #333333; #>   font-size: 85%; #>   font-weight: initial; #>   padding-top: 3px; #>   padding-bottom: 5px; #>   padding-left: 5px; #>   padding-right: 5px; #>   border-top-color: #FFFFFF; #>   border-top-width: 0; #> } #>  #> #ffdccmiygy .gt_heading { #>   background-color: #FFFFFF; #>   text-align: center; #>   border-bottom-color: #FFFFFF; #>   border-left-style: none; #>   border-left-width: 1px; #>   border-left-color: #D3D3D3; #>   border-right-style: none; #>   border-right-width: 1px; #>   border-right-color: #D3D3D3; #> } #>  #> #ffdccmiygy .gt_bottom_border { #>   border-bottom-style: solid; #>   border-bottom-width: 2px; #>   border-bottom-color: #D3D3D3; #> } #>  #> #ffdccmiygy .gt_col_headings { #>   border-top-style: solid; #>   border-top-width: 2px; #>   border-top-color: #D3D3D3; #>   border-bottom-style: solid; #>   border-bottom-width: 2px; #>   border-bottom-color: #D3D3D3; #>   border-left-style: none; #>   border-left-width: 1px; #>   border-left-color: #D3D3D3; #>   border-right-style: none; #>   border-right-width: 1px; #>   border-right-color: #D3D3D3; #> } #>  #> #ffdccmiygy .gt_col_heading { #>   color: #333333; #>   background-color: #FFFFFF; #>   font-size: 100%; #>   font-weight: normal; #>   text-transform: inherit; #>   border-left-style: none; #>   border-left-width: 1px; #>   border-left-color: #D3D3D3; #>   border-right-style: none; #>   border-right-width: 1px; #>   border-right-color: #D3D3D3; #>   vertical-align: bottom; #>   padding-top: 5px; #>   padding-bottom: 6px; #>   padding-left: 5px; #>   padding-right: 5px; #>   overflow-x: hidden; #> } #>  #> #ffdccmiygy .gt_column_spanner_outer { #>   color: #333333; #>   background-color: #FFFFFF; #>   font-size: 100%; #>   font-weight: normal; #>   text-transform: inherit; #>   padding-top: 0; #>   padding-bottom: 0; #>   padding-left: 4px; #>   padding-right: 4px; #> } #>  #> #ffdccmiygy .gt_column_spanner_outer:first-child { #>   padding-left: 0; #> } #>  #> #ffdccmiygy .gt_column_spanner_outer:last-child { #>   padding-right: 0; #> } #>  #> #ffdccmiygy .gt_column_spanner { #>   border-bottom-style: solid; #>   border-bottom-width: 2px; #>   border-bottom-color: #D3D3D3; #>   vertical-align: bottom; #>   padding-top: 5px; #>   padding-bottom: 5px; #>   overflow-x: hidden; #>   display: inline-block; #>   width: 100%; #> } #>  #> #ffdccmiygy .gt_spanner_row { #>   border-bottom-style: hidden; #> } #>  #> #ffdccmiygy .gt_group_heading { #>   padding-top: 8px; #>   padding-bottom: 8px; #>   padding-left: 5px; #>   padding-right: 5px; #>   color: #333333; #>   background-color: #FFFFFF; #>   font-size: 100%; #>   font-weight: initial; #>   text-transform: inherit; #>   border-top-style: solid; #>   border-top-width: 2px; #>   border-top-color: #D3D3D3; #>   border-bottom-style: solid; #>   border-bottom-width: 2px; #>   border-bottom-color: #D3D3D3; #>   border-left-style: none; #>   border-left-width: 1px; #>   border-left-color: #D3D3D3; #>   border-right-style: none; #>   border-right-width: 1px; #>   border-right-color: #D3D3D3; #>   vertical-align: middle; #>   text-align: left; #> } #>  #> #ffdccmiygy .gt_empty_group_heading { #>   padding: 0.5px; #>   color: #333333; #>   background-color: #FFFFFF; #>   font-size: 100%; #>   font-weight: initial; #>   border-top-style: solid; #>   border-top-width: 2px; #>   border-top-color: #D3D3D3; #>   border-bottom-style: solid; #>   border-bottom-width: 2px; #>   border-bottom-color: #D3D3D3; #>   vertical-align: middle; #> } #>  #> #ffdccmiygy .gt_from_md > :first-child { #>   margin-top: 0; #> } #>  #> #ffdccmiygy .gt_from_md > :last-child { #>   margin-bottom: 0; #> } #>  #> #ffdccmiygy .gt_row { #>   padding-top: 8px; #>   padding-bottom: 8px; #>   padding-left: 5px; #>   padding-right: 5px; #>   margin: 10px; #>   border-top-style: solid; #>   border-top-width: 1px; #>   border-top-color: #D3D3D3; #>   border-left-style: none; #>   border-left-width: 1px; #>   border-left-color: #D3D3D3; #>   border-right-style: none; #>   border-right-width: 1px; #>   border-right-color: #D3D3D3; #>   vertical-align: middle; #>   overflow-x: hidden; #> } #>  #> #ffdccmiygy .gt_stub { #>   color: #333333; #>   background-color: #FFFFFF; #>   font-size: 100%; #>   font-weight: initial; #>   text-transform: inherit; #>   border-right-style: solid; #>   border-right-width: 2px; #>   border-right-color: #D3D3D3; #>   padding-left: 5px; #>   padding-right: 5px; #> } #>  #> #ffdccmiygy .gt_stub_row_group { #>   color: #333333; #>   background-color: #FFFFFF; #>   font-size: 100%; #>   font-weight: initial; #>   text-transform: inherit; #>   border-right-style: solid; #>   border-right-width: 2px; #>   border-right-color: #D3D3D3; #>   padding-left: 5px; #>   padding-right: 5px; #>   vertical-align: top; #> } #>  #> #ffdccmiygy .gt_row_group_first td { #>   border-top-width: 2px; #> } #>  #> #ffdccmiygy .gt_row_group_first th { #>   border-top-width: 2px; #> } #>  #> #ffdccmiygy .gt_summary_row { #>   color: #333333; #>   background-color: #FFFFFF; #>   text-transform: inherit; #>   padding-top: 8px; #>   padding-bottom: 8px; #>   padding-left: 5px; #>   padding-right: 5px; #> } #>  #> #ffdccmiygy .gt_first_summary_row { #>   border-top-style: solid; #>   border-top-color: #D3D3D3; #> } #>  #> #ffdccmiygy .gt_first_summary_row.thick { #>   border-top-width: 2px; #> } #>  #> #ffdccmiygy .gt_last_summary_row { #>   padding-top: 8px; #>   padding-bottom: 8px; #>   padding-left: 5px; #>   padding-right: 5px; #>   border-bottom-style: solid; #>   border-bottom-width: 2px; #>   border-bottom-color: #D3D3D3; #> } #>  #> #ffdccmiygy .gt_grand_summary_row { #>   color: #333333; #>   background-color: #FFFFFF; #>   text-transform: inherit; #>   padding-top: 8px; #>   padding-bottom: 8px; #>   padding-left: 5px; #>   padding-right: 5px; #> } #>  #> #ffdccmiygy .gt_first_grand_summary_row { #>   padding-top: 8px; #>   padding-bottom: 8px; #>   padding-left: 5px; #>   padding-right: 5px; #>   border-top-style: double; #>   border-top-width: 6px; #>   border-top-color: #D3D3D3; #> } #>  #> #ffdccmiygy .gt_last_grand_summary_row_top { #>   padding-top: 8px; #>   padding-bottom: 8px; #>   padding-left: 5px; #>   padding-right: 5px; #>   border-bottom-style: double; #>   border-bottom-width: 6px; #>   border-bottom-color: #D3D3D3; #> } #>  #> #ffdccmiygy .gt_striped { #>   background-color: rgba(128, 128, 128, 0.05); #> } #>  #> #ffdccmiygy .gt_table_body { #>   border-top-style: solid; #>   border-top-width: 2px; #>   border-top-color: #D3D3D3; #>   border-bottom-style: solid; #>   border-bottom-width: 2px; #>   border-bottom-color: #D3D3D3; #> } #>  #> #ffdccmiygy .gt_footnotes { #>   color: #333333; #>   background-color: #FFFFFF; #>   border-bottom-style: none; #>   border-bottom-width: 2px; #>   border-bottom-color: #D3D3D3; #>   border-left-style: none; #>   border-left-width: 2px; #>   border-left-color: #D3D3D3; #>   border-right-style: none; #>   border-right-width: 2px; #>   border-right-color: #D3D3D3; #> } #>  #> #ffdccmiygy .gt_footnote { #>   margin: 0px; #>   font-size: 90%; #>   padding-top: 4px; #>   padding-bottom: 4px; #>   padding-left: 5px; #>   padding-right: 5px; #> } #>  #> #ffdccmiygy .gt_sourcenotes { #>   color: #333333; #>   background-color: #FFFFFF; #>   border-bottom-style: none; #>   border-bottom-width: 2px; #>   border-bottom-color: #D3D3D3; #>   border-left-style: none; #>   border-left-width: 2px; #>   border-left-color: #D3D3D3; #>   border-right-style: none; #>   border-right-width: 2px; #>   border-right-color: #D3D3D3; #> } #>  #> #ffdccmiygy .gt_sourcenote { #>   font-size: 90%; #>   padding-top: 4px; #>   padding-bottom: 4px; #>   padding-left: 5px; #>   padding-right: 5px; #> } #>  #> #ffdccmiygy .gt_left { #>   text-align: left; #> } #>  #> #ffdccmiygy .gt_center { #>   text-align: center; #> } #>  #> #ffdccmiygy .gt_right { #>   text-align: right; #>   font-variant-numeric: tabular-nums; #> } #>  #> #ffdccmiygy .gt_font_normal { #>   font-weight: normal; #> } #>  #> #ffdccmiygy .gt_font_bold { #>   font-weight: bold; #> } #>  #> #ffdccmiygy .gt_font_italic { #>   font-style: italic; #> } #>  #> #ffdccmiygy .gt_super { #>   font-size: 65%; #> } #>  #> #ffdccmiygy .gt_footnote_marks { #>   font-size: 75%; #>   vertical-align: 0.4em; #>   position: initial; #> } #>  #> #ffdccmiygy .gt_asterisk { #>   font-size: 100%; #>   vertical-align: 0; #> } #>  #> #ffdccmiygy .gt_indent_1 { #>   text-indent: 5px; #> } #>  #> #ffdccmiygy .gt_indent_2 { #>   text-indent: 10px; #> } #>  #> #ffdccmiygy .gt_indent_3 { #>   text-indent: 15px; #> } #>  #> #ffdccmiygy .gt_indent_4 { #>   text-indent: 20px; #> } #>  #> #ffdccmiygy .gt_indent_5 { #>   text-indent: 25px; #> } #> <\/style> #>   <table class=\"gt_table\" data-quarto-disable-processing=\"false\" data-quarto-bootstrap=\"false\"> #>   <thead> #>     <tr class=\"gt_col_headings gt_spanner_row\"> #>       <th class=\"gt_col_heading gt_columns_bottom_border gt_left\" rowspan=\"2\" colspan=\"1\" style=\"text-align: center; font-weight: bold;\" scope=\"col\" id=\"CDM name\">CDM name<\/th> #>       <th class=\"gt_col_heading gt_columns_bottom_border gt_left\" rowspan=\"2\" colspan=\"1\" style=\"text-align: center; font-weight: bold;\" scope=\"col\" id=\"Variable name\">Variable name<\/th> #>       <th class=\"gt_col_heading gt_columns_bottom_border gt_left\" rowspan=\"2\" colspan=\"1\" style=\"text-align: center; font-weight: bold;\" scope=\"col\" id=\"Variable level\">Variable level<\/th> #>       <th class=\"gt_col_heading gt_columns_bottom_border gt_left\" rowspan=\"2\" colspan=\"1\" style=\"text-align: center; font-weight: bold;\" scope=\"col\" id=\"Estimate name\">Estimate name<\/th> #>       <th class=\"gt_center gt_columns_top_border gt_column_spanner_outer\" rowspan=\"1\" colspan=\"1\" style=\"background-color: #C8C8C8; text-align: center; font-weight: bold;\" scope=\"col\" id=\"Cohort name\"> #>         <span class=\"gt_column_spanner\">Cohort name<\/span> #>       <\/th> #>     <\/tr> #>     <tr class=\"gt_col_headings\"> #>       <th class=\"gt_col_heading gt_columns_bottom_border gt_left\" rowspan=\"1\" colspan=\"1\" scope=\"col\" id=\"Cohort 1\">Cohort 1<\/th> #>     <\/tr> #>   <\/thead> #>   <tbody class=\"gt_table_body\"> #>     <tr><td headers=\"CDM name\" class=\"gt_row gt_left\" style=\"text-align: left;\">PP_MOCK<\/td> #> <td headers=\"Variable name\" class=\"gt_row gt_left\" style=\"text-align: left; border-left-width: 1px; border-left-style: solid; border-left-color: #D3D3D3; border-right-width: 1px; border-right-style: solid; border-right-color: #D3D3D3; border-top-width: 1px; border-top-style: solid; border-top-color: #D3D3D3; border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: #D3D3D3;\">Age<\/td> #> <td headers=\"Variable level\" class=\"gt_row gt_left\" style=\"text-align: left; border-left-width: 1px; border-left-style: solid; border-left-color: #D3D3D3; border-right-width: 1px; border-right-style: solid; border-right-color: #D3D3D3; border-top-width: 1px; border-top-style: solid; border-top-color: #D3D3D3; border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: #D3D3D3;\">-<\/td> #> <td headers=\"Estimate name\" class=\"gt_row gt_left\" style=\"text-align: left; border-left-width: 1px; border-left-style: solid; border-left-color: #D3D3D3; border-right-width: 1px; border-right-style: solid; border-right-color: #D3D3D3; border-top-width: 1px; border-top-style: solid; border-top-color: #D3D3D3; border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: #D3D3D3;\">Median [Q25 - Q75]<\/td> #> <td headers=\"[header]Cohort name #> [header_level]Cohort 1\" class=\"gt_row gt_left\" style=\"text-align: right;\">27.00 [27.00 - 27.00]<\/td><\/tr> #>     <tr><td headers=\"CDM name\" class=\"gt_row gt_left\" style=\"text-align: left; border-top-width: 1px; border-top-style: hidden; border-top-color: #000000;\"><\/td> #> <td headers=\"Variable name\" class=\"gt_row gt_left\" style=\"text-align: left; border-left-width: 1px; border-left-style: solid; border-left-color: #D3D3D3; border-right-width: 1px; border-right-style: solid; border-right-color: #D3D3D3; border-top-width: 1px; border-top-style: hidden; border-top-color: #000000; border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: #D3D3D3;\"><\/td> #> <td headers=\"Variable level\" class=\"gt_row gt_left\" style=\"text-align: left; border-left-width: 1px; border-left-style: solid; border-left-color: #D3D3D3; border-right-width: 1px; border-right-style: solid; border-right-color: #D3D3D3; border-top-width: 1px; border-top-style: hidden; border-top-color: #000000; border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: #D3D3D3;\"><\/td> #> <td headers=\"Estimate name\" class=\"gt_row gt_left\" style=\"text-align: left; border-left-width: 1px; border-left-style: solid; border-left-color: #D3D3D3; border-right-width: 1px; border-right-style: solid; border-right-color: #D3D3D3; border-top-width: 1px; border-top-style: solid; border-top-color: #D3D3D3; border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: #D3D3D3;\">[Q05 - Q95]<\/td> #> <td headers=\"[header]Cohort name #> [header_level]Cohort 1\" class=\"gt_row gt_left\" style=\"text-align: right;\">[27.00 - 27.00]<\/td><\/tr> #>     <tr><td headers=\"CDM name\" class=\"gt_row gt_left\" style=\"text-align: left; border-top-width: 1px; border-top-style: hidden; border-top-color: #000000;\"><\/td> #> <td headers=\"Variable name\" class=\"gt_row gt_left\" style=\"text-align: left; border-left-width: 1px; border-left-style: solid; border-left-color: #D3D3D3; border-right-width: 1px; border-right-style: solid; border-right-color: #D3D3D3; border-top-width: 1px; border-top-style: hidden; border-top-color: #000000; border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: #D3D3D3;\"><\/td> #> <td headers=\"Variable level\" class=\"gt_row gt_left\" style=\"text-align: left; border-left-width: 1px; border-left-style: solid; border-left-color: #D3D3D3; border-right-width: 1px; border-right-style: solid; border-right-color: #D3D3D3; border-top-width: 1px; border-top-style: hidden; border-top-color: #000000; border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: #D3D3D3;\"><\/td> #> <td headers=\"Estimate name\" class=\"gt_row gt_left\" style=\"text-align: left; border-left-width: 1px; border-left-style: solid; border-left-color: #D3D3D3; border-right-width: 1px; border-right-style: solid; border-right-color: #D3D3D3; border-top-width: 1px; border-top-style: solid; border-top-color: #D3D3D3; border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: #D3D3D3;\">Mean (SD)<\/td> #> <td headers=\"[header]Cohort name #> [header_level]Cohort 1\" class=\"gt_row gt_left\" style=\"text-align: right;\">27.00 (0.00)<\/td><\/tr> #>     <tr><td headers=\"CDM name\" class=\"gt_row gt_left\" style=\"text-align: left; border-top-width: 1px; border-top-style: hidden; border-top-color: #000000;\"><\/td> #> <td headers=\"Variable name\" class=\"gt_row gt_left\" style=\"text-align: left; border-left-width: 1px; border-left-style: solid; border-left-color: #D3D3D3; border-right-width: 1px; border-right-style: solid; border-right-color: #D3D3D3; border-top-width: 1px; border-top-style: hidden; border-top-color: #000000; border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: #D3D3D3;\"><\/td> #> <td headers=\"Variable level\" class=\"gt_row gt_left\" style=\"text-align: left; border-left-width: 1px; border-left-style: solid; border-left-color: #D3D3D3; border-right-width: 1px; border-right-style: solid; border-right-color: #D3D3D3; border-top-width: 1px; border-top-style: hidden; border-top-color: #000000; border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: #D3D3D3;\"><\/td> #> <td headers=\"Estimate name\" class=\"gt_row gt_left\" style=\"text-align: left; border-left-width: 1px; border-left-style: solid; border-left-color: #D3D3D3; border-right-width: 1px; border-right-style: solid; border-right-color: #D3D3D3; border-top-width: 1px; border-top-style: solid; border-top-color: #D3D3D3; border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: #D3D3D3;\">Range<\/td> #> <td headers=\"[header]Cohort name #> [header_level]Cohort 1\" class=\"gt_row gt_left\" style=\"text-align: right;\">27.00 to 27.00<\/td><\/tr> #>     <tr><td headers=\"CDM name\" class=\"gt_row gt_left\" style=\"text-align: left; border-top-width: 1px; border-top-style: hidden; border-top-color: #000000;\"><\/td> #> <td headers=\"Variable name\" class=\"gt_row gt_left\" style=\"text-align: left; border-left-width: 1px; border-left-style: solid; border-left-color: #D3D3D3; border-right-width: 1px; border-right-style: solid; border-right-color: #D3D3D3; border-top-width: 1px; border-top-style: solid; border-top-color: #D3D3D3; border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: #D3D3D3;\">Sex<\/td> #> <td headers=\"Variable level\" class=\"gt_row gt_left\" style=\"text-align: left; border-left-width: 1px; border-left-style: solid; border-left-color: #D3D3D3; border-right-width: 1px; border-right-style: solid; border-right-color: #D3D3D3; border-top-width: 1px; border-top-style: solid; border-top-color: #D3D3D3; border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: #D3D3D3;\">Female<\/td> #> <td headers=\"Estimate name\" class=\"gt_row gt_left\" style=\"text-align: left; border-left-width: 1px; border-left-style: solid; border-left-color: #D3D3D3; border-right-width: 1px; border-right-style: solid; border-right-color: #D3D3D3; border-top-width: 1px; border-top-style: solid; border-top-color: #D3D3D3; border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: #D3D3D3;\">N (%)<\/td> #> <td headers=\"[header]Cohort name #> [header_level]Cohort 1\" class=\"gt_row gt_left\" style=\"text-align: right;\">&lt;5 (&lt;5%)<\/td><\/tr> #>     <tr><td headers=\"CDM name\" class=\"gt_row gt_left\" style=\"text-align: left; border-top-width: 1px; border-top-style: hidden; border-top-color: #000000;\"><\/td> #> <td headers=\"Variable name\" class=\"gt_row gt_left\" style=\"text-align: left; border-left-width: 1px; border-left-style: solid; border-left-color: #D3D3D3; border-right-width: 1px; border-right-style: solid; border-right-color: #D3D3D3; border-top-width: 1px; border-top-style: solid; border-top-color: #D3D3D3; border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: #D3D3D3;\">Prior observation<\/td> #> <td headers=\"Variable level\" class=\"gt_row gt_left\" style=\"text-align: left; border-left-width: 1px; border-left-style: solid; border-left-color: #D3D3D3; border-right-width: 1px; border-right-style: solid; border-right-color: #D3D3D3; border-top-width: 1px; border-top-style: solid; border-top-color: #D3D3D3; border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: #D3D3D3;\">-<\/td> #> <td headers=\"Estimate name\" class=\"gt_row gt_left\" style=\"text-align: left; border-left-width: 1px; border-left-style: solid; border-left-color: #D3D3D3; border-right-width: 1px; border-right-style: solid; border-right-color: #D3D3D3; border-top-width: 1px; border-top-style: solid; border-top-color: #D3D3D3; border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: #D3D3D3;\">Median [Q25 - Q75]<\/td> #> <td headers=\"[header]Cohort name #> [header_level]Cohort 1\" class=\"gt_row gt_left\" style=\"text-align: right;\">5,120.00 [5,082.00 - 5,158.00]<\/td><\/tr> #>     <tr><td headers=\"CDM name\" class=\"gt_row gt_left\" style=\"text-align: left; border-top-width: 1px; border-top-style: hidden; border-top-color: #000000;\"><\/td> #> <td headers=\"Variable name\" class=\"gt_row gt_left\" style=\"text-align: left; border-left-width: 1px; border-left-style: solid; border-left-color: #D3D3D3; border-right-width: 1px; border-right-style: solid; border-right-color: #D3D3D3; border-top-width: 1px; border-top-style: hidden; border-top-color: #000000; border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: #D3D3D3;\"><\/td> #> <td headers=\"Variable level\" class=\"gt_row gt_left\" style=\"text-align: left; border-left-width: 1px; border-left-style: solid; border-left-color: #D3D3D3; border-right-width: 1px; border-right-style: solid; border-right-color: #D3D3D3; border-top-width: 1px; border-top-style: hidden; border-top-color: #000000; border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: #D3D3D3;\"><\/td> #> <td headers=\"Estimate name\" class=\"gt_row gt_left\" style=\"text-align: left; border-left-width: 1px; border-left-style: solid; border-left-color: #D3D3D3; border-right-width: 1px; border-right-style: solid; border-right-color: #D3D3D3; border-top-width: 1px; border-top-style: solid; border-top-color: #D3D3D3; border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: #D3D3D3;\">[Q05 - Q95]<\/td> #> <td headers=\"[header]Cohort name #> [header_level]Cohort 1\" class=\"gt_row gt_left\" style=\"text-align: right;\">[5,051.60 - 5,188.40]<\/td><\/tr> #>     <tr><td headers=\"CDM name\" class=\"gt_row gt_left\" style=\"text-align: left; border-top-width: 1px; border-top-style: hidden; border-top-color: #000000;\"><\/td> #> <td headers=\"Variable name\" class=\"gt_row gt_left\" style=\"text-align: left; border-left-width: 1px; border-left-style: solid; border-left-color: #D3D3D3; border-right-width: 1px; border-right-style: solid; border-right-color: #D3D3D3; border-top-width: 1px; border-top-style: hidden; border-top-color: #000000; border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: #D3D3D3;\"><\/td> #> <td headers=\"Variable level\" class=\"gt_row gt_left\" style=\"text-align: left; border-left-width: 1px; border-left-style: solid; border-left-color: #D3D3D3; border-right-width: 1px; border-right-style: solid; border-right-color: #D3D3D3; border-top-width: 1px; border-top-style: hidden; border-top-color: #000000; border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: #D3D3D3;\"><\/td> #> <td headers=\"Estimate name\" class=\"gt_row gt_left\" style=\"text-align: left; border-left-width: 1px; border-left-style: solid; border-left-color: #D3D3D3; border-right-width: 1px; border-right-style: solid; border-right-color: #D3D3D3; border-top-width: 1px; border-top-style: solid; border-top-color: #D3D3D3; border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: #D3D3D3;\">Mean (SD)<\/td> #> <td headers=\"[header]Cohort name #> [header_level]Cohort 1\" class=\"gt_row gt_left\" style=\"text-align: right;\">5,120.00 (107.48)<\/td><\/tr> #>     <tr><td headers=\"CDM name\" class=\"gt_row gt_left\" style=\"text-align: left; border-top-width: 1px; border-top-style: hidden; border-top-color: #000000;\"><\/td> #> <td headers=\"Variable name\" class=\"gt_row gt_left\" style=\"text-align: left; border-left-width: 1px; border-left-style: solid; border-left-color: #D3D3D3; border-right-width: 1px; border-right-style: solid; border-right-color: #D3D3D3; border-top-width: 1px; border-top-style: hidden; border-top-color: #000000; border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: #D3D3D3;\"><\/td> #> <td headers=\"Variable level\" class=\"gt_row gt_left\" style=\"text-align: left; border-left-width: 1px; border-left-style: solid; border-left-color: #D3D3D3; border-right-width: 1px; border-right-style: solid; border-right-color: #D3D3D3; border-top-width: 1px; border-top-style: hidden; border-top-color: #000000; border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: #D3D3D3;\"><\/td> #> <td headers=\"Estimate name\" class=\"gt_row gt_left\" style=\"text-align: left; border-left-width: 1px; border-left-style: solid; border-left-color: #D3D3D3; border-right-width: 1px; border-right-style: solid; border-right-color: #D3D3D3; border-top-width: 1px; border-top-style: solid; border-top-color: #D3D3D3; border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: #D3D3D3;\">Range<\/td> #> <td headers=\"[header]Cohort name #> [header_level]Cohort 1\" class=\"gt_row gt_left\" style=\"text-align: right;\">5,044.00 to 5,196.00<\/td><\/tr> #>     <tr><td headers=\"CDM name\" class=\"gt_row gt_left\" style=\"text-align: left; border-top-width: 1px; border-top-style: hidden; border-top-color: #000000;\"><\/td> #> <td headers=\"Variable name\" class=\"gt_row gt_left\" style=\"text-align: left; border-left-width: 1px; border-left-style: solid; border-left-color: #D3D3D3; border-right-width: 1px; border-right-style: solid; border-right-color: #D3D3D3; border-top-width: 1px; border-top-style: solid; border-top-color: #D3D3D3; border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: #D3D3D3;\">Future observation<\/td> #> <td headers=\"Variable level\" class=\"gt_row gt_left\" style=\"text-align: left; border-left-width: 1px; border-left-style: solid; border-left-color: #D3D3D3; border-right-width: 1px; border-right-style: solid; border-right-color: #D3D3D3; border-top-width: 1px; border-top-style: solid; border-top-color: #D3D3D3; border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: #D3D3D3;\">-<\/td> #> <td headers=\"Estimate name\" class=\"gt_row gt_left\" style=\"text-align: left; border-left-width: 1px; border-left-style: solid; border-left-color: #D3D3D3; border-right-width: 1px; border-right-style: solid; border-right-color: #D3D3D3; border-top-width: 1px; border-top-style: solid; border-top-color: #D3D3D3; border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: #D3D3D3;\">Median [Q25 - Q75]<\/td> #> <td headers=\"[header]Cohort name #> [header_level]Cohort 1\" class=\"gt_row gt_left\" style=\"text-align: right;\">29,965.00 [29,927.00 - 30,003.00]<\/td><\/tr> #>     <tr><td headers=\"CDM name\" class=\"gt_row gt_left\" style=\"text-align: left; border-top-width: 1px; border-top-style: hidden; border-top-color: #000000;\"><\/td> #> <td headers=\"Variable name\" class=\"gt_row gt_left\" style=\"text-align: left; border-left-width: 1px; border-left-style: solid; border-left-color: #D3D3D3; border-right-width: 1px; border-right-style: solid; border-right-color: #D3D3D3; border-top-width: 1px; border-top-style: hidden; border-top-color: #000000; border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: #D3D3D3;\"><\/td> #> <td headers=\"Variable level\" class=\"gt_row gt_left\" style=\"text-align: left; border-left-width: 1px; border-left-style: solid; border-left-color: #D3D3D3; border-right-width: 1px; border-right-style: solid; border-right-color: #D3D3D3; border-top-width: 1px; border-top-style: hidden; border-top-color: #000000; border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: #D3D3D3;\"><\/td> #> <td headers=\"Estimate name\" class=\"gt_row gt_left\" style=\"text-align: left; border-left-width: 1px; border-left-style: solid; border-left-color: #D3D3D3; border-right-width: 1px; border-right-style: solid; border-right-color: #D3D3D3; border-top-width: 1px; border-top-style: solid; border-top-color: #D3D3D3; border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: #D3D3D3;\">[Q05 - Q95]<\/td> #> <td headers=\"[header]Cohort name #> [header_level]Cohort 1\" class=\"gt_row gt_left\" style=\"text-align: right;\">[29,896.60 - 30,033.40]<\/td><\/tr> #>     <tr><td headers=\"CDM name\" class=\"gt_row gt_left\" style=\"text-align: left; border-top-width: 1px; border-top-style: hidden; border-top-color: #000000;\"><\/td> #> <td headers=\"Variable name\" class=\"gt_row gt_left\" style=\"text-align: left; border-left-width: 1px; border-left-style: solid; border-left-color: #D3D3D3; border-right-width: 1px; border-right-style: solid; border-right-color: #D3D3D3; border-top-width: 1px; border-top-style: hidden; border-top-color: #000000; border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: #D3D3D3;\"><\/td> #> <td headers=\"Variable level\" class=\"gt_row gt_left\" style=\"text-align: left; border-left-width: 1px; border-left-style: solid; border-left-color: #D3D3D3; border-right-width: 1px; border-right-style: solid; border-right-color: #D3D3D3; border-top-width: 1px; border-top-style: hidden; border-top-color: #000000; border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: #D3D3D3;\"><\/td> #> <td headers=\"Estimate name\" class=\"gt_row gt_left\" style=\"text-align: left; border-left-width: 1px; border-left-style: solid; border-left-color: #D3D3D3; border-right-width: 1px; border-right-style: solid; border-right-color: #D3D3D3; border-top-width: 1px; border-top-style: solid; border-top-color: #D3D3D3; border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: #D3D3D3;\">Mean (SD)<\/td> #> <td headers=\"[header]Cohort name #> [header_level]Cohort 1\" class=\"gt_row gt_left\" style=\"text-align: right;\">29,965.00 (107.48)<\/td><\/tr> #>     <tr><td headers=\"CDM name\" class=\"gt_row gt_left\" style=\"text-align: left; border-top-width: 1px; border-top-style: hidden; border-top-color: #000000;\"><\/td> #> <td headers=\"Variable name\" class=\"gt_row gt_left\" style=\"text-align: left; border-left-width: 1px; border-left-style: solid; border-left-color: #D3D3D3; border-right-width: 1px; border-right-style: solid; border-right-color: #D3D3D3; border-top-width: 1px; border-top-style: hidden; border-top-color: #000000; border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: #D3D3D3;\"><\/td> #> <td headers=\"Variable level\" class=\"gt_row gt_left\" style=\"text-align: left; border-left-width: 1px; border-left-style: solid; border-left-color: #D3D3D3; border-right-width: 1px; border-right-style: solid; border-right-color: #D3D3D3; border-top-width: 1px; border-top-style: hidden; border-top-color: #000000; border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: #D3D3D3;\"><\/td> #> <td headers=\"Estimate name\" class=\"gt_row gt_left\" style=\"text-align: left; border-left-width: 1px; border-left-style: solid; border-left-color: #D3D3D3; border-right-width: 1px; border-right-style: solid; border-right-color: #D3D3D3; border-top-width: 1px; border-top-style: solid; border-top-color: #D3D3D3; border-bottom-width: 1px; border-bottom-style: solid; border-bottom-color: #D3D3D3;\">Range<\/td> #> <td headers=\"[header]Cohort name #> [header_level]Cohort 1\" class=\"gt_row gt_left\" style=\"text-align: right;\">29,889.00 to 30,041.00<\/td><\/tr> #>   <\/tbody> #>    #>    #> <\/table> #> <\/div>  CDMConnector::cdmDisconnect(cdm = cdm) # }"},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/tableLargeScaleCharacteristics.html","id":null,"dir":"Reference","previous_headings":"","what":"Format a summarised_large_scale_characteristics object into a visual table. — tableLargeScaleCharacteristics","title":"Format a summarised_large_scale_characteristics object into a visual table. — tableLargeScaleCharacteristics","text":"`r lifecycle::badge(\"experimental\")`","code":""},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/tableLargeScaleCharacteristics.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Format a summarised_large_scale_characteristics object into a visual table. — tableLargeScaleCharacteristics","text":"","code":"tableLargeScaleCharacteristics(   result,   type = \"gt\",   formatEstimateName = c(`N (%)` = \"<count> (<percentage>%)\"),   splitStrata = TRUE,   header = c(\"cdm name\", \"cohort name\", \"strata\", \"window name\"),   topConcepts = 10,   minCellCount = 5 )"},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/tableLargeScaleCharacteristics.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Format a summarised_large_scale_characteristics object into a visual table. — tableLargeScaleCharacteristics","text":"result summarised_large_scalecharacteristics object. type Output type (\"gt\" \"flextable\"). formatEstimateName Named list estimate name's join, sorted computation order. Indicate estimate_name's <...>. splitStrata Whether split strata_group starta_level multiple columns. header Specify headers table. topConcepts Number concepts restrict table. minCellCount Minimum number counts display.","code":""},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/tableLargeScaleCharacteristics.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Format a summarised_large_scale_characteristics object into a visual table. — tableLargeScaleCharacteristics","text":"formatted table.","code":""},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/tableLargeScaleCharacteristics.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Format a summarised_large_scale_characteristics object into a visual table. — tableLargeScaleCharacteristics","text":"","code":"if (FALSE) { library(DBI) library(duckdb) library(CDMConnector)  con <- dbConnect(duckdb(), eunomia_dir()) cdm <- cdmFromCon(con = con, cdmSchema = \"main\", writeSchema = \"main\") cdm <- generateConceptCohortSet(   cdm = cdm,   conceptSet = list(\"viral_pharyngitis\" = 4112343),   name = \"my_cohort\" ) result <- summariseLargeScaleCharacteristics(   cohort = cdm$my_cohort,   eventInWindow = \"condition_occurrence\",   episodeInWindow = \"drug_exposure\" ) tableLargeScaleCharacteristics(result) }"},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/tableTableIntersect.html","id":null,"dir":"Reference","previous_headings":"","what":"Format a summariseTableIntersect result into a visual table. — tableTableIntersect","title":"Format a summariseTableIntersect result into a visual table. — tableTableIntersect","text":"`r lifecycle::badge(\"experimental\")`","code":""},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/tableTableIntersect.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Format a summariseTableIntersect result into a visual table. — tableTableIntersect","text":"","code":"tableTableIntersect(   result,   type = \"gt\",   formatEstimateName = c(`N (%)` = \"<count> (<percentage>%)\", `Median [Q25 - Q75]` =     \"<median> [<q25> - <q75>]\", `Mean (SD)` = \"<mean> (<sd>)\", Range = \"<min> to <max>\"),   header = c(\"group\"),   split = c(\"group\", \"strata\"),   groupColumn = NULL,   minCellCount = 5,   excludeColumns = c(\"result_id\", \"result_type\", \"package_name\", \"package_version\",     \"estimate_type\", \"variable_level\", \"additional_name\", \"additional_level\"),   .options = list() )"},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/tableTableIntersect.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Format a summariseTableIntersect result into a visual table. — tableTableIntersect","text":"result result summariseTableIntersect. type Type desired formatted table, possibilities: \"gt\", \"flextable\", \"tibble\". formatEstimateName Named list estimate name's join, sorted computation order. Indicate estimate_name's <...>. header vector containing elements go header order. Allowed : `cdm_name`, `group`, `strata`, `additional`, `variable`, `estimate`, `settings`. split vector containing name-level groups split (\"group\", \"strata\", \"additional\"), empty character vector split. groupColumn Column use group labels. minCellCount Counts results clouded. excludeColumns Columns drop output table. .options Named list additional formatting options. PatientProfiles::optionsTableCharacteristics() shows allowed arguments default values.","code":""},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/tableTableIntersect.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Format a summariseTableIntersect result into a visual table. — tableTableIntersect","text":"table formatted version summariseTableIntersect result.","code":""},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/variableTypes.html","id":null,"dir":"Reference","previous_headings":"","what":"Classify the variables between 5 types: ","title":"Classify the variables between 5 types: ","text":"Classify variables 5 types: \"numeric\", \"categorical\", \"binary\", \"date\", NA.","code":""},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/variableTypes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Classify the variables between 5 types: ","text":"","code":"variableTypes(table)"},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/variableTypes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Classify the variables between 5 types: ","text":"table Tibble.","code":""},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/variableTypes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Classify the variables between 5 types: ","text":"Tibble variables type classification.","code":""},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/variableTypes.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Classify the variables between 5 types: ","text":"","code":"# \\donttest{ library(PatientProfiles) x <- dplyr::tibble(   person_id = c(1, 2),   start_date = as.Date(c(\"2020-05-02\", \"2021-11-19\")),   asthma = c(0, 1) ) variableTypes(x) #> # A tibble: 3 × 2 #>   variable_name variable_type #>   <chr>         <chr>         #> 1 person_id     numeric       #> 2 start_date    date          #> 3 asthma        numeric       # }"}]
