[{"path":[]},{"path":"https://oxford-pharmacoepi.github.io/PatientProfiles/CONTRIBUTING.html","id":"filing-issues","dir":"","previous_headings":"","what":"Filing issues","title":"Contributing to PatientProfiles","text":"found bug, question, want suggest new feature please open issue. reporting bug, reprex much appreciated. contributing either documentation code, please make sure open issue beforehand identify needs done .","code":""},{"path":"https://oxford-pharmacoepi.github.io/PatientProfiles/CONTRIBUTING.html","id":"documenting-the-package","dir":"","previous_headings":"Filing issues","what":"Documenting the package","title":"Contributing to PatientProfiles","text":"Run update check package documentation: Note devtools::check_man() return warnings. commit limited package documentation, running sufficient (although running devtools::check() always generally good idea submitting pull request.","code":"devtools::document()  devtools::run_examples() devtools::build_readme() devtools::build_vignettes() devtools::check_man()"},{"path":"https://oxford-pharmacoepi.github.io/PatientProfiles/CONTRIBUTING.html","id":"run-tests","dir":"","previous_headings":"Filing issues","what":"Run tests","title":"Contributing to PatientProfiles","text":"starting contribute code, first make sure package tests passing. raise issue going (although please first make sure packages imports suggests installed). contribute code, make sure current tests add continue pass. package tests can run together : Code add new functionality accompanied tests. Code coverage can checked using:","code":"devtools::test() # note, you may first have to detach the package # detach(\"package:PatientProfiles\", unload=TRUE) devtools::test_coverage()"},{"path":"https://oxford-pharmacoepi.github.io/PatientProfiles/CONTRIBUTING.html","id":"adhere-to-code-style","dir":"","previous_headings":"Filing issues","what":"Adhere to code style","title":"Contributing to PatientProfiles","text":"Please adhere code style adding new code. though restyle code unrelated pull request make code review difficult.","code":"lintr::lint_package(\".\",                     linters = lintr::linters_with_defaults(                       lintr::object_name_linter(styles = \"camelCase\")                     ) )"},{"path":"https://oxford-pharmacoepi.github.io/PatientProfiles/CONTRIBUTING.html","id":"run-check-before-opening-a-pull-request","dir":"","previous_headings":"Filing issues","what":"Run check() before opening a pull request","title":"Contributing to PatientProfiles","text":"opening pull request please make sure run: warnings seen.","code":"devtools::check()"},{"path":"https://oxford-pharmacoepi.github.io/PatientProfiles/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"Apache License","title":"Apache License","text":"Version 2.0, January 2004 <http://www.apache.org/licenses/>","code":""},{"path":[]},{"path":"https://oxford-pharmacoepi.github.io/PatientProfiles/LICENSE.html","id":"id_1-definitions","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"1. Definitions","title":"Apache License","text":"“License” shall mean terms conditions use, reproduction, distribution defined Sections 1 9 document. “Licensor” shall mean copyright owner entity authorized copyright owner granting License. “Legal Entity” shall mean union acting entity entities control, controlled , common control entity. purposes definition, “control” means () power, direct indirect, cause direction management entity, whether contract otherwise, (ii) ownership fifty percent (50%) outstanding shares, (iii) beneficial ownership entity. “” (“”) shall mean individual Legal Entity exercising permissions granted License. “Source” form shall mean preferred form making modifications, including limited software source code, documentation source, configuration files. “Object” form shall mean form resulting mechanical transformation translation Source form, including limited compiled object code, generated documentation, conversions media types. “Work” shall mean work authorship, whether Source Object form, made available License, indicated copyright notice included attached work (example provided Appendix ). “Derivative Works” shall mean work, whether Source Object form, based (derived ) Work editorial revisions, annotations, elaborations, modifications represent, whole, original work authorship. purposes License, Derivative Works shall include works remain separable , merely link (bind name) interfaces , Work Derivative Works thereof. “Contribution” shall mean work authorship, including original version Work modifications additions Work Derivative Works thereof, intentionally submitted Licensor inclusion Work copyright owner individual Legal Entity authorized submit behalf copyright owner. purposes definition, “submitted” means form electronic, verbal, written communication sent Licensor representatives, including limited communication electronic mailing lists, source code control systems, issue tracking systems managed , behalf , Licensor purpose discussing improving Work, excluding communication conspicuously marked otherwise designated writing copyright owner “Contribution.” “Contributor” shall mean Licensor individual Legal Entity behalf Contribution received Licensor subsequently incorporated within Work.","code":""},{"path":"https://oxford-pharmacoepi.github.io/PatientProfiles/LICENSE.html","id":"id_2-grant-of-copyright-license","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"2. Grant of Copyright License","title":"Apache License","text":"Subject terms conditions License, Contributor hereby grants perpetual, worldwide, non-exclusive, -charge, royalty-free, irrevocable copyright license reproduce, prepare Derivative Works , publicly display, publicly perform, sublicense, distribute Work Derivative Works Source Object form.","code":""},{"path":"https://oxford-pharmacoepi.github.io/PatientProfiles/LICENSE.html","id":"id_3-grant-of-patent-license","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"3. Grant of Patent License","title":"Apache License","text":"Subject terms conditions License, Contributor hereby grants perpetual, worldwide, non-exclusive, -charge, royalty-free, irrevocable (except stated section) patent license make, made, use, offer sell, sell, import, otherwise transfer Work, license applies patent claims licensable Contributor necessarily infringed Contribution(s) alone combination Contribution(s) Work Contribution(s) submitted. institute patent litigation entity (including cross-claim counterclaim lawsuit) alleging Work Contribution incorporated within Work constitutes direct contributory patent infringement, patent licenses granted License Work shall terminate date litigation filed.","code":""},{"path":"https://oxford-pharmacoepi.github.io/PatientProfiles/LICENSE.html","id":"id_4-redistribution","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"4. Redistribution","title":"Apache License","text":"may reproduce distribute copies Work Derivative Works thereof medium, without modifications, Source Object form, provided meet following conditions: () must give recipients Work Derivative Works copy License; (b) must cause modified files carry prominent notices stating changed files; (c) must retain, Source form Derivative Works distribute, copyright, patent, trademark, attribution notices Source form Work, excluding notices pertain part Derivative Works; (d) Work includes “NOTICE” text file part distribution, Derivative Works distribute must include readable copy attribution notices contained within NOTICE file, excluding notices pertain part Derivative Works, least one following places: within NOTICE text file distributed part Derivative Works; within Source form documentation, provided along Derivative Works; , within display generated Derivative Works, wherever third-party notices normally appear. contents NOTICE file informational purposes modify License. may add attribution notices within Derivative Works distribute, alongside addendum NOTICE text Work, provided additional attribution notices construed modifying License. may add copyright statement modifications may provide additional different license terms conditions use, reproduction, distribution modifications, Derivative Works whole, provided use, reproduction, distribution Work otherwise complies conditions stated License.","code":""},{"path":"https://oxford-pharmacoepi.github.io/PatientProfiles/LICENSE.html","id":"id_5-submission-of-contributions","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"5. Submission of Contributions","title":"Apache License","text":"Unless explicitly state otherwise, Contribution intentionally submitted inclusion Work Licensor shall terms conditions License, without additional terms conditions. Notwithstanding , nothing herein shall supersede modify terms separate license agreement may executed Licensor regarding Contributions.","code":""},{"path":"https://oxford-pharmacoepi.github.io/PatientProfiles/LICENSE.html","id":"id_6-trademarks","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"6. Trademarks","title":"Apache License","text":"License grant permission use trade names, trademarks, service marks, product names Licensor, except required reasonable customary use describing origin Work reproducing content NOTICE file.","code":""},{"path":"https://oxford-pharmacoepi.github.io/PatientProfiles/LICENSE.html","id":"id_7-disclaimer-of-warranty","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"7. Disclaimer of Warranty","title":"Apache License","text":"Unless required applicable law agreed writing, Licensor provides Work (Contributor provides Contributions) “” BASIS, WITHOUT WARRANTIES CONDITIONS KIND, either express implied, including, without limitation, warranties conditions TITLE, NON-INFRINGEMENT, MERCHANTABILITY, FITNESS PARTICULAR PURPOSE. solely responsible determining appropriateness using redistributing Work assume risks associated exercise permissions License.","code":""},{"path":"https://oxford-pharmacoepi.github.io/PatientProfiles/LICENSE.html","id":"id_8-limitation-of-liability","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"8. Limitation of Liability","title":"Apache License","text":"event legal theory, whether tort (including negligence), contract, otherwise, unless required applicable law (deliberate grossly negligent acts) agreed writing, shall Contributor liable damages, including direct, indirect, special, incidental, consequential damages character arising result License use inability use Work (including limited damages loss goodwill, work stoppage, computer failure malfunction, commercial damages losses), even Contributor advised possibility damages.","code":""},{"path":"https://oxford-pharmacoepi.github.io/PatientProfiles/LICENSE.html","id":"id_9-accepting-warranty-or-additional-liability","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"9. Accepting Warranty or Additional Liability","title":"Apache License","text":"redistributing Work Derivative Works thereof, may choose offer, charge fee , acceptance support, warranty, indemnity, liability obligations /rights consistent License. However, accepting obligations, may act behalf sole responsibility, behalf Contributor, agree indemnify, defend, hold Contributor harmless liability incurred , claims asserted , Contributor reason accepting warranty additional liability. END TERMS CONDITIONS","code":""},{"path":"https://oxford-pharmacoepi.github.io/PatientProfiles/LICENSE.html","id":"appendix-how-to-apply-the-apache-license-to-your-work","dir":"","previous_headings":"","what":"APPENDIX: How to apply the Apache License to your work","title":"Apache License","text":"apply Apache License work, attach following boilerplate notice, fields enclosed brackets [] replaced identifying information. (Don’t include brackets!) text enclosed appropriate comment syntax file format. also recommend file class name description purpose included “printed page” copyright notice easier identification within third-party archives.","code":"Copyright [yyyy] [name of copyright owner]  Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at    http://www.apache.org/licenses/LICENSE-2.0  Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License."},{"path":"https://oxford-pharmacoepi.github.io/PatientProfiles/articles/addCohortIntersect_vignettes.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Get cohort intersect using PatientProfiles","text":"document demonstrate use addIntersect() function PatientProfiles obtain cohort intersect information individual CDM cohort table. using addIntersect() need two input table. Table containing cohort individual intersect information attached extra columns. function table label x. table need saved table within CDM environment contain. Table search compute intersect information . function table label cohortTableName. table need saved table within CDM environment. table need contain column “cohort_definition_id”, “subject_id”, “cohort_start_date”, “cohort_end_date”. intersect information function can return : number count intersect cohortTableName binary indicator whether intersect found cohortTableName date earliest latest date cohort_start_date intersect. time time number days cohort_start_date individual earliest latest intersect date. example addIntersect() generated using mock data. First use mockCohorProfiles() generate two cohort table cdm environment name cohort1 cohort2 saved cdm. add intersect information column cohort1 cohort2, run code. see result , added 4 extra columns named “all_0_to_Inf” (default “all_0_to_Inf”, “all_0_to_Inf_1”,“all_0_to_Inf_2”,“all_0_to_Inf_3”) renamed “date_intersect”, “time_intersect”, “count_intersect”, “flag_intersect”. columns name “{cohortNames}{window}{window interests}_{number_if_repeated}“. change return last cohort start date can use order option function value option can use specified value want return. can use window option change look back period date reference table x date event event table.","code":"library(DBI) library(duckdb) library(tibble) library(PatientProfiles) #functionality cohort1 <- dplyr::tibble(   cohort_definition_id = c(1, 1, 1, 1, 1),   subject_id = c(1, 1, 1, 2, 2),   cohort_start_date = as.Date(     c(       \"2020-01-01\",       \"2020-01-15\",       \"2020-01-20\",       \"2020-01-01\",       \"2020-02-01\"     )   ),   cohort_end_date = as.Date(     c(       \"2020-01-01\",       \"2020-01-15\",       \"2020-01-20\",       \"2020-01-01\",       \"2020-02-01\"     )   ) ) cohort2 <- dplyr::tibble(   cohort_definition_id = c(1, 1, 1, 1, 1, 1, 1),   subject_id = c(1, 1, 1, 2, 2, 2, 1),   cohort_start_date = as.Date(     c(       \"2020-01-15\",       \"2020-01-25\",       \"2020-01-26\",       \"2020-01-29\",       \"2020-03-15\",       \"2020-01-24\",       \"2020-02-16\"     )   ),   cohort_end_date = as.Date(     c(       \"2020-01-15\",       \"2020-01-25\",       \"2020-01-26\",       \"2020-01-29\",       \"2020-03-15\",       \"2020-01-24\",       \"2020-02-16\"     )   ), ) cdm <- mockPatientProfiles(cohort1=cohort1, cohort2=cohort2) cdm$cohort1 %>% addIntersect(cdm = cdm,cohortTableName = \"cohort2\", value = \"date\") %>%    dplyr::rename(date_intersect = all_0_to_Inf) %>%   addIntersect(cdm = cdm,cohortTableName = \"cohort2\", value = \"time\") %>%      dplyr::rename(time_intersect = all_0_to_Inf) %>%   addIntersect(cdm = cdm,cohortTableName = \"cohort2\", value = \"count\") %>%      dplyr::rename(count_intersect = all_0_to_Inf) %>%   addIntersect(cdm = cdm,cohortTableName = \"cohort2\", value = \"flag\") %>%   dplyr::rename(flag_intersect = all_0_to_Inf) cdm$cohort1 %>% addIntersect(cdm = cdm,cohortTableName = \"cohort2\", value = \"date\", order = \"last\") cdm$cohort1 %>% addIntersect(cdm = cdm,cohortTableName = \"cohort2\", value = c(\"flag\")) cdm$cohort1 %>% addIntersect(cdm = cdm,cohortTableName = \"cohort2\", value = \"count\", window = list(c(0,0)))"},{"path":"https://oxford-pharmacoepi.github.io/PatientProfiles/articles/addPatientCharacteristics.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Get patients' characteristics","text":"vignette show different functions get characteristics (e.g. age, sex, prior history…) subjects OMOP CDM tables cohort tables. can useful explanatory analysis well calling functions complex analyses. PatientProfiles package designed work data OMOP CDM format, first step create reference data using DBI CDMConnector packages. connection Postgres database look like: example work simulated data generated mockPatientProfiles() function provided package, mimics database formatted OMOP:","code":"library(DBI) library(CDMConnector)  # The input arguments provided are for illustrative purposes only and do not provide access to any database.  con <- DBI::dbConnect(RPostgres::Postgres(),                       dbname = \"omop_cdm\",                                 host = \"10.80.192.00\",                       user = \"user_name\",                       password = \"user_pasword\" )  cdm <- CDMConnector::cdm_from_con(con,                                   cdm_schema = \"main\",                                   write_schema = \"main\",                                   cohort_tables = \"cohort_example\" ) library(PatientProfiles) library(duckdb) library(tibble) library(dplyr)  cdm <- mockPatientProfiles(   patient_size = 1000,    drug_exposure_size = 1000 )"},{"path":"https://oxford-pharmacoepi.github.io/PatientProfiles/articles/addPatientCharacteristics.html","id":"example-get-characteristics-in-tables","dir":"Articles","previous_headings":"","what":"Example: get characteristics in tables","title":"Get patients' characteristics","text":"addAge(): adds new column input table containing patient’s age certain date, specified indexDate. Function allows set month /day birth patients missings can imposed subjects. , function can classify patient’s different age groups based argument ageGroup. Suppose want calculate age condition start date records condition_ocurrence table. Also, wan group patients 20-year age band 60 years old . addSex(): appends column input table indicating sex patient “Female” “Male”. First, can add sex patients table. information can used count occurrences condition_concept_id = 5 males aged 60 years older. can also stratify number events age, grouping patients 20-year age bands.","code":"cdm$condition_occurrence %>%   glimpse() ## Rows: ?? ## Columns: 5 ## Database: DuckDB 0.7.1 [unknown@Linux 5.15.0-1035-azure:R 4.2.3/:memory:] ## $ condition_occurrence_id <int> 314, 970, 349, 234, 193, 919, 113, 277, 491, 9… ## $ person_id               <int> 314, 970, 349, 234, 193, 919, 113, 277, 491, 9… ## $ condition_concept_id    <int> 4, 5, 1, 2, 3, 4, 3, 2, 1, 2, 1, 5, 3, 4, 4, 1… ## $ condition_start_date    <date> 2005-08-25, 2007-02-15, 2009-02-15, 2008-05-0… ## $ condition_end_date      <date> 2006-06-14, 2007-06-05, 2011-06-24, 2009-01-0… cdm$condition_occurrence_mod <- cdm$condition_occurrence %>%   addAge(     cdm = cdm,     ageDefaultMonth = 1,     ageDefaultDay = 6,     indexDate = \"condition_start_date\",     ageGroup = list(\"ageBand_20\" =                        list(\"0 to 19\"  = c(0, 19),                             \"20 to 39\" = c(20, 39),                             \"40 to 59\" = c(40, 59),                             \"60 to 79\" = c(60, 79),                             \"80 to 99\" = c(80, 99),                            \">= 100\"   = c(100, 150)                       ),                     \"ageThreshold_60\" =                        list(\"less60\" = c(0,59),                            \"more60\" = c(60,150)                       )     )   )  cdm$condition_occurrence_mod %>%   glimpse() ## Rows: ?? ## Columns: 8 ## Database: DuckDB 0.7.1 [unknown@Linux 5.15.0-1035-azure:R 4.2.3/:memory:] ## $ condition_occurrence_id <int> 314, 234, 277, 26, 276, 656, 275, 249, 150, 9,… ## $ person_id               <int> 314, 234, 277, 26, 276, 656, 275, 249, 150, 9,… ## $ condition_concept_id    <int> 4, 2, 2, 1, 5, 3, 4, 2, 4, 5, 2, 2, 2, 3, 1, 1… ## $ condition_start_date    <date> 2005-08-25, 2008-05-03, 2007-04-26, 2009-01-0… ## $ condition_end_date      <date> 2006-06-14, 2009-01-05, 2007-05-07, 2010-02-0… ## $ age                     <dbl> 58, 58, 23, 9, 77, 90, 71, 49, 55, 17, 40, 26,… ## $ ageBand_20              <chr> \"40 to 59\", \"40 to 59\", \"20 to 39\", \"0 to 19\",… ## $ ageThreshold_60         <chr> \"less60\", \"less60\", \"less60\", \"less60\", \"more6… cdm$condition_occurrence_mod <- cdm$condition_occurrence_mod %>%   addSex(     cdm = cdm   )  cdm$condition_occurrence_mod %>%    glimpse() ## Rows: ?? ## Columns: 9 ## Database: DuckDB 0.7.1 [unknown@Linux 5.15.0-1035-azure:R 4.2.3/:memory:] ## $ condition_occurrence_id <int> 314, 234, 277, 26, 276, 656, 275, 249, 150, 9,… ## $ person_id               <int> 314, 234, 277, 26, 276, 656, 275, 249, 150, 9,… ## $ condition_concept_id    <int> 4, 2, 2, 1, 5, 3, 4, 2, 4, 5, 2, 2, 2, 3, 1, 1… ## $ condition_start_date    <date> 2005-08-25, 2008-05-03, 2007-04-26, 2009-01-0… ## $ condition_end_date      <date> 2006-06-14, 2009-01-05, 2007-05-07, 2010-02-0… ## $ age                     <dbl> 58, 58, 23, 9, 77, 90, 71, 49, 55, 17, 40, 26,… ## $ ageBand_20              <chr> \"40 to 59\", \"40 to 59\", \"20 to 39\", \"0 to 19\",… ## $ ageThreshold_60         <chr> \"less60\", \"less60\", \"less60\", \"less60\", \"more6… ## $ sex                     <chr> \"Male\", \"Male\", \"Male\", \"Female\", \"Male\", \"Mal… num_conditions <- cdm$condition_occurrence_mod %>%   filter(     sex == \"Male\"   ) %>%   filter(     ageThreshold_60 == \"more60\"   ) %>%   filter(     condition_concept_id  == 5   ) %>%   group_by(     ageBand_20   ) %>%   summarise(     n = count(condition_occurrence_id)   )  num_conditions ## # Source:   SQL [2 x 2] ## # Database: DuckDB 0.7.1 [unknown@Linux 5.15.0-1035-azure:R 4.2.3/:memory:] ##   ageBand_20     n ##   <chr>      <dbl> ## 1 60 to 79      28 ## 2 80 to 99      17"},{"path":"https://oxford-pharmacoepi.github.io/PatientProfiles/articles/addPatientCharacteristics.html","id":"example-get-characteristics-in-cohort-tables","dir":"Articles","previous_headings":"","what":"Example: get characteristics in cohort tables","title":"Get patients' characteristics","text":"PatientProfiles functions can used OMOP CDM tables cohort tables. example see package functionalities applied cohort table: addInObservation(): adds new binary column input table, indicating whether subjects observed specific time. addPriorHistory(): appends column input table containing number days patient observation specified date. addFutureObservation(): adds column days future observation individual certain date can use first function obtain patients observation “cohort_start_date” subsequently get prior future observation days. Notice using argument “indexDate”, since already defaulted “cohort_start_date”. database allows multiple observation periods, ’s important note results previous functions based period “indexDate” falls within. patient observation specified date, addPriorHistory() addFutureObservation() functions return NA.","code":"cdm$cohort1 %>%   glimpse() ## Rows: ?? ## Columns: 4 ## Database: DuckDB 0.7.1 [unknown@Linux 5.15.0-1035-azure:R 4.2.3/:memory:] ## $ cohort_definition_id <dbl> 1, 1, 1, 2 ## $ subject_id           <dbl> 1, 1, 2, 3 ## $ cohort_start_date    <date> 2020-01-01, 2020-06-01, 2020-01-02, 2020-01-01 ## $ cohort_end_date      <date> 2020-04-01, 2020-08-01, 2020-02-02, 2020-03-01 cdm$cohort1 <- cdm$cohort1 %>%   addInObservation(     cdm = cdm   ) %>%   filter(     in_observation == 1   ) %>%   addPriorHistory(     cdm = cdm   ) %>%   addFutureObservation(     cdm = cdm   )  cdm$cohort1 %>%   glimpse() ## Rows: ?? ## Columns: 7 ## Database: DuckDB 0.7.1 [unknown@Linux 5.15.0-1035-azure:R 4.2.3/:memory:] ## $ cohort_definition_id <dbl> 2, 1, 1, 1 ## $ subject_id           <dbl> 3, 1, 2, 1 ## $ cohort_start_date    <date> 2020-01-01, 2020-06-01, 2020-01-02, 2020-01-01 ## $ cohort_end_date      <date> 2020-03-01, 2020-08-01, 2020-02-02, 2020-04-01 ## $ in_observation       <dbl> 1, 1, 1, 1 ## $ prior_history        <dbl> 4635, 5350, 4168, 5198 ## $ future_observation   <dbl> 36925, 18232, 17348, 18384"},{"path":"https://oxford-pharmacoepi.github.io/PatientProfiles/articles/addPatientCharacteristics.html","id":"example-get-all-characteristics-at-once","dir":"Articles","previous_headings":"","what":"Example: get all characteristics at once","title":"Get patients' characteristics","text":"addDemographics(): can used add features presented vignette (except addInObservation()) , tables cohort tables. want get age, sex prior history individuals day enter cohort, can use function addDemographics() follows","code":"cdm$cohort2 %>%   glimpse() ## Rows: ?? ## Columns: 4 ## Database: DuckDB 0.7.1 [unknown@Linux 5.15.0-1035-azure:R 4.2.3/:memory:] ## $ cohort_definition_id <dbl> 1, 1, 2, 3, 1 ## $ subject_id           <dbl> 1, 3, 1, 2, 1 ## $ cohort_start_date    <date> 2019-12-30, 2020-01-01, 2020-05-25, 2020-01-01, 2… ## $ cohort_end_date      <date> 2019-12-30, 2020-01-01, 2020-05-25, 2020-01-01, 2… cdm$cohort2 <- cdm$cohort2 %>%   addDemographics(     cdm = cdm,     age = TRUE,     ageName = \"age\",     ageGroup = NULL,     sex = TRUE,     sexName = \"sex\",     priorHistory = TRUE,     priorHistoryName = \"prior_history\",     futureObservation = FALSE,   )  cdm$cohort2 %>%   glimpse() ## Rows: ?? ## Columns: 7 ## Database: DuckDB 0.7.1 [unknown@Linux 5.15.0-1035-azure:R 4.2.3/:memory:] ## $ cohort_definition_id <dbl> 1, 1, 3, 2, 1 ## $ subject_id           <dbl> 3, 1, 2, 1, 1 ## $ cohort_start_date    <date> 2020-01-01, 2020-05-25, 2020-01-01, 2020-05-25, 2… ## $ cohort_end_date      <date> 2020-01-01, 2020-05-25, 2020-01-01, 2020-05-25, 2… ## $ age                  <dbl> 43, 41, 51, 41, 40 ## $ sex                  <chr> \"Female\", \"Male\", \"Male\", \"Male\", \"Male\" ## $ prior_history        <dbl> 4635, 5343, 4167, 5343, 5196"},{"path":"https://oxford-pharmacoepi.github.io/PatientProfiles/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Marti Catala. Author, maintainer. Yuchen Guo. Author. Mike Du. Author. Kim Lopez-Guell. Author. Edward Burn. Author.","code":""},{"path":"https://oxford-pharmacoepi.github.io/PatientProfiles/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Catala M, Guo Y, Du M, Lopez-Guell K, Burn E (2023). PatientProfiles: Identify characteristics patients OMOP Common Data Model. R package version 0.1.0, https://oxford-pharmacoepi.github.io/PatientProfiles/.","code":"@Manual{,   title = {PatientProfiles: Identify characteristics of patients in the OMOP Common Data Model},   author = {Marti Catala and Yuchen Guo and Mike Du and Kim Lopez-Guell and Edward Burn},   year = {2023},   note = {R package version 0.1.0},   url = {https://oxford-pharmacoepi.github.io/PatientProfiles/}, }"},{"path":[]},{"path":"https://oxford-pharmacoepi.github.io/PatientProfiles/index.html","id":"package-overview","dir":"","previous_headings":"","what":"Package overview","title":"Identify characteristics of patients in the OMOP Common Data Model","text":"PatientProfiles contains functions adding characteristics OMOP CDM tables containing patient level data (e.g. condition_occurrence, drug_exposure, ) OMOP CDM cohort tables. characteristics can added include individual´s sex, age (relative date table), days prior history. Time varying characteristics, age, can estimated relative dates corresponding table. additition, PatientProfiles also provides functionality identifying intersections cohort table OMOP CDM tables containing patient level data cohort tables.","code":""},{"path":"https://oxford-pharmacoepi.github.io/PatientProfiles/index.html","id":"package-installation","dir":"","previous_headings":"","what":"Package installation","title":"Identify characteristics of patients in the OMOP Common Data Model","text":"can install latest version PatientProfiles like :","code":"install.packages(\"remotes\") remotes::install_github(\"oxford-pharmacoepi/PatientProfiles\")"},{"path":[]},{"path":"https://oxford-pharmacoepi.github.io/PatientProfiles/index.html","id":"create-a-reference-to-data-in-the-omop-cdm-format","dir":"","previous_headings":"Example usage","what":"Create a reference to data in the OMOP CDM format","title":"Identify characteristics of patients in the OMOP Common Data Model","text":"PatientProfiles package designed work data OMOP CDM format, first step create reference data using CDMConnector package. Creating connection Postgres database example look like: see create reference database please consult CDMConnector package documentation. example though ´ll work simulated data, ’ll generate example cdm reference like :","code":"library(CDMConnector) library(PatientProfiles) library(dplyr) con <- DBI::dbConnect(RPostgres::Postgres(),                       dbname = Sys.getenv(\"CDM5_POSTGRESQL_DBNAME\"),                       host = Sys.getenv(\"CDM5_POSTGRESQL_HOST\"),                       user = Sys.getenv(\"CDM5_POSTGRESQL_USER\"),                       password = Sys.getenv(\"CDM5_POSTGRESQL_PASSWORD\"))  cdm <- CDMConnector::cdm_from_con(con,                      cdm_schema = Sys.getenv(\"CDM5_POSTGRESQL_CDM_SCHEMA\"),                      write_schema = Sys.getenv(\"CDM5_POSTGRESQL_RESULT_SCHEMA\")) cdm <- mockPatientProfiles(patient_size = 1000, drug_exposure_size = 1000)"},{"path":[]},{"path":"https://oxford-pharmacoepi.github.io/PatientProfiles/index.html","id":"adding-chartacteristics-to-patient-level-data","dir":"","previous_headings":"Example usage > Adding individuals´ chartacteristics","what":"Adding chartacteristics to patient-level data","title":"Identify characteristics of patients in the OMOP Common Data Model","text":"Say wanted get individuals´sex age condition start date records condition_occurrence table. can use addAge addSex functions : , example, limit data males aged 18 65","code":"cdm$condition_occurrence %>%    glimpse() #> Rows: ?? #> Columns: 5 #> Database: DuckDB 0.5.0 [unknown@Linux 5.4.0-139-generic:R 4.1.2/:memory:] #> $ condition_occurrence_id <int> 314, 970, 349, 234, 193, 919, 113, 277, 491, 9… #> $ person_id               <int> 314, 970, 349, 234, 193, 919, 113, 277, 491, 9… #> $ condition_concept_id    <int> 4, 5, 1, 2, 3, 4, 3, 2, 1, 2, 1, 5, 3, 4, 4, 1… #> $ condition_start_date    <date> 2005-08-25, 2007-02-15, 2009-02-15, 2008-05-0… #> $ condition_end_date      <date> 2006-06-14, 2007-06-05, 2011-06-24, 2009-01-0…  cdm$condition_occurrence <- cdm$condition_occurrence  %>%    addAge(cdm = cdm, indexDate = \"condition_start_date\")  %>%    addSex(cdm)  cdm$condition_occurrence %>%    glimpse() #> Rows: ?? #> Columns: 7 #> Database: DuckDB 0.5.0 [unknown@Linux 5.4.0-139-generic:R 4.1.2/:memory:] #> $ condition_occurrence_id <int> 314, 970, 349, 234, 193, 919, 113, 277, 491, 9… #> $ subject_id              <int> 314, 970, 349, 234, 193, 919, 113, 277, 491, 9… #> $ condition_concept_id    <int> 4, 5, 1, 2, 3, 4, 3, 2, 1, 2, 1, 5, 3, 4, 1, 3… #> $ condition_start_date    <date> 2005-08-25, 2007-02-15, 2009-02-15, 2008-05-0… #> $ condition_end_date      <date> 2006-06-14, 2007-06-05, 2011-06-24, 2009-01-0… #> $ age                     <dbl> 58, 77, 68, 58, 63, 54, 52, 23, 85, 74, 10, 77… #> $ sex                     <chr> \"Male\", \"Female\", \"Female\", \"Male\", \"Female\", … cdm$condition_occurrence  %>%   filter(age >= 18 & age <= 65) %>%   filter(sex == \"Male\") #> # Source:   SQL [?? x 7] #> # Database: DuckDB 0.5.0 [unknown@Linux 5.4.0-139-generic:R 4.1.2/:memory:] #>    condition_occurrence_id subject_id condit…¹ conditio…² conditio…³   age sex   #>                      <int>      <int>    <int> <date>     <date>     <dbl> <chr> #>  1                     314        314        4 2005-08-25 2006-06-14    58 Male  #>  2                     234        234        2 2008-05-03 2009-01-05    58 Male  #>  3                     277        277        2 2007-04-26 2007-05-07    23 Male  #>  4                     944        944        3 2018-08-11 2019-06-22    50 Male  #>  5                     110        110        3 2014-10-26 2014-12-26    39 Male  #>  6                     249        249        2 2014-12-08 2015-03-08    49 Male  #>  7                     150        150        4 2011-08-31 2012-06-02    55 Male  #>  8                     406        406        3 2009-02-11 2010-11-25    54 Male  #>  9                     438        438        1 2008-09-26 2010-08-25    59 Male  #> 10                     536        536        4 2009-11-11 2010-06-07    21 Male  #> # … with more rows, and abbreviated variable names ¹​condition_concept_id, #> #   ²​condition_start_date, ³​condition_end_date"},{"path":"https://oxford-pharmacoepi.github.io/PatientProfiles/index.html","id":"adding-chartacteristics-of-a-cohort","dir":"","previous_headings":"Example usage > Adding individuals´ chartacteristics","what":"Adding chartacteristics of a cohort","title":"Identify characteristics of patients in the OMOP Common Data Model","text":"tables OMOP CDM, can work similar way cohort tables. example, say cohort table can add age, age groups, sex, days prior history cohort like use information subset cohort. example limiting least 365 days prior history available cohort start date like ","code":"cdm$cohort1 %>%    glimpse() #> Rows: ?? #> Columns: 4 #> Database: DuckDB 0.5.0 [unknown@Linux 5.4.0-139-generic:R 4.1.2/:memory:] #> $ cohort_definition_id <dbl> 1, 1, 1, 2 #> $ subject_id           <dbl> 1, 1, 2, 3 #> $ cohort_start_date    <date> 2020-01-01, 2020-06-01, 2020-01-02, 2020-01-01 #> $ cohort_end_date      <date> 2020-04-01, 2020-08-01, 2020-02-02, 2020-03-01 cdm$cohort1 <- cdm$cohort1 %>%    addAge(cdm = cdm, indexDate = \"cohort_start_date\",          ageGroup =  list(c(0, 18),                             c(19, 65),                            c(66, 100))           ) %>%    addSex(cdm = cdm) %>%    addPriorHistory(cdm = cdm)  cdm$cohort1 %>%    glimpse() #> Rows: ?? #> Columns: 8 #> Database: DuckDB 0.5.0 [unknown@Linux 5.4.0-139-generic:R 4.1.2/:memory:] #> $ cohort_definition_id <dbl> 2, 1, 1, 1 #> $ subject_id           <dbl> 3, 1, 2, 1 #> $ cohort_start_date    <date> 2020-01-01, 2020-06-01, 2020-01-02, 2020-01-01 #> $ cohort_end_date      <date> 2020-03-01, 2020-08-01, 2020-02-02, 2020-04-01 #> $ age                  <dbl> 43, 41, 51, 41 #> $ age_group            <chr> \"19 to 65\", \"19 to 65\", \"19 to 65\", \"19 to 65\" #> $ sex                  <chr> \"Female\", \"Male\", \"Male\", \"Male\" #> $ prior_history        <dbl> 4635, 5350, 4168, 5198 cdm$cohort1  %>%   filter(prior_history >= 365) #> # Source:   SQL [4 x 8] #> # Database: DuckDB 0.5.0 [unknown@Linux 5.4.0-139-generic:R 4.1.2/:memory:] #>   cohort_definition_id subje…¹ cohort_s…² cohort_e…³   age age_g…⁴ sex   prior…⁵ #>                  <dbl>   <dbl> <date>     <date>     <dbl> <chr>   <chr>   <dbl> #> 1                    2       3 2020-01-01 2020-03-01    43 19 to … Fema…    4635 #> 2                    1       1 2020-06-01 2020-08-01    41 19 to … Male     5350 #> 3                    1       2 2020-01-02 2020-02-02    51 19 to … Male     4168 #> 4                    1       1 2020-01-01 2020-04-01    41 19 to … Male     5198 #> # … with abbreviated variable names ¹​subject_id, ²​cohort_start_date, #> #   ³​cohort_end_date, ⁴​age_group, ⁵​prior_history"},{"path":[]},{"path":"https://oxford-pharmacoepi.github.io/PatientProfiles/index.html","id":"intersections-with-patient-level-data","dir":"","previous_headings":"Example usage > Cohort intersections","what":"Intersections with patient-level data","title":"Identify characteristics of patients in the OMOP Common Data Model","text":"can use addIntersect add intersection cohort table OMOP CDM tables. example, want identify anyone drug exposure prior cohort start date like :","code":"cdm$cohort1 %>%    glimpse() #> Rows: ?? #> Columns: 4 #> Database: DuckDB 0.5.0 [unknown@Linux 5.4.0-139-generic:R 4.1.2/:memory:] #> $ cohort_definition_id <dbl> 1, 1, 1, 2 #> $ subject_id           <dbl> 1, 1, 2, 3 #> $ cohort_start_date    <date> 2020-01-01, 2020-06-01, 2020-01-02, 2020-01-01 #> $ cohort_end_date      <date> 2020-04-01, 2020-08-01, 2020-02-02, 2020-03-01  cdm$cohort1  <- cdm$cohort1 %>%    addTableIntersect(cdm = cdm,                     name = \"history_of_drug_exposure\",                     tableName = \"drug_exposure\",                      window = c(NA, -1),                       value = \"binary\")  cdm$cohort1 %>%    glimpse() #> Rows: ?? #> Columns: 5 #> Database: DuckDB 0.5.0 [unknown@Linux 5.4.0-139-generic:R 4.1.2/:memory:] #> $ cohort_definition_id           <dbl> 1, 1, 2, 1 #> $ subject_id                     <dbl> 1, 1, 3, 2 #> $ cohort_start_date              <date> 2020-01-01, 2020-06-01, 2020-01-01, 202… #> $ cohort_end_date                <date> 2020-04-01, 2020-08-01, 2020-03-01, 202… #> $ `binary_drug_exposure_(NA,-1)` <dbl> 1, 1, 1, 0"},{"path":"https://oxford-pharmacoepi.github.io/PatientProfiles/index.html","id":"intersections-with-another-cohort","dir":"","previous_headings":"Example usage > Cohort intersections","what":"Intersections with another cohort","title":"Identify characteristics of patients in the OMOP Common Data Model","text":"can use addIntersect compare two cohort tables. Say two following cohort tables want add variable cohorts cohort table 1 identifying whether individual cohort table cohort2 cohort definition id 1 time prior cohort start date. add like :","code":"cdm$cohort1 %>%    glimpse() #> Rows: ?? #> Columns: 4 #> Database: DuckDB 0.5.0 [unknown@Linux 5.4.0-139-generic:R 4.1.2/:memory:] #> $ cohort_definition_id <dbl> 1, 1, 1, 2 #> $ subject_id           <dbl> 1, 1, 2, 3 #> $ cohort_start_date    <date> 2020-01-01, 2020-06-01, 2020-01-02, 2020-01-01 #> $ cohort_end_date      <date> 2020-04-01, 2020-08-01, 2020-02-02, 2020-03-01 cdm$cohort2 %>%    glimpse() #> Rows: ?? #> Columns: 4 #> Database: DuckDB 0.5.0 [unknown@Linux 5.4.0-139-generic:R 4.1.2/:memory:] #> $ cohort_definition_id <dbl> 1, 1, 2, 3, 1 #> $ subject_id           <dbl> 1, 3, 1, 2, 1 #> $ cohort_start_date    <date> 2019-12-30, 2020-01-01, 2020-05-25, 2020-01-01, 2… #> $ cohort_end_date      <date> 2019-12-30, 2020-01-01, 2020-05-25, 2020-01-01, 2… cdm$cohort1 <- cdm$cohort1 %>%    addIntersect(cdm = cdm,                        name = \"history_of_cohort_2_id_1\",                      cohortTableName = \"cohort2\",                       cohortId = 1,                      window = c(NA, -1),                        value = \"binary\")  cdm$cohort2 %>%    glimpse() #> Rows: ?? #> Columns: 4 #> Database: DuckDB 0.5.0 [unknown@Linux 5.4.0-139-generic:R 4.1.2/:memory:] #> $ cohort_definition_id <dbl> 1, 1, 2, 3, 1 #> $ subject_id           <dbl> 1, 3, 1, 2, 1 #> $ cohort_start_date    <date> 2019-12-30, 2020-01-01, 2020-05-25, 2020-01-01, 2… #> $ cohort_end_date      <date> 2019-12-30, 2020-01-01, 2020-05-25, 2020-01-01, 2…"},{"path":"https://oxford-pharmacoepi.github.io/PatientProfiles/reference/PatientProfiles-package.html","id":null,"dir":"Reference","previous_headings":"","what":"PatientProfiles: Identify characteristics of patients in the OMOP Common Data Model — PatientProfiles-package","title":"PatientProfiles: Identify characteristics of patients in the OMOP Common Data Model — PatientProfiles-package","text":"Identify characteristics patients data mapped Observational Medical Outcomes Partnership (OMOP) common data model.","code":""},{"path":[]},{"path":"https://oxford-pharmacoepi.github.io/PatientProfiles/reference/PatientProfiles-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"PatientProfiles: Identify characteristics of patients in the OMOP Common Data Model — PatientProfiles-package","text":"Maintainer: Marti Catala marti.catalasabate@ndorms.ox.ac.uk Authors: Yuchen Guo yuchen.guo@ndorms.ox.ac.uk Mike Du mike.du@ndorms.ox.ac.uk Kim Lopez-Guell kim.lopez@spc.ox.ac.uk Edward Burn edward.burn@ndorms.ox.ac.uk","code":""},{"path":"https://oxford-pharmacoepi.github.io/PatientProfiles/reference/addAge.html","id":null,"dir":"Reference","previous_headings":"","what":"Add a column to the current tibble with the age of the subject_id at a\ncertain date — addAge","title":"Add a column to the current tibble with the age of the subject_id at a\ncertain date — addAge","text":"Add column current tibble age subject_id certain date","code":""},{"path":"https://oxford-pharmacoepi.github.io/PatientProfiles/reference/addAge.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add a column to the current tibble with the age of the subject_id at a\ncertain date — addAge","text":"","code":"addAge(   x,   cdm,   indexDate = \"cohort_start_date\",   ageName = \"age\",   ageGroup = NULL,   ageDefaultMonth = 1,   ageDefaultDay = 1,   ageImposeMonth = TRUE,   ageImposeDay = TRUE,   tablePrefix = NULL )"},{"path":"https://oxford-pharmacoepi.github.io/PatientProfiles/reference/addAge.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add a column to the current tibble with the age of the subject_id at a\ncertain date — addAge","text":"x Tibble individuals want add age. Need cdm. cdm Object contains cdm reference. Use CDMConnector obtain cdm reference. indexDate Variable points date compute age. ageName Name new column contains age. ageGroup List age groups added. ageDefaultMonth Month year assigned individuals missing month birth. default: 1. ageDefaultDay day month assigned individuals missing day birth. default: 1. ageImposeMonth Whether month date birth considered missing individuals. ageImposeDay Whether day date birth considered missing individuals. tablePrefix stem permanent tables created. NULL, temporary tables used throughout.","code":""},{"path":"https://oxford-pharmacoepi.github.io/PatientProfiles/reference/addAge.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add a column to the current tibble with the age of the subject_id at a\ncertain date — addAge","text":"tibble age column added","code":""},{"path":"https://oxford-pharmacoepi.github.io/PatientProfiles/reference/addAge.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add a column to the current tibble with the age of the subject_id at a\ncertain date — addAge","text":"","code":"# \\donttest{ library(DBI) library(duckdb) library(tibble) library(PatientProfiles) cohort1 <- tibble::tibble(   cohort_definition_id = c(\"1\", \"1\", \"1\"),   subject_id = c(\"1\", \"2\", \"3\"),   cohort_start_date = c(     as.Date(\"2010-01-01\"), as.Date(\"2010-01-01\"), as.Date(\"2010-01-01\")   ),   cohort_end_date = c(     as.Date(\"2015-01-01\"), as.Date(\"2013-01-01\"), as.Date(\"2018-01-01\")   ) )  person <- tibble::tibble(   person_id = c(\"1\", \"2\", \"3\"),   gender_concept_id = c(\"8507\", \"8532\", \"8507\"),   year_of_birth = c(2000, 1995, NA),   month_of_birth = c(NA, 07, 08),   day_of_birth = c(01, 25, 03) ) cdm <- mockPatientProfiles(person = person, cohort1 = cohort1) addAge(x = cdm[[\"cohort1\"]], cdm = cdm) #> # Source:   table<dbplyr_001> [3 x 5] #> # Database: DuckDB 0.7.1 [unknown@Linux 5.15.0-1035-azure:R 4.2.3/:memory:] #>   cohort_definition_id subject_id cohort_start_date cohort_end_date   age #>   <chr>                <chr>      <date>            <date>          <dbl> #> 1 1                    1          2010-01-01        2015-01-01         10 #> 2 1                    2          2010-01-01        2013-01-01         15 #> 3 1                    3          2010-01-01        2018-01-01         NA # }"},{"path":"https://oxford-pharmacoepi.github.io/PatientProfiles/reference/addCategories.html","id":null,"dir":"Reference","previous_headings":"","what":"It creates categories from a numeric variable. — addCategories","title":"It creates categories from a numeric variable. — addCategories","text":"creates categories numeric variable.","code":""},{"path":"https://oxford-pharmacoepi.github.io/PatientProfiles/reference/addCategories.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"It creates categories from a numeric variable. — addCategories","text":"","code":"addCategories(x, cdm, variable, categories, tablePrefix = NULL)"},{"path":"https://oxford-pharmacoepi.github.io/PatientProfiles/reference/addCategories.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"It creates categories from a numeric variable. — addCategories","text":"x Table database. cdm cdm reference variable Target variable want categorize. categories List lists named categories lower upper limit. tablePrefix stem permanent tables created. NULL, temporary tables used throughout.","code":""},{"path":"https://oxford-pharmacoepi.github.io/PatientProfiles/reference/addCategories.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"It creates categories from a numeric variable. — addCategories","text":"tibble categorical variable added.","code":""},{"path":"https://oxford-pharmacoepi.github.io/PatientProfiles/reference/addCategories.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"It creates categories from a numeric variable. — addCategories","text":"","code":"#' # \\donttest{ library(DBI) library(duckdb) library(tibble) library(PatientProfiles) cohort1 <- tibble::tibble(   cohort_definition_id = c(\"1\", \"1\", \"1\"),   subject_id = c(\"1\", \"2\", \"3\"),   cohort_start_date = c(     as.Date(\"2010-03-03\"), as.Date(\"2010-03-01\"), as.Date(\"2010-02-01\")   ),   cohort_end_date = c(     as.Date(\"2015-01-01\"), as.Date(\"2013-01-01\"), as.Date(\"2013-01-01\")   ) )  person <- tibble::tibble(   person_id = c(\"1\", \"2\", \"3\"),   gender_concept_id = c(\"8507\", \"8507\", \"8507\"),   year_of_birth = c(1980, 1970, 2000),   month_of_birth = c(03, 07, NA),   day_of_birth = c(NA, 02, 01) )  cdm <- mockPatientProfiles(person = person, cohort1 = cohort1)  result <- cdm$cohort1 %>%   addAge(cdm) %>%   addCategories(     variable = \"age\",     categories = list(\"age_group\" = list(       \"0 to 39\" = c(0, 39), \"40 to 79\" = c(40, 79), \"80 to 150\" = c(80, 150)     ))   ) # }"},{"path":"https://oxford-pharmacoepi.github.io/PatientProfiles/reference/addCohortIntersect.html","id":null,"dir":"Reference","previous_headings":"","what":"It creates columns to indicate the presence of cohorts — addCohortIntersect","title":"It creates columns to indicate the presence of cohorts — addCohortIntersect","text":"creates columns indicate presence cohorts","code":""},{"path":"https://oxford-pharmacoepi.github.io/PatientProfiles/reference/addCohortIntersect.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"It creates columns to indicate the presence of cohorts — addCohortIntersect","text":"","code":"addCohortIntersect(   x,   cdm,   targetCohortTable,   targetCohortId = NULL,   indexDate = \"cohort_start_date\",   targetStartDate = \"cohort_start_date\",   targetEndDate = \"cohort_end_date\",   window = list(c(0, Inf)),   order = \"first\",   flag = TRUE,   count = TRUE,   date = TRUE,   time = TRUE,   nameStyle = \"{value}_{cohort_name}_{window_name}\",   tablePrefix = NULL )"},{"path":"https://oxford-pharmacoepi.github.io/PatientProfiles/reference/addCohortIntersect.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"It creates columns to indicate the presence of cohorts — addCohortIntersect","text":"x table containing individual overlap indicator attached extra columns cdm cdm containing tables targetCohortTable name cohort want check overlap targetCohortId vector cohort definition ids include indexDate date reference table x targetStartDate date reference cohort table, either start (overlap) (incidence) targetEndDate date reference cohort table, either end (overlap) NULL (incidence) window window consider events order record considered case multiple records flag TRUE FALSE. TRUE, flag calculated intersection count TRUE FALSE. TRUE, number counts calculated intersection date TRUE FALSE. TRUE, date calculated intersection time TRUE FALSE. TRUE, time differebce calculated intersection nameStyle naming added column columns, include required parameters tablePrefix stem permanent tables created. NULL, temporary tables used throughout.","code":""},{"path":"https://oxford-pharmacoepi.github.io/PatientProfiles/reference/addCohortIntersect.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"It creates columns to indicate the presence of cohorts — addCohortIntersect","text":"table added columns overlap information","code":""},{"path":"https://oxford-pharmacoepi.github.io/PatientProfiles/reference/addCohortIntersect.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"It creates columns to indicate the presence of cohorts — addCohortIntersect","text":"","code":"# \\donttest{ cohort1 <- dplyr::tibble(   cohort_definition_id = c(1, 1, 1, 1, 1),   subject_id = c(1, 1, 1, 2, 2),   cohort_start_date = as.Date(     c(       \"2020-01-01\",       \"2020-01-15\",       \"2020-01-20\",       \"2020-01-01\",       \"2020-02-01\"     )   ),   cohort_end_date = as.Date(     c(       \"2020-01-01\",       \"2020-01-15\",       \"2020-01-20\",       \"2020-01-01\",       \"2020-02-01\"     )   ) )  cohort2 <- dplyr::tibble(   cohort_definition_id = c(1, 1, 1, 1, 1, 1, 1),   subject_id = c(1, 1, 1, 2, 2, 2, 1),   cohort_start_date = as.Date(     c(       \"2020-01-15\",       \"2020-01-25\",       \"2020-01-26\",       \"2020-01-29\",       \"2020-03-15\",       \"2020-01-24\",       \"2020-02-16\"     )   ),   cohort_end_date = as.Date(     c(       \"2020-01-15\",       \"2020-01-25\",       \"2020-01-26\",       \"2020-01-29\",       \"2020-03-15\",       \"2020-01-24\",       \"2020-02-16\"     )   ), )  cdm <- mockPatientProfiles(cohort1 = cohort1, cohort2 = cohort2)  result <- cdm$cohort1 %>%   addCohortIntersect(     cdm = cdm,     targetCohortTable = \"cohort2\"   ) %>%   dplyr::collect() # }"},{"path":"https://oxford-pharmacoepi.github.io/PatientProfiles/reference/addDemographics.html","id":null,"dir":"Reference","previous_headings":"","what":"It adds all demographics columns to the given cohort table: Age, Sex,\nPriorHistory, and ageGroup if desired — addDemographics","title":"It adds all demographics columns to the given cohort table: Age, Sex,\nPriorHistory, and ageGroup if desired — addDemographics","text":"adds demographics columns given cohort table: Age, Sex, PriorHistory, ageGroup desired","code":""},{"path":"https://oxford-pharmacoepi.github.io/PatientProfiles/reference/addDemographics.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"It adds all demographics columns to the given cohort table: Age, Sex,\nPriorHistory, and ageGroup if desired — addDemographics","text":"","code":"addDemographics(   x,   cdm,   indexDate = \"cohort_start_date\",   age = TRUE,   ageName = \"age\",   ageDefaultMonth = 1,   ageDefaultDay = 1,   ageImposeMonth = TRUE,   ageImposeDay = TRUE,   ageGroup = NULL,   sex = TRUE,   sexName = \"sex\",   priorHistory = TRUE,   priorHistoryName = \"prior_history\",   futureObservation = TRUE,   futureObservationName = \"future_observation\",   tablePrefix = NULL )"},{"path":"https://oxford-pharmacoepi.github.io/PatientProfiles/reference/addDemographics.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"It adds all demographics columns to the given cohort table: Age, Sex,\nPriorHistory, and ageGroup if desired — addDemographics","text":"x cohort table add follow individuals cdm cdm person observation_period tables get info individuals cohort indexDate name column date consider demographic information age TRUE FALSE. TRUE, age calculated relative indexDate ageName Age variable name ageDefaultMonth Month year assigned individuals missing month birth. ageDefaultDay day month assigned individuals missing day birth. ageImposeMonth TRUE FALSE. Whether month date birth considered missing individuals. ageImposeDay TRUE FALSE. Whether day date birth considered missing individuals. ageGroup NULL, list ageGroup vectors sex TRUE FALSE. TRUE, sex identified sexName Sex variable name priorHistory TRUE FALSE. TRUE, days start current observation period indexDate calculated priorHistoryName Prior history variable name futureObservation TRUE FALSE. TRUE, days indexDate end current observation period calculated futureObservationName Future observation variable name tablePrefix stem permanent tables created. NULL, temporary tables used throughout.","code":""},{"path":"https://oxford-pharmacoepi.github.io/PatientProfiles/reference/addDemographics.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"It adds all demographics columns to the given cohort table: Age, Sex,\nPriorHistory, and ageGroup if desired — addDemographics","text":"cohort table added demographic information columns","code":""},{"path":"https://oxford-pharmacoepi.github.io/PatientProfiles/reference/addDemographics.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"It adds all demographics columns to the given cohort table: Age, Sex,\nPriorHistory, and ageGroup if desired — addDemographics","text":"","code":"# \\donttest{ library(PatientProfiles) cdm <- mockPatientProfiles() cdm$cohort1 %>% addDemographics(cdm) #> # Source:   table<dbplyr_012> [4 x 8] #> # Database: DuckDB 0.7.1 [unknown@Linux 5.15.0-1035-azure:R 4.2.3/:memory:] #>   cohort_definition_id subject_id cohort_start_date cohort_end_date   age sex   #>                  <dbl>      <dbl> <date>            <date>          <dbl> <chr> #> 1                    1          1 2020-01-01        2020-04-01         26 Male  #> 2                    1          1 2020-06-01        2020-08-01         26 Male  #> 3                    1          2 2020-01-02        2020-02-02         NA NA    #> 4                    2          3 2020-01-01        2020-03-01         NA NA    #> # ℹ 2 more variables: prior_history <dbl>, future_observation <dbl> # }"},{"path":"https://oxford-pharmacoepi.github.io/PatientProfiles/reference/addFutureObservation.html","id":null,"dir":"Reference","previous_headings":"","what":"Add a column with the days of future observation for an individual — addFutureObservation","title":"Add a column with the days of future observation for an individual — addFutureObservation","text":"Add column days future observation individual","code":""},{"path":"https://oxford-pharmacoepi.github.io/PatientProfiles/reference/addFutureObservation.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add a column with the days of future observation for an individual — addFutureObservation","text":"","code":"addFutureObservation(   x,   cdm,   indexDate = \"cohort_start_date\",   futureObservationName = \"future_observation\",   tablePrefix = NULL )"},{"path":"https://oxford-pharmacoepi.github.io/PatientProfiles/reference/addFutureObservation.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add a column with the days of future observation for an individual — addFutureObservation","text":"x cohort table add prior history cdm object containing person table indexDate name date field use date table x futureObservationName name new column added tablePrefix stem permanent tables created. NULL, temporary tables used throughout.","code":""},{"path":"https://oxford-pharmacoepi.github.io/PatientProfiles/reference/addFutureObservation.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add a column with the days of future observation for an individual — addFutureObservation","text":"cohort table added column containing future observation individuals","code":""},{"path":"https://oxford-pharmacoepi.github.io/PatientProfiles/reference/addFutureObservation.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add a column with the days of future observation for an individual — addFutureObservation","text":"","code":"# \\donttest{ library(DBI) library(duckdb) library(tibble) library(PatientProfiles) cohort1 <- tibble::tibble(   cohort_definition_id = c(\"1\", \"1\", \"1\"),   subject_id = c(\"1\", \"2\", \"3\"),   cohort_start_date = c(     as.Date(\"2010-03-03\"),     as.Date(\"2010-03-01\"),     as.Date(\"2010-02-01\")   ),   cohort_end_date = c(     as.Date(\"2015-01-01\"),     as.Date(\"2013-01-01\"),     as.Date(\"2013-01-01\")   ) )  obs_1 <- tibble::tibble(   observation_period_id = c(\"1\", \"2\", \"3\"),   person_id = c(\"1\", \"2\", \"3\"),   observation_period_start_date = c(     as.Date(\"2010-02-03\"),     as.Date(\"2010-02-01\"),     as.Date(\"2010-01-01\")   ),   observation_period_end_date = c(     as.Date(\"2014-01-01\"),     as.Date(\"2012-01-01\"),     as.Date(\"2012-01-01\")   ) )  cdm <-   mockPatientProfiles(     seed = 1,     cohort1 = cohort1,     observation_period = obs_1   )  result <- cdm$cohort1 %>% addFutureObservation(cdm) # }"},{"path":"https://oxford-pharmacoepi.github.io/PatientProfiles/reference/addInObservation.html","id":null,"dir":"Reference","previous_headings":"","what":"It adds a column to a cohort table indicating whether its individuals are\nin observation at the desired time — addInObservation","title":"It adds a column to a cohort table indicating whether its individuals are\nin observation at the desired time — addInObservation","text":"adds column cohort table indicating whether individuals observation desired time","code":""},{"path":"https://oxford-pharmacoepi.github.io/PatientProfiles/reference/addInObservation.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"It adds a column to a cohort table indicating whether its individuals are\nin observation at the desired time — addInObservation","text":"","code":"addInObservation(   x,   cdm,   indexDate = \"cohort_start_date\",   name = \"in_observation\",   tablePrefix = NULL )"},{"path":"https://oxford-pharmacoepi.github.io/PatientProfiles/reference/addInObservation.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"It adds a column to a cohort table indicating whether its individuals are\nin observation at the desired time — addInObservation","text":"x cohort table inObservation command wants tested cdm observation_period table stored indexDate name column dates test inObservation command name name column hold result enquiry: 1 individual observation, 0 tablePrefix stem permanent tables created. NULL, temporary tables used throughout.","code":""},{"path":"https://oxford-pharmacoepi.github.io/PatientProfiles/reference/addInObservation.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"It adds a column to a cohort table indicating whether its individuals are\nin observation at the desired time — addInObservation","text":"cohort table added binary column assessing inObservation","code":""},{"path":"https://oxford-pharmacoepi.github.io/PatientProfiles/reference/addInObservation.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"It adds a column to a cohort table indicating whether its individuals are\nin observation at the desired time — addInObservation","text":"","code":"# \\donttest{ library(PatientProfiles) cdm <- mockPatientProfiles() cdm$cohort1 %>% addInObservation(cdm) #> # Source:   table<dbplyr_015> [4 x 5] #> # Database: DuckDB 0.7.1 [unknown@Linux 5.15.0-1035-azure:R 4.2.3/:memory:] #>   cohort_definition_id subject_id cohort_start_date cohort_end_date #>                  <dbl>      <dbl> <date>            <date>          #> 1                    1          1 2020-01-01        2020-04-01      #> 2                    1          1 2020-06-01        2020-08-01      #> 3                    1          2 2020-01-02        2020-02-02      #> 4                    2          3 2020-01-01        2020-03-01      #> # ℹ 1 more variable: in_observation <dbl> # }"},{"path":"https://oxford-pharmacoepi.github.io/PatientProfiles/reference/addIntersect.html","id":null,"dir":"Reference","previous_headings":"","what":"It creates columns to indicate overlaps information — addIntersect","title":"It creates columns to indicate overlaps information — addIntersect","text":"creates columns indicate overlaps information","code":""},{"path":"https://oxford-pharmacoepi.github.io/PatientProfiles/reference/addIntersect.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"It creates columns to indicate overlaps information — addIntersect","text":"","code":"addIntersect(   x,   cdm,   tableName,   value,   filterVariable = NULL,   filterId = NULL,   idName = NULL,   window = list(c(0, Inf)),   indexDate = \"cohort_start_date\",   targetStartDate = \"cohort_start_date\",   targetEndDate = \"cohort_end_date\",   order = \"first\",   nameStyle = \"{value}_{id_name}_{window_name}\",   tablePrefix = NULL )"},{"path":"https://oxford-pharmacoepi.github.io/PatientProfiles/reference/addIntersect.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"It creates columns to indicate overlaps information — addIntersect","text":"x table containing individual overlap indicator attached extra columns cdm cdm containing tables tableName name cohort want check overlap value value interest add: can count, flag, date time filterVariable variable going use filter (e.g. cohort_definition_id) filterId value filterVariable interested , can vector idName name filterId, must length filterId window window consider events indexDate date reference table x targetStartDate date reference cohort table, either start (overlap) (incidence) targetEndDate date reference cohort table, either end (overlap) NULL (incidence) order last first date use date/time calculations nameStyle naming added column columns, include required parameters tablePrefix stem permanent tables created. NULL, temporary tables used throughout.","code":""},{"path":"https://oxford-pharmacoepi.github.io/PatientProfiles/reference/addIntersect.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"It creates columns to indicate overlaps information — addIntersect","text":"table added columns overlap information","code":""},{"path":"https://oxford-pharmacoepi.github.io/PatientProfiles/reference/addIntersect.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"It creates columns to indicate overlaps information — addIntersect","text":"","code":"# \\donttest{ cohort1 <- dplyr::tibble(   cohort_definition_id = c(1, 1, 1, 1, 1),   subject_id = c(1, 1, 1, 2, 2),   cohort_start_date = as.Date(     c(       \"2020-01-01\",       \"2020-01-15\",       \"2020-01-20\",       \"2020-01-01\",       \"2020-02-01\"     )   ),   cohort_end_date = as.Date(     c(       \"2020-01-01\",       \"2020-01-15\",       \"2020-01-20\",       \"2020-01-01\",       \"2020-02-01\"     )   ) )  cohort2 <- dplyr::tibble(   cohort_definition_id = c(1, 1, 1, 1, 1, 1, 1),   subject_id = c(1, 1, 1, 2, 2, 2, 1),   cohort_start_date = as.Date(     c(       \"2020-01-15\",       \"2020-01-25\",       \"2020-01-26\",       \"2020-01-29\",       \"2020-03-15\",       \"2020-01-24\",       \"2020-02-16\"     )   ),   cohort_end_date = as.Date(     c(       \"2020-01-15\",       \"2020-01-25\",       \"2020-01-26\",       \"2020-01-29\",       \"2020-03-15\",       \"2020-01-24\",       \"2020-02-16\"     )   ), )  cdm <- mockPatientProfiles(cohort1 = cohort1, cohort2 = cohort2)  result <- cdm$cohort1 %>%   addIntersect(     cdm = cdm,     tableName = \"cohort2\", value = \"date\"   ) %>%   dplyr::collect() # }"},{"path":"https://oxford-pharmacoepi.github.io/PatientProfiles/reference/addPriorHistory.html","id":null,"dir":"Reference","previous_headings":"","what":"Add a column to the current tibble with the prior history of the subject_id at a\ncertain date — addPriorHistory","title":"Add a column to the current tibble with the prior history of the subject_id at a\ncertain date — addPriorHistory","text":"Add column current tibble prior history subject_id certain date","code":""},{"path":"https://oxford-pharmacoepi.github.io/PatientProfiles/reference/addPriorHistory.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add a column to the current tibble with the prior history of the subject_id at a\ncertain date — addPriorHistory","text":"","code":"addPriorHistory(   x,   cdm,   indexDate = \"cohort_start_date\",   priorHistoryName = \"prior_history\",   tablePrefix = NULL )"},{"path":"https://oxford-pharmacoepi.github.io/PatientProfiles/reference/addPriorHistory.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add a column to the current tibble with the prior history of the subject_id at a\ncertain date — addPriorHistory","text":"x cohort table add prior history cdm object containing person table indexDate name date field use date table x priorHistoryName name new column added tablePrefix stem permanent tables created. NULL, temporary tables used throughout.","code":""},{"path":"https://oxford-pharmacoepi.github.io/PatientProfiles/reference/addPriorHistory.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add a column to the current tibble with the prior history of the subject_id at a\ncertain date — addPriorHistory","text":"cohort table added column containing prior history individuals","code":""},{"path":"https://oxford-pharmacoepi.github.io/PatientProfiles/reference/addPriorHistory.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add a column to the current tibble with the prior history of the subject_id at a\ncertain date — addPriorHistory","text":"","code":"# \\donttest{ library(DBI) library(duckdb) library(tibble) library(PatientProfiles) cohort1 <- tibble::tibble(   cohort_definition_id = c(\"1\", \"1\", \"1\"),   subject_id = c(\"1\", \"2\", \"3\"),   cohort_start_date = c(     as.Date(\"2010-03-03\"),     as.Date(\"2010-03-01\"),     as.Date(\"2010-02-01\")   ),   cohort_end_date = c(     as.Date(\"2015-01-01\"),     as.Date(\"2013-01-01\"),     as.Date(\"2013-01-01\")   ) )  obs_1 <- tibble::tibble(   observation_period_id = c(\"1\", \"2\", \"3\"),   person_id = c(\"1\", \"2\", \"3\"),   observation_period_start_date = c(     as.Date(\"2010-02-03\"),     as.Date(\"2010-02-01\"),     as.Date(\"2010-01-01\")   ),   observation_period_end_date = c(     as.Date(\"2014-01-01\"),     as.Date(\"2012-01-01\"),     as.Date(\"2012-01-01\")   ) )  cdm <-   mockPatientProfiles(     seed = 1,     cohort1 = cohort1,     observation_period = obs_1   )  result <- cdm$cohort1 %>% addPriorHistory(cdm) # }"},{"path":"https://oxford-pharmacoepi.github.io/PatientProfiles/reference/addSex.html","id":null,"dir":"Reference","previous_headings":"","what":"Adds a column with sex information to the individuals of a table — addSex","title":"Adds a column with sex information to the individuals of a table — addSex","text":"Adds column sex information individuals table","code":""},{"path":"https://oxford-pharmacoepi.github.io/PatientProfiles/reference/addSex.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Adds a column with sex information to the individuals of a table — addSex","text":"","code":"addSex(x, cdm, sexName = \"sex\", tablePrefix = NULL)"},{"path":"https://oxford-pharmacoepi.github.io/PatientProfiles/reference/addSex.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Adds a column with sex information to the individuals of a table — addSex","text":"x cohort table add Sex cdm object containing person table sex information gender_concept_id column sexName name new column added tablePrefix stem permanent tables created. NULL, temporary tables used throughout.","code":""},{"path":"https://oxford-pharmacoepi.github.io/PatientProfiles/reference/addSex.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Adds a column with sex information to the individuals of a table — addSex","text":"table x added column sex information","code":""},{"path":"https://oxford-pharmacoepi.github.io/PatientProfiles/reference/addSex.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Adds a column with sex information to the individuals of a table — addSex","text":"","code":"# \\donttest{ library(PatientProfiles) cdm <- mockPatientProfiles() cdm$cohort1 %>% addSex(cdm) #> # Source:   table<dbplyr_022> [4 x 5] #> # Database: DuckDB 0.7.1 [unknown@Linux 5.15.0-1035-azure:R 4.2.3/:memory:] #>   cohort_definition_id subject_id cohort_start_date cohort_end_date sex   #>                  <dbl>      <dbl> <date>            <date>          <chr> #> 1                    1          1 2020-01-01        2020-04-01      Male  #> 2                    1          1 2020-06-01        2020-08-01      Male  #> 3                    1          2 2020-01-02        2020-02-02      NA    #> 4                    2          3 2020-01-01        2020-03-01      NA    # }"},{"path":"https://oxford-pharmacoepi.github.io/PatientProfiles/reference/countCohortOccurrences.html","id":null,"dir":"Reference","previous_headings":"","what":"It creates columns to indicate number of occurrences of intersection of two\ncohorts — countCohortOccurrences","title":"It creates columns to indicate number of occurrences of intersection of two\ncohorts — countCohortOccurrences","text":"creates columns indicate number occurrences intersection two cohorts","code":""},{"path":"https://oxford-pharmacoepi.github.io/PatientProfiles/reference/countCohortOccurrences.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"It creates columns to indicate number of occurrences of intersection of two\ncohorts — countCohortOccurrences","text":"","code":"countCohortOccurrences(   x,   cdm,   targetCohortTable,   targetCohortId = NULL,   indexDate = \"cohort_start_date\",   targetStartDate = \"cohort_start_date\",   targetEndDate = \"cohort_end_date\",   window = list(c(0, Inf)),   nameStyle = \"{cohort_name}_{window_name}\",   tablePrefix = NULL )"},{"path":"https://oxford-pharmacoepi.github.io/PatientProfiles/reference/countCohortOccurrences.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"It creates columns to indicate number of occurrences of intersection of two\ncohorts — countCohortOccurrences","text":"x table containing individual overlap indicator attached extra columns cdm cdm containing tables targetCohortTable name cohort want check overlap targetCohortId vector cohort definition ids include indexDate date reference table x targetStartDate date reference cohort table, either start (overlap) (incidence) targetEndDate date reference cohort table, either end (overlap) NULL (incidence) window window consider events nameStyle naming added column columns, include required parameters tablePrefix stem permanent tables created. NULL, temporary tables used throughout.","code":""},{"path":"https://oxford-pharmacoepi.github.io/PatientProfiles/reference/countCohortOccurrences.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"It creates columns to indicate number of occurrences of intersection of two\ncohorts — countCohortOccurrences","text":"table added columns overlap information","code":""},{"path":"https://oxford-pharmacoepi.github.io/PatientProfiles/reference/countCohortOccurrences.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"It creates columns to indicate number of occurrences of intersection of two\ncohorts — countCohortOccurrences","text":"","code":"# \\donttest{ library(PatientProfiles) library(dplyr) #>  #> Attaching package: ‘dplyr’ #> The following objects are masked from ‘package:stats’: #>  #>     filter, lag #> The following objects are masked from ‘package:base’: #>  #>     intersect, setdiff, setequal, union  cohort1 <- dplyr::tibble(   cohort_definition_id = c(1, 1, 1, 1, 1),   subject_id = c(1, 1, 1, 2, 2),   cohort_start_date = as.Date(     c(       \"2020-01-01\",       \"2020-01-15\",       \"2020-01-20\",       \"2020-01-01\",       \"2020-02-01\"     )   ),   cohort_end_date = as.Date(     c(       \"2020-01-01\",       \"2020-01-15\",       \"2020-01-20\",       \"2020-01-01\",       \"2020-02-01\"     )   ) )  cohort2 <- dplyr::tibble(   cohort_definition_id = c(1, 1, 1, 1, 1, 1, 1),   subject_id = c(1, 1, 1, 2, 2, 2, 1),   cohort_start_date = as.Date(     c(       \"2020-01-15\",       \"2020-01-25\",       \"2020-01-26\",       \"2020-01-29\",       \"2020-03-15\",       \"2020-01-24\",       \"2020-02-16\"     )   ),   cohort_end_date = as.Date(     c(       \"2020-01-15\",       \"2020-01-25\",       \"2020-01-26\",       \"2020-01-29\",       \"2020-03-15\",       \"2020-01-24\",       \"2020-02-16\"     )   ), )  cdm <- mockPatientProfiles(cohort1 = cohort1, cohort2 = cohort2)  result <- cdm$cohort1 %>%   countCohortOccurrences(     cdm = cdm,     targetCohortTable = \"cohort2\"   ) %>%   dplyr::collect() # }"},{"path":"https://oxford-pharmacoepi.github.io/PatientProfiles/reference/dateOfCohort.html","id":null,"dir":"Reference","previous_headings":"","what":"Date of cohorts that are present in a certain window — dateOfCohort","title":"Date of cohorts that are present in a certain window — dateOfCohort","text":"Date cohorts present certain window","code":""},{"path":"https://oxford-pharmacoepi.github.io/PatientProfiles/reference/dateOfCohort.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Date of cohorts that are present in a certain window — dateOfCohort","text":"","code":"dateOfCohort(   x,   cdm,   indexDate = \"cohort_start_date\",   targetCohortTable,   targetCohortId = NULL,   targetDate = \"cohort_start_date\",   order = \"first\",   window = c(0, Inf),   nameStyle = \"{cohort_name}_{window_name}\",   tablePrefix = NULL )"},{"path":"https://oxford-pharmacoepi.github.io/PatientProfiles/reference/dateOfCohort.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Date of cohorts that are present in a certain window — dateOfCohort","text":"x table containing individuals time another cohort added cdm cdm containing tables indexDate Date interest targetCohortTable Cohort table targetCohortId Cohort IDs interest cohort table. NULL, cohorts used time variable added cohort interest targetDate Date interest cohort table. Either cohort_start_date cohort_end_date order date use multiple records individual window interest. Either first last. window Window time identify records relative indexDate. Records outside time period ignored. nameStyle naming added column columns, include required parameters tablePrefix stem permanent tables created. NULL, temporary tables used throughout.","code":""},{"path":"https://oxford-pharmacoepi.github.io/PatientProfiles/reference/dateOfCohort.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Date of cohorts that are present in a certain window — dateOfCohort","text":"x along additional columns cohort interest.","code":""},{"path":"https://oxford-pharmacoepi.github.io/PatientProfiles/reference/dateOfCohort.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Date of cohorts that are present in a certain window — dateOfCohort","text":"","code":"# \\donttest{ library(PatientProfiles) library(dplyr)  cohort1 <- dplyr::tibble(   cohort_definition_id = c(1, 1, 1, 1, 1),   subject_id = c(1, 1, 1, 2, 2),   cohort_start_date = as.Date(     c(       \"2020-01-01\",       \"2020-01-15\",       \"2020-01-20\",       \"2020-01-01\",       \"2020-02-01\"     )   ),   cohort_end_date = as.Date(     c(       \"2020-01-01\",       \"2020-01-15\",       \"2020-01-20\",       \"2020-01-01\",       \"2020-02-01\"     )   ) )  cohort2 <- dplyr::tibble(   cohort_definition_id = c(1, 1, 1, 1, 1, 1, 1),   subject_id = c(1, 1, 1, 2, 2, 2, 1),   cohort_start_date = as.Date(     c(       \"2020-01-15\",       \"2020-01-25\",       \"2020-01-26\",       \"2020-01-29\",       \"2020-03-15\",       \"2020-01-24\",       \"2020-02-16\"     )   ),   cohort_end_date = as.Date(     c(       \"2020-01-15\",       \"2020-01-25\",       \"2020-01-26\",       \"2020-01-29\",       \"2020-03-15\",       \"2020-01-24\",       \"2020-02-16\"     )   ), )  cdm <- mockPatientProfiles(cohort1 = cohort1, cohort2 = cohort2)  result <- cdm$cohort1 %>%   dateOfCohort(     cdm = cdm,     targetCohortTable = \"cohort2\"   ) %>%   dplyr::collect() # }"},{"path":"https://oxford-pharmacoepi.github.io/PatientProfiles/reference/flagCohortPresence.html","id":null,"dir":"Reference","previous_headings":"","what":"It creates columns to indicate the presence of cohorts — flagCohortPresence","title":"It creates columns to indicate the presence of cohorts — flagCohortPresence","text":"creates columns indicate presence cohorts","code":""},{"path":"https://oxford-pharmacoepi.github.io/PatientProfiles/reference/flagCohortPresence.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"It creates columns to indicate the presence of cohorts — flagCohortPresence","text":"","code":"flagCohortPresence(   x,   cdm,   targetCohortTable,   targetCohortId = NULL,   indexDate = \"cohort_start_date\",   targetStartDate = \"cohort_start_date\",   targetEndDate = \"cohort_end_date\",   window = list(c(0, Inf)),   nameStyle = \"{cohort_name}_{window_name}\",   tablePrefix = NULL )"},{"path":"https://oxford-pharmacoepi.github.io/PatientProfiles/reference/flagCohortPresence.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"It creates columns to indicate the presence of cohorts — flagCohortPresence","text":"x table containing individual overlap indicator attached extra columns cdm cdm containing tables targetCohortTable name cohort want check overlap targetCohortId vector cohort definition ids include indexDate date reference table x targetStartDate date reference cohort table, either start (overlap) (incidence) targetEndDate date reference cohort table, either end (overlap) NULL (incidence) window window consider events nameStyle naming added column columns, include required parameters tablePrefix stem permanent tables created. NULL, temporary tables used throughout.","code":""},{"path":"https://oxford-pharmacoepi.github.io/PatientProfiles/reference/flagCohortPresence.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"It creates columns to indicate the presence of cohorts — flagCohortPresence","text":"table added columns overlap information","code":""},{"path":"https://oxford-pharmacoepi.github.io/PatientProfiles/reference/flagCohortPresence.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"It creates columns to indicate the presence of cohorts — flagCohortPresence","text":"","code":"# \\donttest{ cohort1 <- dplyr::tibble(   cohort_definition_id = c(1, 1, 1, 1, 1),   subject_id = c(1, 1, 1, 2, 2),   cohort_start_date = as.Date(     c(       \"2020-01-01\",       \"2020-01-15\",       \"2020-01-20\",       \"2020-01-01\",       \"2020-02-01\"     )   ),   cohort_end_date = as.Date(     c(       \"2020-01-01\",       \"2020-01-15\",       \"2020-01-20\",       \"2020-01-01\",       \"2020-02-01\"     )   ) )  cohort2 <- dplyr::tibble(   cohort_definition_id = c(1, 1, 1, 1, 1, 1, 1),   subject_id = c(1, 1, 1, 2, 2, 2, 1),   cohort_start_date = as.Date(     c(       \"2020-01-15\",       \"2020-01-25\",       \"2020-01-26\",       \"2020-01-29\",       \"2020-03-15\",       \"2020-01-24\",       \"2020-02-16\"     )   ),   cohort_end_date = as.Date(     c(       \"2020-01-15\",       \"2020-01-25\",       \"2020-01-26\",       \"2020-01-29\",       \"2020-03-15\",       \"2020-01-24\",       \"2020-02-16\"     )   ), )  cdm <- mockPatientProfiles(cohort1 = cohort1, cohort2 = cohort2)  result <- cdm$cohort1 %>%   flagCohortPresence(     cdm = cdm,     targetCohortTable = \"cohort2\"   ) %>%   dplyr::collect() # }"},{"path":"https://oxford-pharmacoepi.github.io/PatientProfiles/reference/mockPatientProfiles.html","id":null,"dir":"Reference","previous_headings":"","what":"It creates a mock database for testing PatientProfiles package — mockPatientProfiles","title":"It creates a mock database for testing PatientProfiles package — mockPatientProfiles","text":"creates mock database testing PatientProfiles package","code":""},{"path":"https://oxford-pharmacoepi.github.io/PatientProfiles/reference/mockPatientProfiles.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"It creates a mock database for testing PatientProfiles package — mockPatientProfiles","text":"","code":"mockPatientProfiles(   drug_exposure = NULL,   drug_strength = NULL,   observation_period = NULL,   condition_occurrence = NULL,   visit_occurrence = NULL,   concept_ancestor = NULL,   person = NULL,   cohort1 = NULL,   cohort2 = NULL,   drug_concept_id_size = 5,   ancestor_concept_id_size = 5,   condition_concept_id_size = 5,   visit_concept_id_size = 5,   visit_occurrence_id_size = 5,   ingredient_concept_id_size = 1,   drug_exposure_size = 10,   patient_size = 1,   min_drug_exposure_start_date = \"2000-01-01\",   max_drug_exposure_start_date = \"2020-01-01\",   earliest_date_of_birth = NULL,   latest_date_of_birth = NULL,   earliest_observation_start_date = NULL,   latest_observation_start_date = NULL,   min_days_to_observation_end = NULL,   max_days_to_observation_end = NULL,   earliest_condition_start_date = NULL,   latest_condition_start_date = NULL,   min_days_to_condition_end = NULL,   max_days_to_condition_end = NULL,   earliest_visit_start_date = NULL,   latest_visit_start_date = NULL,   min_days_to_visit_end = NULL,   max_days_to_visit_end = NULL,   seed = 1,   ... )"},{"path":"https://oxford-pharmacoepi.github.io/PatientProfiles/reference/mockPatientProfiles.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"It creates a mock database for testing PatientProfiles package — mockPatientProfiles","text":"drug_exposure default null user can define table drug_strength default null user can define table observation_period default null user can define table condition_occurrence default null user can define table visit_occurrence default null user can define visit_occurrence table concept_ancestor concept ancestor table person default null user can define table cohort1 cohort table test run getindication cohort2 cohort table test run getindication drug_concept_id_size number unique drug concept id ancestor_concept_id_size size ceoncept ancestor table condition_concept_id_size number unique row condition concept table visit_concept_id_size number unique visit concept id visit_occurrence_id_size number unique visit occurrence id ingredient_concept_id_size number unique drug ingredient concept id drug_exposure_size number unique drug exposure patient_size number unique patient min_drug_exposure_start_date user define minimum drug exposure start date max_drug_exposure_start_date user define maximium drug exposure start date earliest_date_of_birth earliest date birth patient person table format \"dd-mm-yyyy\" latest_date_of_birth latest date birth patient person table format \"dd-mm-yyyy\" earliest_observation_start_date earliest observation start date patient format \"dd-mm-yyyy\" latest_observation_start_date latest observation start date patient format \"dd-mm-yyyy\" min_days_to_observation_end minimum number days observational integer max_days_to_observation_end maximum number days observation period integer earliest_condition_start_date earliest condition start date patient format \"dd-mm-yyyy\" latest_condition_start_date latest condition start date patient format \"dd-mm-yyyy\" min_days_to_condition_end minimum number days condition integer max_days_to_condition_end maximum number days condition integer earliest_visit_start_date earliest visit start date patient format \"dd-mm-yyyy\" latest_visit_start_date latest visit start date patient format \"dd-mm-yyyy\" min_days_to_visit_end minimum number days visit integer max_days_to_visit_end maximum number days visit integer seed seed ... user self defined tibble table put cdm, can input many user want","code":""},{"path":"https://oxford-pharmacoepi.github.io/PatientProfiles/reference/mockPatientProfiles.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"It creates a mock database for testing PatientProfiles package — mockPatientProfiles","text":"cdm mock database following user's specifications","code":""},{"path":"https://oxford-pharmacoepi.github.io/PatientProfiles/reference/mockPatientProfiles.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"It creates a mock database for testing PatientProfiles package — mockPatientProfiles","text":"","code":"# \\donttest{ library(PatientProfiles) cdm <- mockPatientProfiles() # }"},{"path":"https://oxford-pharmacoepi.github.io/PatientProfiles/reference/pipe.html","id":null,"dir":"Reference","previous_headings":"","what":"Pipe operator — %>%","title":"Pipe operator — %>%","text":"See magrittr::%>% details.","code":""},{"path":"https://oxford-pharmacoepi.github.io/PatientProfiles/reference/pipe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pipe operator — %>%","text":"","code":"lhs %>% rhs"},{"path":"https://oxford-pharmacoepi.github.io/PatientProfiles/reference/pipe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pipe operator — %>%","text":"lhs value magrittr placeholder. rhs function call using magrittr semantics.","code":""},{"path":"https://oxford-pharmacoepi.github.io/PatientProfiles/reference/pipe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pipe operator — %>%","text":"result calling `rhs(lhs)`.","code":""},{"path":"https://oxford-pharmacoepi.github.io/PatientProfiles/reference/timeToCohort.html","id":null,"dir":"Reference","previous_headings":"","what":"Time between cohorts — timeToCohort","title":"Time between cohorts — timeToCohort","text":"Time cohorts","code":""},{"path":"https://oxford-pharmacoepi.github.io/PatientProfiles/reference/timeToCohort.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Time between cohorts — timeToCohort","text":"","code":"timeToCohort(   x,   cdm,   indexDate = \"cohort_start_date\",   targetCohortTable,   targetCohortId = NULL,   targetDate = \"cohort_start_date\",   order = \"first\",   window = c(0, Inf),   nameStyle = \"{cohort_name}_{window_name}\",   tablePrefix = NULL )"},{"path":"https://oxford-pharmacoepi.github.io/PatientProfiles/reference/timeToCohort.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Time between cohorts — timeToCohort","text":"x table containing individuals time another cohort added cdm cdm containing tables indexDate Date interest targetCohortTable Cohort table targetCohortId Cohort IDs interest cohort table. NULL, cohorts used time variable added cohort interest targetDate Date interest cohort table. Either cohort_start_date cohort_end_date order date use multiple records individual window interest. Either first last. window Window time identify records relative indexDate. Records outside time period ignored. nameStyle naming added column columns, include required parameters tablePrefix stem permanent tables created. NULL, temporary tables used throughout.","code":""},{"path":"https://oxford-pharmacoepi.github.io/PatientProfiles/reference/timeToCohort.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Time between cohorts — timeToCohort","text":"x along additional columns cohort interest.","code":""},{"path":"https://oxford-pharmacoepi.github.io/PatientProfiles/reference/timeToCohort.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Time between cohorts — timeToCohort","text":"","code":"# \\donttest{ library(PatientProfiles) library(dplyr)  cohort1 <- dplyr::tibble(   cohort_definition_id = c(1, 1, 1, 1, 1),   subject_id = c(1, 1, 1, 2, 2),   cohort_start_date = as.Date(     c(       \"2020-01-01\",       \"2020-01-15\",       \"2020-01-20\",       \"2020-01-01\",       \"2020-02-01\"     )   ),   cohort_end_date = as.Date(     c(       \"2020-01-01\",       \"2020-01-15\",       \"2020-01-20\",       \"2020-01-01\",       \"2020-02-01\"     )   ) )  cohort2 <- dplyr::tibble(   cohort_definition_id = c(1, 1, 1, 1, 1, 1, 1),   subject_id = c(1, 1, 1, 2, 2, 2, 1),   cohort_start_date = as.Date(     c(       \"2020-01-15\",       \"2020-01-25\",       \"2020-01-26\",       \"2020-01-29\",       \"2020-03-15\",       \"2020-01-24\",       \"2020-02-16\"     )   ),   cohort_end_date = as.Date(     c(       \"2020-01-15\",       \"2020-01-25\",       \"2020-01-26\",       \"2020-01-29\",       \"2020-03-15\",       \"2020-01-24\",       \"2020-02-16\"     )   ), )  cdm <- mockPatientProfiles(cohort1 = cohort1, cohort2 = cohort2)  result <- cdm$cohort1 %>%   timeToCohort(     cdm = cdm,     targetCohortTable = \"cohort2\"   ) %>%   dplyr::collect() # }"}]
