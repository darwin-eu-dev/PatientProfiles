[{"path":[]},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/CONTRIBUTING.html","id":"filing-issues","dir":"","previous_headings":"","what":"Filing issues","title":"Contributing to PatientProfiles","text":"found bug, question, want suggest new feature please open issue. reporting bug, reprex much appreciated. contributing either documentation code, please make sure open issue beforehand identify needs done .","code":""},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/CONTRIBUTING.html","id":"documenting-the-package","dir":"","previous_headings":"Filing issues","what":"Documenting the package","title":"Contributing to PatientProfiles","text":"Run update check package documentation: Note devtools::check_man() return warnings. commit limited package documentation, running sufficient (although running devtools::check() always generally good idea submitting pull request.","code":"devtools::document()  devtools::run_examples() devtools::build_readme() devtools::build_vignettes() devtools::check_man()"},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/CONTRIBUTING.html","id":"run-tests","dir":"","previous_headings":"Filing issues","what":"Run tests","title":"Contributing to PatientProfiles","text":"starting contribute code, first make sure package tests passing. raise issue going (although please first make sure packages imports suggests installed). contribute code, make sure current tests add continue pass. package tests can run together : Code add new functionality accompanied tests. Code coverage can checked using:","code":"devtools::test() # note, you may first have to detach the package # detach(\"package:PatientProfiles\", unload=TRUE) devtools::test_coverage()"},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/CONTRIBUTING.html","id":"adhere-to-code-style","dir":"","previous_headings":"Filing issues","what":"Adhere to code style","title":"Contributing to PatientProfiles","text":"Please adhere code style adding new code. though restyle code unrelated pull request make code review difficult.","code":"lintr::lint_package(\".\",                     linters = lintr::linters_with_defaults(                       lintr::object_name_linter(styles = \"camelCase\")                     ) )"},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/CONTRIBUTING.html","id":"run-check-before-opening-a-pull-request","dir":"","previous_headings":"Filing issues","what":"Run check() before opening a pull request","title":"Contributing to PatientProfiles","text":"opening pull request please make sure run: warnings seen.","code":"devtools::check()"},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"Apache License","title":"Apache License","text":"Version 2.0, January 2004 <http://www.apache.org/licenses/>","code":""},{"path":[]},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/LICENSE.html","id":"id_1-definitions","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"1. Definitions","title":"Apache License","text":"“License” shall mean terms conditions use, reproduction, distribution defined Sections 1 9 document. “Licensor” shall mean copyright owner entity authorized copyright owner granting License. “Legal Entity” shall mean union acting entity entities control, controlled , common control entity. purposes definition, “control” means () power, direct indirect, cause direction management entity, whether contract otherwise, (ii) ownership fifty percent (50%) outstanding shares, (iii) beneficial ownership entity. “” (“”) shall mean individual Legal Entity exercising permissions granted License. “Source” form shall mean preferred form making modifications, including limited software source code, documentation source, configuration files. “Object” form shall mean form resulting mechanical transformation translation Source form, including limited compiled object code, generated documentation, conversions media types. “Work” shall mean work authorship, whether Source Object form, made available License, indicated copyright notice included attached work (example provided Appendix ). “Derivative Works” shall mean work, whether Source Object form, based (derived ) Work editorial revisions, annotations, elaborations, modifications represent, whole, original work authorship. purposes License, Derivative Works shall include works remain separable , merely link (bind name) interfaces , Work Derivative Works thereof. “Contribution” shall mean work authorship, including original version Work modifications additions Work Derivative Works thereof, intentionally submitted Licensor inclusion Work copyright owner individual Legal Entity authorized submit behalf copyright owner. purposes definition, “submitted” means form electronic, verbal, written communication sent Licensor representatives, including limited communication electronic mailing lists, source code control systems, issue tracking systems managed , behalf , Licensor purpose discussing improving Work, excluding communication conspicuously marked otherwise designated writing copyright owner “Contribution.” “Contributor” shall mean Licensor individual Legal Entity behalf Contribution received Licensor subsequently incorporated within Work.","code":""},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/LICENSE.html","id":"id_2-grant-of-copyright-license","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"2. Grant of Copyright License","title":"Apache License","text":"Subject terms conditions License, Contributor hereby grants perpetual, worldwide, non-exclusive, -charge, royalty-free, irrevocable copyright license reproduce, prepare Derivative Works , publicly display, publicly perform, sublicense, distribute Work Derivative Works Source Object form.","code":""},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/LICENSE.html","id":"id_3-grant-of-patent-license","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"3. Grant of Patent License","title":"Apache License","text":"Subject terms conditions License, Contributor hereby grants perpetual, worldwide, non-exclusive, -charge, royalty-free, irrevocable (except stated section) patent license make, made, use, offer sell, sell, import, otherwise transfer Work, license applies patent claims licensable Contributor necessarily infringed Contribution(s) alone combination Contribution(s) Work Contribution(s) submitted. institute patent litigation entity (including cross-claim counterclaim lawsuit) alleging Work Contribution incorporated within Work constitutes direct contributory patent infringement, patent licenses granted License Work shall terminate date litigation filed.","code":""},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/LICENSE.html","id":"id_4-redistribution","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"4. Redistribution","title":"Apache License","text":"may reproduce distribute copies Work Derivative Works thereof medium, without modifications, Source Object form, provided meet following conditions: () must give recipients Work Derivative Works copy License; (b) must cause modified files carry prominent notices stating changed files; (c) must retain, Source form Derivative Works distribute, copyright, patent, trademark, attribution notices Source form Work, excluding notices pertain part Derivative Works; (d) Work includes “NOTICE” text file part distribution, Derivative Works distribute must include readable copy attribution notices contained within NOTICE file, excluding notices pertain part Derivative Works, least one following places: within NOTICE text file distributed part Derivative Works; within Source form documentation, provided along Derivative Works; , within display generated Derivative Works, wherever third-party notices normally appear. contents NOTICE file informational purposes modify License. may add attribution notices within Derivative Works distribute, alongside addendum NOTICE text Work, provided additional attribution notices construed modifying License. may add copyright statement modifications may provide additional different license terms conditions use, reproduction, distribution modifications, Derivative Works whole, provided use, reproduction, distribution Work otherwise complies conditions stated License.","code":""},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/LICENSE.html","id":"id_5-submission-of-contributions","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"5. Submission of Contributions","title":"Apache License","text":"Unless explicitly state otherwise, Contribution intentionally submitted inclusion Work Licensor shall terms conditions License, without additional terms conditions. Notwithstanding , nothing herein shall supersede modify terms separate license agreement may executed Licensor regarding Contributions.","code":""},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/LICENSE.html","id":"id_6-trademarks","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"6. Trademarks","title":"Apache License","text":"License grant permission use trade names, trademarks, service marks, product names Licensor, except required reasonable customary use describing origin Work reproducing content NOTICE file.","code":""},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/LICENSE.html","id":"id_7-disclaimer-of-warranty","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"7. Disclaimer of Warranty","title":"Apache License","text":"Unless required applicable law agreed writing, Licensor provides Work (Contributor provides Contributions) “” BASIS, WITHOUT WARRANTIES CONDITIONS KIND, either express implied, including, without limitation, warranties conditions TITLE, NON-INFRINGEMENT, MERCHANTABILITY, FITNESS PARTICULAR PURPOSE. solely responsible determining appropriateness using redistributing Work assume risks associated exercise permissions License.","code":""},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/LICENSE.html","id":"id_8-limitation-of-liability","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"8. Limitation of Liability","title":"Apache License","text":"event legal theory, whether tort (including negligence), contract, otherwise, unless required applicable law (deliberate grossly negligent acts) agreed writing, shall Contributor liable damages, including direct, indirect, special, incidental, consequential damages character arising result License use inability use Work (including limited damages loss goodwill, work stoppage, computer failure malfunction, commercial damages losses), even Contributor advised possibility damages.","code":""},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/LICENSE.html","id":"id_9-accepting-warranty-or-additional-liability","dir":"","previous_headings":"Terms and Conditions for use, reproduction, and distribution","what":"9. Accepting Warranty or Additional Liability","title":"Apache License","text":"redistributing Work Derivative Works thereof, may choose offer, charge fee , acceptance support, warranty, indemnity, liability obligations /rights consistent License. However, accepting obligations, may act behalf sole responsibility, behalf Contributor, agree indemnify, defend, hold Contributor harmless liability incurred , claims asserted , Contributor reason accepting warranty additional liability. END TERMS CONDITIONS","code":""},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/LICENSE.html","id":"appendix-how-to-apply-the-apache-license-to-your-work","dir":"","previous_headings":"","what":"APPENDIX: How to apply the Apache License to your work","title":"Apache License","text":"apply Apache License work, attach following boilerplate notice, fields enclosed brackets [] replaced identifying information. (Don’t include brackets!) text enclosed appropriate comment syntax file format. also recommend file class name description purpose included “printed page” copyright notice easier identification within third-party archives.","code":"Copyright [yyyy] [name of copyright owner]  Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at    http://www.apache.org/licenses/LICENSE-2.0  Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License."},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/articles/cohort-intersect.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Adding cohort intersections","text":"Cohorts often key component studies use OMOP CDM. may created represent various clinical events interest often use cohorts combination, whether identify outcomes among people exposure interest, report baseline comorbidites among certain study population, many possible reasons. Cohorts particular format OMOP CDM, can see two cohort tables created mockPatientProfiles() function provided PatientProfiles, mimics database OMOP CDM format. can see first cohort table contains 2 cohorts second contains 3 cohorts.","code":"library(CDMConnector) library(PatientProfiles) library(duckdb) library(dplyr) library(ggplot2)  cdm <- mockPatientProfiles(numberIndividuals = 1000)  cdm$cohort1 %>%   glimpse() ## Rows: ?? ## Columns: 4 ## Database: DuckDB v1.1.1 [unknown@Linux 6.5.0-1025-azure:R 4.4.1/:memory:] ## $ cohort_definition_id <int> 2, 1, 1, 2, 2, 3, 2, 3, 1, 2, 2, 2, 2, 1, 1, 1, 3… ## $ subject_id           <int> 503, 261, 750, 1, 445, 523, 899, 929, 925, 200, 6… ## $ cohort_start_date    <date> 2004-08-05, 1976-07-21, 1978-01-02, 1916-08-27, … ## $ cohort_end_date      <date> 2005-12-14, 1979-07-22, 1980-06-14, 1946-04-06, … settings(cdm$cohort1) ## # A tibble: 3 × 2 ##   cohort_definition_id cohort_name ##                  <int> <chr>       ## 1                    1 cohort_1    ## 2                    2 cohort_2    ## 3                    3 cohort_3 cdm$cohort2 %>%   glimpse() ## Rows: ?? ## Columns: 4 ## Database: DuckDB v1.1.1 [unknown@Linux 6.5.0-1025-azure:R 4.4.1/:memory:] ## $ cohort_definition_id <int> 3, 1, 1, 3, 1, 2, 1, 1, 2, 2, 3, 2, 2, 3, 1, 3, 1… ## $ subject_id           <int> 576, 112, 58, 256, 335, 291, 294, 615, 782, 721, … ## $ cohort_start_date    <date> 1956-05-21, 1978-06-11, 1921-03-26, 1955-04-22, … ## $ cohort_end_date      <date> 1973-09-24, 2001-11-10, 1923-07-03, 1955-07-27, … settings(cdm$cohort2) ## # A tibble: 3 × 2 ##   cohort_definition_id cohort_name ##                  <int> <chr>       ## 1                    1 cohort_1    ## 2                    2 cohort_2    ## 3                    3 cohort_3"},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/articles/cohort-intersect.html","id":"identifying-cohort-intersections","dir":"Articles","previous_headings":"","what":"Identifying cohort intersections","title":"Adding cohort intersections","text":"PatientProfiles provides four functions identifying cohort intersections (presence individual two cohorts). first addCohortIntersectFlag() adds flag whether someone appeared cohort time window. second, addCohortIntersectCount(), counts number times someone appeared cohort window. third, addCohortIntersectDate(), adds date intersection occurred. fourth, addCohortIntersectDays(), adds number days intersection. can see . Note add variables cohort table interest, identify intersections given window. can see, target cohort table contains multiple cohorts default functions add one new variable per cohort. Let’s start adding flag count variables using window 180 days 180 days cohort start date table interest. default cohort start date cohort interest used index date, cohort start cohort end date target cohort used check intersection. Next can add date intersection days intersection. identifying variables use one date target table, default cohort start date. addition default first intersection occurs within window used.","code":"cdm$cohort1 %>%   addCohortIntersectFlag(     indexDate = \"cohort_start_date\",     targetCohortTable = \"cohort2\",     targetStartDate = \"cohort_start_date\",     targetEndDate = \"cohort_end_date\",     window = list(c(-180, 180))   ) |>   glimpse() ## Rows: ?? ## Columns: 7 ## Database: DuckDB v1.1.1 [unknown@Linux 6.5.0-1025-azure:R 4.4.1/:memory:] ## $ cohort_definition_id <int> 3, 2, 3, 1, 1, 1, 1, 2, 3, 3, 1, 3, 2, 1, 2, 2, 1… ## $ subject_id           <int> 523, 899, 778, 222, 140, 70, 54, 137, 777, 145, 2… ## $ cohort_start_date    <date> 1962-10-26, 1950-03-28, 1925-07-30, 1991-10-17, … ## $ cohort_end_date      <date> 1974-01-15, 1976-07-06, 1936-05-29, 1997-05-17, … ## $ cohort_1_m180_to_180 <dbl> 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0… ## $ cohort_3_m180_to_180 <dbl> 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1… ## $ cohort_2_m180_to_180 <dbl> 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0… cdm$cohort1 %>%   addCohortIntersectCount(     indexDate = \"cohort_start_date\",     targetCohortTable = \"cohort2\",     targetStartDate = \"cohort_start_date\",     targetEndDate = \"cohort_end_date\",     window = list(c(-180, 180))   ) |>   glimpse() ## Rows: ?? ## Columns: 7 ## Database: DuckDB v1.1.1 [unknown@Linux 6.5.0-1025-azure:R 4.4.1/:memory:] ## $ cohort_definition_id <int> 3, 2, 3, 1, 1, 1, 1, 2, 3, 3, 1, 3, 2, 1, 2, 2, 1… ## $ subject_id           <int> 523, 899, 778, 222, 140, 70, 54, 137, 777, 145, 2… ## $ cohort_start_date    <date> 1962-10-26, 1950-03-28, 1925-07-30, 1991-10-17, … ## $ cohort_end_date      <date> 1974-01-15, 1976-07-06, 1936-05-29, 1997-05-17, … ## $ cohort_1_m180_to_180 <dbl> 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0… ## $ cohort_2_m180_to_180 <dbl> 0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 0… ## $ cohort_3_m180_to_180 <dbl> 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1… cdm$cohort1 %>%   addCohortIntersectDate(     indexDate = \"cohort_start_date\",     targetCohortTable = \"cohort2\",     targetDate = \"cohort_start_date\",     window = list(c(-180, 180)),     order = \"first\"   ) |>   glimpse() ## Rows: ?? ## Columns: 7 ## Database: DuckDB v1.1.1 [unknown@Linux 6.5.0-1025-azure:R 4.4.1/:memory:] ## $ cohort_definition_id <int> 2, 1, 1, 2, 2, 3, 2, 3, 1, 2, 2, 2, 2, 1, 1, 1, 3… ## $ subject_id           <int> 503, 261, 750, 1, 445, 523, 899, 929, 925, 200, 6… ## $ cohort_start_date    <date> 2004-08-05, 1976-07-21, 1978-01-02, 1916-08-27, … ## $ cohort_end_date      <date> 2005-12-14, 1979-07-22, 1980-06-14, 1946-04-06, … ## $ cohort_2_m180_to_180 <date> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, … ## $ cohort_1_m180_to_180 <date> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, … ## $ cohort_3_m180_to_180 <date> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, … cdm$cohort1 %>%   addCohortIntersectDays(     indexDate = \"cohort_start_date\",     targetCohortTable = \"cohort2\",     targetDate = \"cohort_start_date\",     window = list(c(-180, 180)),     order = \"first\"   ) |>   glimpse() ## Rows: ?? ## Columns: 7 ## Database: DuckDB v1.1.1 [unknown@Linux 6.5.0-1025-azure:R 4.4.1/:memory:] ## $ cohort_definition_id <int> 2, 1, 1, 2, 2, 3, 2, 3, 1, 2, 2, 2, 2, 1, 1, 1, 3… ## $ subject_id           <int> 503, 261, 750, 1, 445, 523, 899, 929, 925, 200, 6… ## $ cohort_start_date    <date> 2004-08-05, 1976-07-21, 1978-01-02, 1916-08-27, … ## $ cohort_end_date      <date> 2005-12-14, 1979-07-22, 1980-06-14, 1946-04-06, … ## $ cohort_3_m180_to_180 <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N… ## $ cohort_2_m180_to_180 <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N… ## $ cohort_1_m180_to_180 <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…"},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/articles/cohort-intersect.html","id":"options-for-identifying-cohort-intersection","dir":"Articles","previous_headings":"","what":"Options for identifying cohort intersection","title":"Adding cohort intersections","text":"consider impact different options can choose identifying cohort intersections let´s consider toy example single patient common cold (diagnosed 1st February 2020 ending 15th February 2020). person two records aspirin, one ending shortly start date common cold starting record common cold. can visualise person’s timeline looks like.  Whether consider cohort intersection common cold aspirin cohorts depend options choose. see let’s first create cdm reference containing example. consider intersection relative cohort start date common cold window 0 0 (ie index date) intersection identified individual ongoing record aspirin date. , however, change index date cohort end date case intersection found. also extend window include time cases lead cohort intersections found. window 90 days 90 days cohort start, person count two cohort intersections. window, add first cohort intersect date get start date first record aspirin. instead set order last, get start date second record aspirin.","code":"common_cold <- dplyr::tibble(   cohort_definition_id = 1,   subject_id = 1,   cohort_start_date = as.Date(\"2020-02-01\"),   cohort_end_date = as.Date(\"2020-02-15\") )  aspirin <- dplyr::tibble(   cohort_definition_id = c(1, 1),   subject_id = c(1, 1),   cohort_start_date = as.Date(c(\"2020-01-01\", \"2020-02-10\")),   cohort_end_date = as.Date(c(\"2020-01-28\", \"2020-03-15\")) ) bind_rows(   common_cold |> mutate(cohort = \"common cold\"),   aspirin |> mutate(cohort = \"aspirin\") ) |>   mutate(record = as.character(row_number())) |>   ggplot() +   geom_segment(     aes(       x = cohort_start_date,       y = cohort,       xend = cohort_end_date,       yend = cohort, col = cohort, fill = cohort     ),     size = 4.5, alpha = .5   ) +   geom_point(aes(x = cohort_start_date, y = cohort, color = cohort), size = 4) +   geom_point(aes(x = cohort_end_date, y = cohort, color = cohort), size = 4) +   ylab(\"\") +   xlab(\"\") +   theme_minimal() +   theme(legend.position = \"none\") cdm <- mockPatientProfiles(   cohort1 = common_cold,   cohort2 = aspirin,   numberIndividuals = 2 ) cdm$cohort1 %>%   addCohortIntersectFlag(     targetCohortTable = \"cohort2\",     indexDate = \"cohort_start_date\",     targetStartDate = \"cohort_start_date\",     targetEndDate = \"cohort_end_date\",     window = list(c(0, 0)),   ) |>   glimpse() ## Rows: ?? ## Columns: 5 ## Database: DuckDB v1.1.1 [unknown@Linux 6.5.0-1025-azure:R 4.4.1/:memory:] ## $ cohort_definition_id <int> 1 ## $ subject_id           <int> 1 ## $ cohort_start_date    <date> 2020-02-01 ## $ cohort_end_date      <date> 2020-02-15 ## $ cohort_1_0_to_0      <dbl> 0 cdm$cohort1 %>%   addCohortIntersectFlag(     targetCohortTable = \"cohort2\",     indexDate = \"cohort_end_date\",     targetStartDate = \"cohort_start_date\",     targetEndDate = \"cohort_end_date\",     window = list(c(0, 0))   ) |>   glimpse() ## Rows: ?? ## Columns: 5 ## Database: DuckDB v1.1.1 [unknown@Linux 6.5.0-1025-azure:R 4.4.1/:memory:] ## $ cohort_definition_id <int> 1 ## $ subject_id           <int> 1 ## $ cohort_start_date    <date> 2020-02-01 ## $ cohort_end_date      <date> 2020-02-15 ## $ cohort_1_0_to_0      <dbl> 1 cdm$cohort1 %>%   addCohortIntersectFlag(     targetCohortTable = \"cohort2\",     indexDate = \"cohort_start_date\",     targetStartDate = \"cohort_start_date\",     targetEndDate = \"cohort_end_date\",     window = list(c(-90, 90)),   ) |>   glimpse() ## Rows: ?? ## Columns: 5 ## Database: DuckDB v1.1.1 [unknown@Linux 6.5.0-1025-azure:R 4.4.1/:memory:] ## $ cohort_definition_id <int> 1 ## $ subject_id           <int> 1 ## $ cohort_start_date    <date> 2020-02-01 ## $ cohort_end_date      <date> 2020-02-15 ## $ cohort_1_m90_to_90   <dbl> 1 cdm$cohort1 %>%   addCohortIntersectCount(     targetCohortTable = \"cohort2\",     indexDate = \"cohort_start_date\",     targetStartDate = \"cohort_start_date\",     targetEndDate = \"cohort_end_date\",     window = list(c(-90, 90)),   ) |>   glimpse() ## Rows: ?? ## Columns: 5 ## Database: DuckDB v1.1.1 [unknown@Linux 6.5.0-1025-azure:R 4.4.1/:memory:] ## $ cohort_definition_id <int> 1 ## $ subject_id           <int> 1 ## $ cohort_start_date    <date> 2020-02-01 ## $ cohort_end_date      <date> 2020-02-15 ## $ cohort_1_m90_to_90   <dbl> 2 cdm$cohort1 %>%   addCohortIntersectDate(     targetCohortTable = \"cohort2\",     indexDate = \"cohort_start_date\",     targetDate = \"cohort_start_date\",     window = list(c(-90, 90)),     order = \"first\"   ) |>   glimpse() ## Rows: ?? ## Columns: 5 ## Database: DuckDB v1.1.1 [unknown@Linux 6.5.0-1025-azure:R 4.4.1/:memory:] ## $ cohort_definition_id <int> 1 ## $ subject_id           <int> 1 ## $ cohort_start_date    <date> 2020-02-01 ## $ cohort_end_date      <date> 2020-02-15 ## $ cohort_1_m90_to_90   <date> 2020-01-01 cdm$cohort1 %>%   addCohortIntersectDate(     targetCohortTable = \"cohort2\",     indexDate = \"cohort_start_date\",     targetDate = \"cohort_start_date\",     window = list(c(-90, 90)),     order = \"last\"   ) |>   glimpse() ## Rows: ?? ## Columns: 5 ## Database: DuckDB v1.1.1 [unknown@Linux 6.5.0-1025-azure:R 4.4.1/:memory:] ## $ cohort_definition_id <int> 1 ## $ subject_id           <int> 1 ## $ cohort_start_date    <date> 2020-02-01 ## $ cohort_end_date      <date> 2020-02-15 ## $ cohort_1_m90_to_90   <date> 2020-02-10"},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/articles/cohort-intersect.html","id":"naming-conventions-for-new-variables","dir":"Articles","previous_headings":"","what":"Naming conventions for new variables","title":"Adding cohort intersections","text":"One last option relates naming convention used new variables. can instead choose specific name (work one new variable added, otherwise get error avoid duplicate names). direction also include estimate type name. useful, example, ’re adding multiple different types intersection values.","code":"cdm$cohort1 %>%   addCohortIntersectDate(     targetCohortTable = \"cohort2\",     indexDate = \"cohort_start_date\",     targetDate = \"cohort_start_date\",     window = list(c(-90, 90)),     order = \"last\",     nameStyle = \"{cohort_name}_{window_name}\"   ) |>   glimpse() ## Rows: ?? ## Columns: 5 ## Database: DuckDB v1.1.1 [unknown@Linux 6.5.0-1025-azure:R 4.4.1/:memory:] ## $ cohort_definition_id <int> 1 ## $ subject_id           <int> 1 ## $ cohort_start_date    <date> 2020-02-01 ## $ cohort_end_date      <date> 2020-02-15 ## $ cohort_1_m90_to_90   <date> 2020-02-10 cdm$cohort1 %>%   addCohortIntersectDate(     targetCohortTable = \"cohort2\",     indexDate = \"cohort_start_date\",     targetDate = \"cohort_start_date\",     window = list(c(-90, 90)),     order = \"last\",     nameStyle = \"my_new_variable\"   ) |>   glimpse() ## Rows: ?? ## Columns: 5 ## Database: DuckDB v1.1.1 [unknown@Linux 6.5.0-1025-azure:R 4.4.1/:memory:] ## $ cohort_definition_id <int> 1 ## $ subject_id           <int> 1 ## $ cohort_start_date    <date> 2020-02-01 ## $ cohort_end_date      <date> 2020-02-15 ## $ my_new_variable      <date> 2020-02-10 cdm$cohort1 |>   addCohortIntersectDate(     targetCohortTable = \"cohort2\",     indexDate = \"cohort_start_date\",     targetDate = \"cohort_start_date\",     window = list(c(-90, 90)),     order = \"last\",     nameStyle = \"{cohort_name}_{window_name}_{value}\"   ) |>   addCohortIntersectDays(     targetCohortTable = \"cohort2\",     indexDate = \"cohort_start_date\",     targetDate = \"cohort_start_date\",     window = list(c(-90, 90)),     order = \"last\",     nameStyle = \"{cohort_name}_{window_name}_{value}\"   ) |>   glimpse() ## Rows: ?? ## Columns: 6 ## Database: DuckDB v1.1.1 [unknown@Linux 6.5.0-1025-azure:R 4.4.1/:memory:] ## $ cohort_definition_id    <int> 1 ## $ subject_id              <int> 1 ## $ cohort_start_date       <date> 2020-02-01 ## $ cohort_end_date         <date> 2020-02-15 ## $ cohort_1_m90_to_90_date <date> 2020-02-10 ## $ cohort_1_m90_to_90_days <dbl> 9"},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/articles/concept-intersect.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Adding concept intersections","text":"Concept sets play important role working data format OMOP CDM. can used create cohorts , ’ve seen previous vignette, can identify intersections cohorts. PatientProfiles adds another option working concept sets use adding associated variables directly without first create cohort. important note, explained , results may differ generating cohort identifying intersections two cohorts compared working directly concept sets. creation cohorts involve collapsing overlapping records well imposing certain requirements including records observed individuals observation period. adding variables based concept sets working directly record-level data OMOP CDM clinical tables.","code":""},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/articles/concept-intersect.html","id":"adding-variables-from-concept-sets","dir":"Articles","previous_headings":"","what":"Adding variables from concept sets","title":"Adding concept intersections","text":"vignette ’ll use Eunomia synthetic dataset. First lets create cohort interest, individuals ankle sprain. Now let’s say ’re interested summarising use acetaminophen among ankle sprain cohort. can start identifying relevant concepts. codes acetaminophen can create variables based . cohort intersections, PatientProfiles provides four types functions concept intersections. First, can add binary flag variable indicating whether individual record acetaminophen day ankle sprain 30 days afterwards. Second, can count number records acetaminophen window individual. Third, identify first start date acetaminophen window. fourth, can get number days start date acetaminophen window.","code":"#>  #> Download completed! library(CDMConnector) library(CodelistGenerator) library(PatientProfiles) library(dplyr) #>  #> Attaching package: 'dplyr' #> The following objects are masked from 'package:stats': #>  #>     filter, lag #> The following objects are masked from 'package:base': #>  #>     intersect, setdiff, setequal, union library(ggplot2)  con <- DBI::dbConnect(duckdb::duckdb(),   dbdir = CDMConnector::eunomia_dir() ) #> Creating CDM database /tmp/RtmpG6uAch/GiBleed_5.3.zip cdm <- CDMConnector::cdm_from_con(con,   cdm_schem = \"main\",   write_schema = \"main\" ) #> Note: method with signature 'DBIConnection#Id' chosen for function 'dbExistsTable', #>  target signature 'duckdb_connection#Id'. #>  \"duckdb_connection#ANY\" would also be valid  cdm <- generateConceptCohortSet(   cdm = cdm,   name = \"ankle_sprain\",   conceptSet = list(\"ankle_sprain\" = 81151),   end = \"event_end_date\",   limit = \"all\",   overwrite = TRUE ) #> Warning: ! 3 casted column in ankle_sprain (cohort_attrition) as do not match expected #>   column type: #> • `reason_id` from numeric to integer #> • `excluded_records` from numeric to integer #> • `excluded_subjects` from numeric to integer #> Warning: ! 1 casted column in ankle_sprain (cohort_codelist) as do not match expected #>   column type: #> • `concept_id` from numeric to integer  cdm$ankle_sprain #> # Source:   table<main.ankle_sprain> [?? x 4] #> # Database: DuckDB v1.1.1 [unknown@Linux 6.5.0-1025-azure:R 4.4.1//tmp/RtmpG6uAch/file1b444f30ab69.duckdb] #>    cohort_definition_id subject_id cohort_start_date cohort_end_date #>                   <int>      <int> <date>            <date>          #>  1                    1        445 1915-09-01        1915-09-15      #>  2                    1        573 2013-07-17        2013-08-14      #>  3                    1        655 2000-04-29        2000-05-13      #>  4                    1       1110 2019-01-14        2019-01-14      #>  5                    1       1397 1986-01-31        1986-02-14      #>  6                    1       1427 1973-06-07        1973-06-28      #>  7                    1       1520 1963-06-28        1963-07-26      #>  8                    1       1569 1957-05-17        1957-06-07      #>  9                    1       1769 1986-05-25        1986-06-22      #> 10                    1       2004 1987-01-08        1987-02-12      #> # ℹ more rows acetaminophen_cs <- getDrugIngredientCodes(   cdm = cdm,   name = c(\"acetaminophen\") )  acetaminophen_cs #>  #> ── 1 codelist ────────────────────────────────────────────────────────────────── #>  #> - 161_acetaminophen (7 codes) cdm$ankle_sprain %>%   addConceptIntersectFlag(     conceptSet = acetaminophen_cs,     indexDate = \"cohort_start_date\",     window = c(0, 30)   ) %>%   dplyr::glimpse() #> Rows: ?? #> Columns: 5 #> Database: DuckDB v1.1.1 [unknown@Linux 6.5.0-1025-azure:R 4.4.1//tmp/RtmpG6uAch/file1b444f30ab69.duckdb] #> $ cohort_definition_id        <int> 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, … #> $ subject_id                  <int> 655, 1769, 2004, 2087, 2927, 4881, 408, 69… #> $ cohort_start_date           <date> 2000-04-29, 1986-05-25, 1987-01-08, 1974-… #> $ cohort_end_date             <date> 2000-05-13, 1986-06-22, 1987-02-12, 1974-… #> $ `161_acetaminophen_0_to_30` <dbl> 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, … cdm$ankle_sprain %>%   addConceptIntersectCount(     conceptSet = acetaminophen_cs,     indexDate = \"cohort_start_date\",     window = c(0, 30)   ) %>%   dplyr::glimpse() #> Rows: ?? #> Columns: 5 #> Database: DuckDB v1.1.1 [unknown@Linux 6.5.0-1025-azure:R 4.4.1//tmp/RtmpG6uAch/file1b444f30ab69.duckdb] #> $ cohort_definition_id        <int> 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, … #> $ subject_id                  <int> 655, 1769, 2004, 2087, 2927, 4881, 408, 69… #> $ cohort_start_date           <date> 2000-04-29, 1986-05-25, 1987-01-08, 1974-… #> $ cohort_end_date             <date> 2000-05-13, 1986-06-22, 1987-02-12, 1974-… #> $ `161_acetaminophen_0_to_30` <dbl> 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, … cdm$ankle_sprain %>%   addConceptIntersectDate(     conceptSet = acetaminophen_cs,     indexDate = \"cohort_start_date\",     window = c(0, 30),     order = \"first\"   ) %>%   dplyr::glimpse() #> Rows: ?? #> Columns: 5 #> Database: DuckDB v1.1.1 [unknown@Linux 6.5.0-1025-azure:R 4.4.1//tmp/RtmpG6uAch/file1b444f30ab69.duckdb] #> $ cohort_definition_id        <int> 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, … #> $ subject_id                  <int> 655, 1520, 1769, 2004, 2087, 2927, 4881, 5… #> $ cohort_start_date           <date> 2000-04-29, 1963-06-28, 1986-05-25, 1987-… #> $ cohort_end_date             <date> 2000-05-13, 1963-07-26, 1986-06-22, 1987-… #> $ `161_acetaminophen_0_to_30` <date> 2000-04-29, 1963-06-28, 1986-05-25, 1987-… cdm$ankle_sprain %>%   addConceptIntersectDays(     conceptSet = acetaminophen_cs,     indexDate = \"cohort_start_date\",     window = c(0, 30),     order = \"first\"   ) %>%   dplyr::glimpse() #> Rows: ?? #> Columns: 5 #> Database: DuckDB v1.1.1 [unknown@Linux 6.5.0-1025-azure:R 4.4.1//tmp/RtmpG6uAch/file1b444f30ab69.duckdb] #> $ cohort_definition_id        <int> 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, … #> $ subject_id                  <int> 655, 1520, 1769, 2004, 2087, 2927, 4881, 5… #> $ cohort_start_date           <date> 2000-04-29, 1963-06-28, 1986-05-25, 1987-… #> $ cohort_end_date             <date> 2000-05-13, 1963-07-26, 1986-06-22, 1987-… #> $ `161_acetaminophen_0_to_30` <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, …"},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/articles/concept-intersect.html","id":"adding-multiple-concept-based-variables","dir":"Articles","previous_headings":"","what":"Adding multiple concept based variables","title":"Adding concept intersections","text":"can add one variable time using functions. example, might want add variables multiple time windows. might want get variables multiple drug ingredients interest.","code":"cdm$ankle_sprain %>%   addConceptIntersectFlag(     conceptSet = acetaminophen_cs,     indexDate = \"cohort_start_date\",     window = list(       c(-Inf, -1),       c(0, 0),       c(1, Inf)     )   ) %>%   dplyr::glimpse() #> Rows: ?? #> Columns: 7 #> Database: DuckDB v1.1.1 [unknown@Linux 6.5.0-1025-azure:R 4.4.1//tmp/RtmpG6uAch/file1b444f30ab69.duckdb] #> $ cohort_definition_id           <int> 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, … #> $ subject_id                     <int> 445, 655, 1110, 1397, 1427, 1569, 1769,… #> $ cohort_start_date              <date> 1915-09-01, 2000-04-29, 2019-01-14, 19… #> $ cohort_end_date                <date> 1915-09-15, 2000-05-13, 2019-01-14, 19… #> $ `161_acetaminophen_minf_to_m1` <dbl> 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, … #> $ `161_acetaminophen_0_to_0`     <dbl> 0, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, … #> $ `161_acetaminophen_1_to_inf`   <dbl> 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, … meds_cs <- getDrugIngredientCodes(   cdm = cdm,   name = c(     \"acetaminophen\",     \"amoxicillin\",     \"aspirin\",     \"heparin\",     \"morphine\",     \"oxycodone\",     \"warfarin\"   ) )  cdm$ankle_sprain %>%   addConceptIntersectFlag(     conceptSet = meds_cs,     indexDate = \"cohort_start_date\",     window = list(       c(-Inf, -1),       c(0, 0)     )   ) %>%   dplyr::glimpse() #> Rows: ?? #> Columns: 18 #> Database: DuckDB v1.1.1 [unknown@Linux 6.5.0-1025-azure:R 4.4.1//tmp/RtmpG6uAch/file1b444f30ab69.duckdb] #> $ cohort_definition_id           <int> 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, … #> $ subject_id                     <int> 871, 806, 1097, 5051, 1918, 403, 1632, … #> $ cohort_start_date              <date> 2002-10-20, 1962-07-02, 2012-02-24, 19… #> $ cohort_end_date                <date> 2002-11-03, 1962-07-30, 2012-03-09, 19… #> $ `5224_heparin_minf_to_m1`      <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, … #> $ `7052_morphine_minf_to_m1`     <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, … #> $ `7804_oxycodone_minf_to_m1`    <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, … #> $ `161_acetaminophen_minf_to_m1` <dbl> 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, … #> $ `1191_aspirin_minf_to_m1`      <dbl> 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, … #> $ `723_amoxicillin_minf_to_m1`   <dbl> 0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, … #> $ `11289_warfarin_minf_to_m1`    <dbl> 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, … #> $ `161_acetaminophen_0_to_0`     <dbl> 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, … #> $ `1191_aspirin_0_to_0`          <dbl> 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, … #> $ `723_amoxicillin_0_to_0`       <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, … #> $ `11289_warfarin_0_to_0`        <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, … #> $ `5224_heparin_0_to_0`          <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, … #> $ `7052_morphine_0_to_0`         <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, … #> $ `7804_oxycodone_0_to_0`        <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, …"},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/articles/concept-intersect.html","id":"cohort-based-versus-concept-based-intersections","dir":"Articles","previous_headings":"","what":"Cohort-based versus concept-based intersections","title":"Adding concept intersections","text":"previous vignette saw can add intersection variable using cohort created. Meanwhile vignette see can instead create intersection variable using concept set directly. important note circumstances two approaches can lead different results. creating cohort combine overlapping records, cohort entries overlap. Thus adding intersection count, addCohortIntersectCount() return count cohort entries window interest addConceptIntersectCount() return count records withing window. can see impact acetaminophen example data , slightly records cohort entries.  Additional differences cohort concept set intersections may also result cohort table rules. example, cohort tables typically omit records occur outside individual´s observation time (defined observation period window). records, however, excluded adding concept based intersection.","code":"acetaminophen_cs <- getDrugIngredientCodes(   cdm = cdm,   name = c(\"acetaminophen\") )  cdm <- generateConceptCohortSet(   cdm = cdm,   name = \"acetaminophen\",   conceptSet = acetaminophen_cs,   end = \"event_end_date\",   limit = \"all\" ) #> Warning: ! 3 casted column in acetaminophen (cohort_attrition) as do not match expected #>   column type: #> • `reason_id` from numeric to integer #> • `excluded_records` from numeric to integer #> • `excluded_subjects` from numeric to integer  dplyr::bind_rows(   cdm$ankle_sprain |>     addCohortIntersectCount(       targetCohortTable = \"acetaminophen\",       window = c(-Inf, Inf)     ) |>     dplyr::group_by(`161_acetaminophen_minf_to_inf`) |>     dplyr::tally() |>     dplyr::collect() |>     dplyr::arrange(desc(`161_acetaminophen_minf_to_inf`)) |>     dplyr::mutate(type = \"cohort\"),   cdm$ankle_sprain |>     addConceptIntersectCount(       conceptSet = acetaminophen_cs,       window = c(-Inf, Inf)     ) |>     dplyr::group_by(`161_acetaminophen_minf_to_inf`) |>     dplyr::tally() |>     dplyr::collect() |>     dplyr::arrange(desc(`161_acetaminophen_minf_to_inf`)) |>     dplyr::mutate(type = \"concept_set\") ) |>   ggplot() +   geom_col(aes(`161_acetaminophen_minf_to_inf`, n, fill = type),     position = \"dodge\"   ) +   theme_bw() +   theme(     legend.title = element_blank(),     legend.position = \"top\"   )"},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/articles/demographics.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Adding patient demographics","text":"OMOP CDM person-centric model. person table contains records uniquely identify individual along demographic information. create mock CDM reference , standard, person table contains fields indicate individual’s date birth, gender, race, ethnicity. , except date birth, represented concept ID (person table contains one record per person fields treated time-invariant). well person table, every CDM reference include observation period table. table contains spans times individual considered observation. Individuals can multiple observation periods, overlap. performing analyses often interested working person observation period tables identify individuals’ characteristics date interest. PatientProfiles provides number functions can help us .","code":"library(PatientProfiles) library(duckdb) library(dplyr)  cdm <- mockPatientProfiles(numberIndividuals = 10000)  cdm$person %>%   dplyr::glimpse() ## Rows: ?? ## Columns: 5 ## Database: DuckDB v1.1.1 [unknown@Linux 6.5.0-1025-azure:R 4.4.1/:memory:] ## $ person_id            <int> 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15… ## $ gender_concept_id    <int> 8532, 8532, 8507, 8532, 8532, 8507, 8532, 8532, 8… ## $ year_of_birth        <int> 1940, 1952, 1958, 1906, 1950, 1917, 1967, 1972, 1… ## $ race_concept_id      <int> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0… ## $ ethnicity_concept_id <int> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0… cdm$observation_period %>%   dplyr::glimpse() ## Rows: ?? ## Columns: 5 ## Database: DuckDB v1.1.1 [unknown@Linux 6.5.0-1025-azure:R 4.4.1/:memory:] ## $ person_id                     <int> 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 1… ## $ observation_period_start_date <date> 1940-01-01, 1952-01-01, 1958-01-01, 190… ## $ observation_period_end_date   <date> 1969-04-09, 1977-04-26, 2000-12-04, 193… ## $ period_type_concept_id        <int> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0… ## $ observation_period_id         <int> 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 1…"},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/articles/demographics.html","id":"adding-characteristics-to-omop-cdm-tables","dir":"Articles","previous_headings":"","what":"Adding characteristics to OMOP CDM tables","title":"Adding patient demographics","text":"Let’s say ’re working condition occurrence table. table contains diagnoses individuals might, example, want identify age date diagnosis. involves linking back person table contains date birth (split across three different columns). PatientProfiles provides simple function . addAge() add new column table containing patient’s age relative specified index date. well calculating age, can also create age groups time. create three age groups: aged 0 17, 18 65, 66 older. default, adding age new column called “age” calculated using available information date birth contained person. can though also alter defaults. , example, impose month birth January day birth 1st individuals. well age diagnosis, might also want identify patients’ sex. PatientProfiles provides addSex() function add us. treated time-invariant, specify index variable. Similarly, also identify whether individual observation time diagnosis (.e. observation period overlaps diagnosis date), well identifying much prior observation time date much following . functions work information observation table, important note results based observation period index date falls within. Moreover, patient observation specified date, addPriorObservation() addFutureObservation() functions return NA. checking whether someone observation default checking whether someone observation index date. though expand consider window time around date. example add variable indicating whether someone observation 180 days index date 30 days following . can also specify window require individual present days within . add variable indicating whether individual observation least year future,","code":"cdm$condition_occurrence %>%   glimpse() ## Rows: ?? ## Columns: 6 ## Database: DuckDB v1.1.1 [unknown@Linux 6.5.0-1025-azure:R 4.4.1/:memory:] ## $ person_id                 <int> 2284, 3335, 9438, 6762, 9433, 9393, 6360, 36… ## $ condition_start_date      <date> 1918-10-05, 1934-12-06, 1945-12-27, 1944-09… ## $ condition_end_date        <date> 1925-01-30, 1954-09-30, 1947-08-23, 1947-08… ## $ condition_occurrence_id   <int> 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 1… ## $ condition_concept_id      <int> 1, 2, 2, 7, 6, 9, 8, 3, 10, 5, 3, 2, 5, 5, 3… ## $ condition_type_concept_id <int> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,… cdm$condition_occurrence <- cdm$condition_occurrence %>%   addAge(indexDate = \"condition_start_date\")  cdm$condition_occurrence %>%   glimpse() ## Rows: ?? ## Columns: 7 ## Database: DuckDB v1.1.1 [unknown@Linux 6.5.0-1025-azure:R 4.4.1/:memory:] ## $ person_id                 <int> 2284, 3335, 9438, 6762, 9433, 9393, 6360, 36… ## $ condition_start_date      <date> 1918-10-05, 1934-12-06, 1945-12-27, 1944-09… ## $ condition_end_date        <date> 1925-01-30, 1954-09-30, 1947-08-23, 1947-08… ## $ condition_occurrence_id   <int> 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 1… ## $ condition_concept_id      <int> 1, 2, 2, 7, 6, 9, 8, 3, 10, 5, 3, 2, 5, 5, 3… ## $ condition_type_concept_id <int> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,… ## $ age                       <int> 10, 8, 0, 10, 22, 20, 23, 8, 23, 42, 34, 7, … cdm$condition_occurrence <- cdm$condition_occurrence %>%   addAge(     indexDate = \"condition_start_date\",     ageGroup = list(       \"0 to 17\" = c(0, 17),       \"18 to 65\" = c(18, 65),       \">= 66\" = c(66, Inf)     )   )  cdm$condition_occurrence %>%   glimpse() ## Rows: ?? ## Columns: 8 ## Database: DuckDB v1.1.1 [unknown@Linux 6.5.0-1025-azure:R 4.4.1/:memory:] ## $ person_id                 <int> 74, 266, 318, 410, 427, 434, 450, 457, 468, … ## $ condition_start_date      <date> 1969-08-01, 1936-01-11, 1952-08-18, 1957-01… ## $ condition_end_date        <date> 1978-06-27, 1959-01-10, 1967-10-03, 1957-09… ## $ condition_occurrence_id   <int> 21, 81, 88, 105, 109, 117, 32, 41, 36, 82, 7… ## $ condition_concept_id      <int> 2, 1, 1, 8, 10, 3, 3, 9, 1, 1, 5, 2, 6, 3, 7… ## $ condition_type_concept_id <int> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,… ## $ age                       <int> 1, 9, 21, 23, 29, 26, 7, 15, 8, 6, 14, 26, 2… ## $ age_group                 <chr> \"0 to 17\", \"0 to 17\", \"18 to 65\", \"18 to 65\"… cdm$condition_occurrence <- cdm$condition_occurrence %>%   addAge(     indexDate = \"condition_start_date\",     ageName = \"age_from_year_of_birth\",     ageMissingMonth = 1,     ageMissingDay = 1,     ageImposeMonth = TRUE,     ageImposeDay = TRUE   )  cdm$condition_occurrence %>%   glimpse() ## Rows: ?? ## Columns: 9 ## Database: DuckDB v1.1.1 [unknown@Linux 6.5.0-1025-azure:R 4.4.1/:memory:] ## $ person_id                 <int> 74, 266, 318, 410, 427, 434, 450, 457, 468, … ## $ condition_start_date      <date> 1969-08-01, 1936-01-11, 1952-08-18, 1957-01… ## $ condition_end_date        <date> 1978-06-27, 1959-01-10, 1967-10-03, 1957-09… ## $ condition_occurrence_id   <int> 21, 81, 88, 105, 109, 117, 32, 41, 36, 82, 7… ## $ condition_concept_id      <int> 2, 1, 1, 8, 10, 3, 3, 9, 1, 1, 5, 2, 6, 3, 7… ## $ condition_type_concept_id <int> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,… ## $ age                       <int> 1, 9, 21, 23, 29, 26, 7, 15, 8, 6, 14, 26, 2… ## $ age_group                 <chr> \"0 to 17\", \"0 to 17\", \"18 to 65\", \"18 to 65\"… ## $ age_from_year_of_birth    <int> 1, 9, 21, 23, 29, 26, 7, 15, 8, 6, 14, 26, 2… cdm$condition_occurrence <- cdm$condition_occurrence %>%   addSex()  cdm$condition_occurrence %>%   glimpse() ## Rows: ?? ## Columns: 10 ## Database: DuckDB v1.1.1 [unknown@Linux 6.5.0-1025-azure:R 4.4.1/:memory:] ## $ person_id                 <int> 74, 266, 318, 410, 427, 434, 450, 457, 468, … ## $ condition_start_date      <date> 1969-08-01, 1936-01-11, 1952-08-18, 1957-01… ## $ condition_end_date        <date> 1978-06-27, 1959-01-10, 1967-10-03, 1957-09… ## $ condition_occurrence_id   <int> 21, 81, 88, 105, 109, 117, 32, 41, 36, 82, 1… ## $ condition_concept_id      <int> 2, 1, 1, 8, 10, 3, 3, 9, 1, 1, 2, 6, 3, 5, 9… ## $ condition_type_concept_id <int> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,… ## $ age                       <int> 1, 9, 21, 23, 29, 26, 7, 15, 8, 6, 26, 20, 0… ## $ age_group                 <chr> \"0 to 17\", \"0 to 17\", \"18 to 65\", \"18 to 65\"… ## $ age_from_year_of_birth    <int> 1, 9, 21, 23, 29, 26, 7, 15, 8, 6, 26, 20, 0… ## $ sex                       <chr> \"Female\", \"Male\", \"Female\", \"Female\", \"Male\"… cdm$condition_occurrence <- cdm$condition_occurrence %>%   addInObservation(indexDate = \"condition_start_date\") %>%   addPriorObservation(indexDate = \"condition_start_date\") %>%   addFutureObservation(indexDate = \"condition_start_date\")  cdm$condition_occurrence %>%   glimpse() ## Rows: ?? ## Columns: 13 ## Database: DuckDB v1.1.1 [unknown@Linux 6.5.0-1025-azure:R 4.4.1/:memory:] ## $ person_id                 <int> 74, 266, 318, 410, 427, 434, 450, 457, 468, … ## $ condition_start_date      <date> 1969-08-01, 1936-01-11, 1952-08-18, 1957-01… ## $ condition_end_date        <date> 1978-06-27, 1959-01-10, 1967-10-03, 1957-09… ## $ condition_occurrence_id   <int> 21, 81, 88, 105, 109, 117, 32, 41, 36, 82, 1… ## $ condition_concept_id      <int> 2, 1, 1, 8, 10, 3, 3, 9, 1, 1, 2, 6, 3, 5, 9… ## $ condition_type_concept_id <int> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,… ## $ age                       <int> 1, 9, 21, 23, 29, 26, 7, 15, 8, 6, 26, 20, 0… ## $ age_group                 <chr> \"0 to 17\", \"0 to 17\", \"18 to 65\", \"18 to 65\"… ## $ age_from_year_of_birth    <int> 1, 9, 21, 23, 29, 26, 7, 15, 8, 6, 26, 20, 0… ## $ sex                       <chr> \"Female\", \"Male\", \"Female\", \"Female\", \"Male\"… ## $ in_observation            <int> 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,… ## $ prior_observation         <int> 578, 3297, 7900, 8409, 10879, 9565, 2697, 57… ## $ future_observation        <int> 14672, 10185, 12460, 1601, 2901, 4798, 9016,… cdm$condition_occurrence %>%   addInObservation(     indexDate = \"condition_start_date\",     window = c(-180, 30)   ) %>%   glimpse() ## Rows: ?? ## Columns: 13 ## Database: DuckDB v1.1.1 [unknown@Linux 6.5.0-1025-azure:R 4.4.1/:memory:] ## $ person_id                 <int> 74, 266, 318, 410, 427, 434, 450, 457, 468, … ## $ condition_start_date      <date> 1969-08-01, 1936-01-11, 1952-08-18, 1957-01… ## $ condition_end_date        <date> 1978-06-27, 1959-01-10, 1967-10-03, 1957-09… ## $ condition_occurrence_id   <int> 21, 81, 88, 105, 109, 117, 32, 41, 36, 82, 1… ## $ condition_concept_id      <int> 2, 1, 1, 8, 10, 3, 3, 9, 1, 1, 2, 6, 3, 5, 9… ## $ condition_type_concept_id <int> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,… ## $ age                       <int> 1, 9, 21, 23, 29, 26, 7, 15, 8, 6, 26, 20, 0… ## $ age_group                 <chr> \"0 to 17\", \"0 to 17\", \"18 to 65\", \"18 to 65\"… ## $ age_from_year_of_birth    <int> 1, 9, 21, 23, 29, 26, 7, 15, 8, 6, 26, 20, 0… ## $ sex                       <chr> \"Female\", \"Male\", \"Female\", \"Female\", \"Male\"… ## $ prior_observation         <int> 578, 3297, 7900, 8409, 10879, 9565, 2697, 57… ## $ future_observation        <int> 14672, 10185, 12460, 1601, 2901, 4798, 9016,… ## $ in_observation            <int> 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,… cdm$condition_occurrence %>%   addInObservation(     indexDate = \"condition_start_date\",     window = c(365, Inf),     completeInterval = FALSE   ) %>%   glimpse() ## Rows: ?? ## Columns: 13 ## Database: DuckDB v1.1.1 [unknown@Linux 6.5.0-1025-azure:R 4.4.1/:memory:] ## $ person_id                 <int> 74, 266, 318, 410, 427, 434, 450, 457, 468, … ## $ condition_start_date      <date> 1969-08-01, 1936-01-11, 1952-08-18, 1957-01… ## $ condition_end_date        <date> 1978-06-27, 1959-01-10, 1967-10-03, 1957-09… ## $ condition_occurrence_id   <int> 21, 81, 88, 105, 109, 117, 32, 41, 36, 82, 1… ## $ condition_concept_id      <int> 2, 1, 1, 8, 10, 3, 3, 9, 1, 1, 2, 6, 3, 5, 9… ## $ condition_type_concept_id <int> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,… ## $ age                       <int> 1, 9, 21, 23, 29, 26, 7, 15, 8, 6, 26, 20, 0… ## $ age_group                 <chr> \"0 to 17\", \"0 to 17\", \"18 to 65\", \"18 to 65\"… ## $ age_from_year_of_birth    <int> 1, 9, 21, 23, 29, 26, 7, 15, 8, 6, 26, 20, 0… ## $ sex                       <chr> \"Female\", \"Male\", \"Female\", \"Female\", \"Male\"… ## $ prior_observation         <int> 578, 3297, 7900, 8409, 10879, 9565, 2697, 57… ## $ future_observation        <int> 14672, 10185, 12460, 1601, 2901, 4798, 9016,… ## $ in_observation            <int> 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,…"},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/articles/demographics.html","id":"adding-characteristics-to-a-cohort-tables","dir":"Articles","previous_headings":"","what":"Adding characteristics to a cohort tables","title":"Adding patient demographics","text":"functions can used standard OMOP CDM tables cohort tables. Note default index date functions “cohort_start_date” can now omit .","code":"cdm$cohort1 %>%   glimpse() ## Rows: ?? ## Columns: 4 ## Database: DuckDB v1.1.1 [unknown@Linux 6.5.0-1025-azure:R 4.4.1/:memory:] ## $ cohort_definition_id <int> 1, 1, 1, 1, 2, 1, 3, 2, 2, 2, 1, 3, 3, 1, 3, 2, 3… ## $ subject_id           <int> 5853, 1622, 8574, 6414, 7299, 4793, 6541, 1029, 5… ## $ cohort_start_date    <date> 1964-06-05, 1927-03-08, 1955-08-04, 1963-06-12, … ## $ cohort_end_date      <date> 1964-12-11, 1934-04-21, 1958-05-01, 1983-11-26, … cdm$cohort1 <- cdm$cohort1 %>%   addAge(ageGroup = list(     \"0 to 17\" = c(0, 17),     \"18 to 65\" = c(18, 65),     \">= 66\" = c(66, Inf)   )) %>%   addSex() %>%   addInObservation() %>%   addPriorObservation() %>%   addFutureObservation()  cdm$cohort1 %>%   glimpse() ## Rows: ?? ## Columns: 10 ## Database: DuckDB v1.1.1 [unknown@Linux 6.5.0-1025-azure:R 4.4.1/:memory:] ## $ cohort_definition_id <int> 3, 2, 1, 2, 1, 3, 2, 2, 1, 2, 3, 3, 3, 2, 1, 3, 3… ## $ subject_id           <int> 1, 2, 3, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17,… ## $ cohort_start_date    <date> 1957-08-12, 1957-03-05, 1985-01-22, 1923-05-21, … ## $ cohort_end_date      <date> 1966-11-16, 1960-04-16, 1999-11-20, 1948-03-23, … ## $ age                  <int> 17, 5, 27, 6, 22, 10, 2, 11, 4, 21, 10, 2, 11, 12… ## $ age_group            <chr> \"0 to 17\", \"0 to 17\", \"18 to 65\", \"0 to 17\", \"18 … ## $ sex                  <chr> \"Female\", \"Female\", \"Male\", \"Male\", \"Female\", \"Fe… ## $ in_observation       <int> 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1… ## $ prior_observation    <int> 6433, 1890, 9883, 2331, 8400, 3929, 1061, 4123, 1… ## $ future_observation   <int> 4258, 7357, 5795, 9935, 672, 6928, 4450, 13069, 8…"},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/articles/demographics.html","id":"getting-multiple-characteristics-at-once","dir":"Articles","previous_headings":"","what":"Getting multiple characteristics at once","title":"Adding patient demographics","text":"functions, chained together, fetch related information one one. cases interested adding multiple characteristics, can add time using general addDemographics() functions. efficient adding characteristics requires fewer joins table interest person observation period tables. small mock dataset see small improvement performance, difference become much noticeable working real data typically far larger.","code":"cdm$cohort2 %>%   glimpse() ## Rows: ?? ## Columns: 4 ## Database: DuckDB v1.1.1 [unknown@Linux 6.5.0-1025-azure:R 4.4.1/:memory:] ## $ cohort_definition_id <int> 3, 3, 1, 3, 1, 1, 2, 3, 3, 1, 2, 1, 2, 2, 1, 1, 3… ## $ subject_id           <int> 6688, 3035, 5292, 1351, 8144, 699, 8733, 1007, 68… ## $ cohort_start_date    <date> 1999-06-28, 1977-03-24, 1931-10-19, 1993-07-08, … ## $ cohort_end_date      <date> 2019-08-31, 1988-06-17, 1937-06-27, 2003-11-19, … tictoc::tic() cdm$cohort2 %>%   addAge(ageGroup = list(     \"0 to 17\" = c(0, 17),     \"18 to 65\" = c(18, 65),     \">= 66\" = c(66, Inf)   )) %>%   addSex() %>%   addInObservation() %>%   addPriorObservation() %>%   addFutureObservation() ## # Source:   table<og_024_1729812756> [?? x 10] ## # Database: DuckDB v1.1.1 [unknown@Linux 6.5.0-1025-azure:R 4.4.1/:memory:] ##    cohort_definition_id subject_id cohort_start_date cohort_end_date   age ##                   <int>      <int> <date>            <date>          <int> ##  1                    2          1 1940-11-29        1959-10-09          0 ##  2                    3          2 1963-05-30        1977-03-31         11 ##  3                    2          3 1993-09-04        1995-07-27         35 ##  4                    3          4 1923-10-12        1926-04-27         17 ##  5                    3          5 1954-06-30        1955-12-24          4 ##  6                    2          6 1923-07-07        1940-06-01          6 ##  7                    3          7 1989-02-22        1991-02-24         22 ##  8                    2          8 1992-10-16        2017-04-23         20 ##  9                    3          9 1985-09-19        1997-05-06         12 ## 10                    3         10 1935-05-26        1936-02-06         12 ## # ℹ more rows ## # ℹ 5 more variables: age_group <chr>, sex <chr>, in_observation <int>, ## #   prior_observation <int>, future_observation <int> tictoc::toc() ## 1.17 sec elapsed tictoc::tic() cdm$cohort2 %>%   addDemographics(     age = TRUE,     ageName = \"age\",     ageGroup = list(       \"0 to 17\" = c(0, 17),       \"18 to 65\" = c(18, 65),       \">= 66\" = c(66, Inf)     ),     sex = TRUE,     sexName = \"sex\",     priorObservation = TRUE,     priorObservationName = \"prior_observation\",     futureObservation = FALSE,   ) %>%   glimpse() ## Rows: ?? ## Columns: 8 ## Database: DuckDB v1.1.1 [unknown@Linux 6.5.0-1025-azure:R 4.4.1/:memory:] ## $ cohort_definition_id <int> 2, 3, 2, 3, 3, 2, 3, 2, 3, 3, 2, 1, 3, 2, 3, 2, 3… ## $ subject_id           <int> 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 14, 15, 16… ## $ cohort_start_date    <date> 1940-11-29, 1963-05-30, 1993-09-04, 1923-10-12, … ## $ cohort_end_date      <date> 1959-10-09, 1977-03-31, 1995-07-27, 1926-04-27, … ## $ age                  <int> 0, 11, 35, 17, 4, 6, 22, 20, 12, 12, 14, 25, 2, 4… ## $ age_group            <chr> \"0 to 17\", \"0 to 17\", \"18 to 65\", \"0 to 17\", \"0 t… ## $ sex                  <chr> \"Female\", \"Female\", \"Male\", \"Female\", \"Female\", \"… ## $ prior_observation    <int> 333, 4167, 13030, 6493, 1641, 2378, 8088, 7594, 4… tictoc::toc() ## 0.46 sec elapsed"},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/articles/summarise.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Summarise result","text":"previous vignettes seen add patient level demographics (age, sex, prior observation, …) intersections cohorts , concepts tables. added several columns table interest may want summarise data summarised_result object using several different estimates.","code":""},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/articles/summarise.html","id":"variables-type","dir":"Articles","previous_headings":"Introduction","what":"Variables type","title":"Summarise result","text":"support different types variables, variable type assigned using dplyr::type_sum: Date: date dttm. Numeric: dbl drtn. Integer: int int64. Categorical: chr, fct ord. Logical: lgl.","code":""},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/articles/summarise.html","id":"estimates-names","dir":"Articles","previous_headings":"Introduction","what":"Estimates names","title":"Summarise result","text":"can summarise data using different estimates:","code":""},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/articles/summarise.html","id":"summarise-our-first-table","dir":"Articles","previous_headings":"","what":"Summarise our first table","title":"Summarise result","text":"Lets get started creating data going summarise: table (x) cohort first occurrences sinusitis, added: demographics; counts 3 ingredients, time prior time index date; flag indicating pharyngitis ; date first visit; , finally, time next visit. want summarise age stratified sex use tidyverse functions like: give us first insight differences age. output going standardised format. PatientProfiles built function : Allow get standardised output. wide range estimates can get. don’t worry functions supported database side (e.g. dbms support quantile function). example get information like using: can stratify results also “pharyngitis_before”: Note interaction term included, want include specify follows: can remove overall strata includeOverallStrata option: results model two levels grouping (group strata), can specify independently: can add remove number subjects records (person identifier found) counts counts parameter: want specify different groups estimates per different groups variables can use lists: example complete analysis :","code":"#>  #> Download completed! library(duckdb) #> Loading required package: DBI library(CDMConnector) library(PatientProfiles) library(dplyr) #>  #> Attaching package: 'dplyr' #> The following objects are masked from 'package:stats': #>  #>     filter, lag #> The following objects are masked from 'package:base': #>  #>     intersect, setdiff, setequal, union library(CodelistGenerator)  cdm <- cdmFromCon(   con = dbConnect(duckdb(), eunomia_dir()),   cdmSchema = \"main\",   writeSchema = \"main\" ) #> Creating CDM database /tmp/RtmpwJ82A5/GiBleed_5.3.zip #> Note: method with signature 'DBIConnection#Id' chosen for function 'dbExistsTable', #>  target signature 'duckdb_connection#Id'. #>  \"duckdb_connection#ANY\" would also be valid cdm <- generateConceptCohortSet(   cdm = cdm,   conceptSet = list(\"sinusitis\" = c(4294548, 4283893, 40481087, 257012)),   limit = \"first\",   name = \"my_cohort\" ) #> Warning: ! 3 casted column in my_cohort (cohort_attrition) as do not match expected #>   column type: #> • `reason_id` from numeric to integer #> • `excluded_records` from numeric to integer #> • `excluded_subjects` from numeric to integer #> Warning: ! 1 casted column in my_cohort (cohort_codelist) as do not match expected #>   column type: #> • `concept_id` from numeric to integer cdm <- generateConceptCohortSet(   cdm = cdm,   conceptSet = getDrugIngredientCodes(cdm = cdm, name = c(\"morphine\", \"aspirin\", \"oxycodone\")),   name = \"drugs\" ) #> Warning: ! 3 casted column in drugs (cohort_attrition) as do not match expected column #>   type: #> • `reason_id` from numeric to integer #> • `excluded_records` from numeric to integer #> • `excluded_subjects` from numeric to integer  x <- cdm$my_cohort |>   # add demographics variables   addDemographics() |>   # add number of counts per ingredient before and after index date   addCohortIntersectCount(     targetCohortTable = \"drugs\",     window = list(\"prior\" = c(-Inf, -1), \"future\" = c(1, Inf)),     nameStyle = \"{window_name}_{cohort_name}\"   ) |>   # add a flag regarding if they had a prior occurrence of pharyngitis   addConceptIntersectFlag(     conceptSet = list(pharyngitis = 4112343),     window = c(-Inf, -1),     nameStyle = \"pharyngitis_before\"   ) |>   # date fo the first visit for that individual   addTableIntersectDate(     tableName = \"visit_occurrence\",     window = c(-Inf, Inf),     nameStyle = \"first_visit\"   ) |>   # time till the next visit after sinusitis   addTableIntersectDays(     tableName = \"visit_occurrence\",     window = c(1, Inf),     nameStyle = \"days_to_next_visit\"   ) #> Warning: ! `codelist` contains numeric values, they are casted #> to integers.  x |>   glimpse() #> Rows: ?? #> Columns: 17 #> Database: DuckDB v1.1.1 [unknown@Linux 6.5.0-1025-azure:R 4.4.1//tmp/RtmpwJ82A5/file1bcfa4bae9c.duckdb] #> $ cohort_definition_id  <int> 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, … #> $ subject_id            <int> 1411, 733, 1511, 1892, 3887, 4520, 4886, 3752, 3… #> $ cohort_start_date     <date> 1969-02-19, 1961-04-29, 1986-01-12, 1978-10-13,… #> $ cohort_end_date       <date> 2018-12-18, 2018-08-30, 2019-05-19, 2018-09-11,… #> $ age                   <int> 3, 19, 20, 18, 19, 19, 23, 15, 53, 6, 20, 30, 16… #> $ sex                   <chr> \"Female\", \"Female\", \"Female\", \"Female\", \"Female\"… #> $ prior_observation     <int> 1177, 7177, 7567, 6665, 6998, 7146, 8708, 5828, … #> $ future_observation    <int> 18199, 20942, 12180, 14578, 16004, 18236, 10760,… #> $ prior_1191_aspirin    <dbl> 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, … #> $ prior_7052_morphine   <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, … #> $ future_7804_oxycodone <dbl> 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, … #> $ future_1191_aspirin   <dbl> 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, … #> $ prior_7804_oxycodone  <dbl> 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, … #> $ future_7052_morphine  <dbl> 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, … #> $ pharyngitis_before    <dbl> 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, … #> $ first_visit           <date> 1996-03-29, 1980-07-22, 2010-04-15, 2015-10-29,… #> $ days_to_next_visit    <dbl> 9900, 7024, 8859, 13530, 5418, 12839, 4678, 8801… x |>   group_by(sex) |>   summarise(mean_age = mean(age), sd_age = sd(age)) #> Warning: Missing values are always removed in SQL aggregation functions. #> Use `na.rm = TRUE` to silence this warning #> This warning is displayed once every 8 hours. #> # Source:   SQL [2 x 3] #> # Database: DuckDB v1.1.1 [unknown@Linux 6.5.0-1025-azure:R 4.4.1//tmp/RtmpwJ82A5/file1bcfa4bae9c.duckdb] #>   sex    mean_age sd_age #>   <chr>     <dbl>  <dbl> #> 1 Female     7.51   7.46 #> 2 Male       7.72   8.14 x |>   summariseResult(     strata = \"sex\",     variables = \"age\",     estimates = c(\"mean\", \"sd\"),     counts = FALSE   ) |>   select(strata_name, strata_level, variable_name, estimate_value) #> ℹ The following estimates will be computed: #> • age: mean, sd #> → Start summary of data, at 2024-10-24 23:32:53.746534 #>  #> ✔ Summary finished, at 2024-10-24 23:32:54.094143 #> # A tibble: 6 × 4 #>   strata_name strata_level variable_name estimate_value   #>   <chr>       <chr>        <chr>         <chr>            #> 1 overall     overall      age           7.61212346597248 #> 2 overall     overall      age           7.79743654397839 #> 3 sex         Female       age           7.5127644055434  #> 4 sex         Male         age           7.7154779969651  #> 5 sex         Female       age           7.45793686970358 #> 6 sex         Male         age           8.13712697581574 x |>   summariseResult(     strata = list(\"sex\", \"pharyngitis_before\"),     variables = \"age\",     estimates = c(\"mean\", \"sd\"),     counts = FALSE   ) |>   select(strata_name, strata_level, variable_name, estimate_value) #> ℹ The following estimates will be computed: #> • age: mean, sd #> → Start summary of data, at 2024-10-24 23:32:54.688499 #>  #> ✔ Summary finished, at 2024-10-24 23:32:55.25917 #> # A tibble: 10 × 4 #>    strata_name        strata_level variable_name estimate_value   #>    <chr>              <chr>        <chr>         <chr>            #>  1 overall            overall      age           7.61212346597248 #>  2 overall            overall      age           7.79743654397839 #>  3 sex                Female       age           7.5127644055434  #>  4 sex                Male         age           7.7154779969651  #>  5 sex                Female       age           7.45793686970358 #>  6 sex                Male         age           8.13712697581574 #>  7 pharyngitis_before 0            age           4.95620875824835 #>  8 pharyngitis_before 1            age           11.9442270058708 #>  9 pharyngitis_before 0            age           5.61220818358422 #> 10 pharyngitis_before 1            age           8.8527966629461 x |>   summariseResult(     strata = list(\"sex\", \"pharyngitis_before\", c(\"sex\", \"pharyngitis_before\")),     variables = \"age\",     estimates = c(\"mean\", \"sd\"),     counts = FALSE   ) |>   select(strata_name, strata_level, variable_name, estimate_value) |>   print(n = Inf) #> ℹ The following estimates will be computed: #> • age: mean, sd #> → Start summary of data, at 2024-10-24 23:32:55.850077 #>  #> ✔ Summary finished, at 2024-10-24 23:32:56.659276 #> # A tibble: 18 × 4 #>    strata_name                strata_level variable_name estimate_value   #>    <chr>                      <chr>        <chr>         <chr>            #>  1 overall                    overall      age           7.61212346597248 #>  2 overall                    overall      age           7.79743654397839 #>  3 sex                        Female       age           7.5127644055434  #>  4 sex                        Male         age           7.7154779969651  #>  5 sex                        Female       age           7.45793686970358 #>  6 sex                        Male         age           8.13712697581574 #>  7 pharyngitis_before         0            age           4.95620875824835 #>  8 pharyngitis_before         1            age           11.9442270058708 #>  9 pharyngitis_before         0            age           5.61220818358422 #> 10 pharyngitis_before         1            age           8.8527966629461  #> 11 sex &&& pharyngitis_before Female &&& 0 age           4.97596153846154 #> 12 sex &&& pharyngitis_before Female &&& 1 age           11.4285714285714 #> 13 sex &&& pharyngitis_before Male &&& 0   age           4.93652694610778 #> 14 sex &&& pharyngitis_before Male &&& 1   age           12.51966873706   #> 15 sex &&& pharyngitis_before Female &&& 0 age           5.61023639284453 #> 16 sex &&& pharyngitis_before Female &&& 1 age           8.22838499965833 #> 17 sex &&& pharyngitis_before Male &&& 0   age           5.61746547644658 #> 18 sex &&& pharyngitis_before Male &&& 1   age           9.47682947960302 x |>   summariseResult(     includeOverallStrata = FALSE,     strata = list(\"sex\", \"pharyngitis_before\"),     variables = \"age\",     estimates = c(\"mean\", \"sd\"),     counts = FALSE   ) |>   select(strata_name, strata_level, variable_name, estimate_value) |>   print(n = Inf) #> ℹ The following estimates will be computed: #> • age: mean, sd #> → Start summary of data, at 2024-10-24 23:32:57.262335 #>  #> ✔ Summary finished, at 2024-10-24 23:32:57.733939 #> # A tibble: 8 × 4 #>   strata_name        strata_level variable_name estimate_value   #>   <chr>              <chr>        <chr>         <chr>            #> 1 sex                Female       age           7.5127644055434  #> 2 sex                Male         age           7.7154779969651  #> 3 sex                Female       age           7.45793686970358 #> 4 sex                Male         age           8.13712697581574 #> 5 pharyngitis_before 0            age           4.95620875824835 #> 6 pharyngitis_before 1            age           11.9442270058708 #> 7 pharyngitis_before 0            age           5.61220818358422 #> 8 pharyngitis_before 1            age           8.8527966629461 x |>   addCohortName() |>   summariseResult(     group = \"cohort_name\",     includeOverallGroup = FALSE,     strata = list(\"sex\", \"pharyngitis_before\"),     includeOverallStrata = TRUE,     variables = \"age\",     estimates = c(\"mean\", \"sd\"),     counts = FALSE   ) |>   select(group_name, group_level, strata_name, strata_level, variable_name, estimate_value) |>   print(n = Inf) #> ℹ The following estimates will be computed: #> • age: mean, sd #> → Start summary of data, at 2024-10-24 23:32:58.515328 #>  #> ✔ Summary finished, at 2024-10-24 23:32:59.27934 #> # A tibble: 10 × 6 #>    group_name  group_level strata_name strata_level variable_name estimate_value #>    <chr>       <chr>       <chr>       <chr>        <chr>         <chr>          #>  1 cohort_name sinusitis   overall     overall      age           7.61212346597… #>  2 cohort_name sinusitis   overall     overall      age           7.79743654397… #>  3 cohort_name sinusitis   sex         Female       age           7.51276440554… #>  4 cohort_name sinusitis   sex         Male         age           7.71547799696… #>  5 cohort_name sinusitis   sex         Female       age           7.45793686970… #>  6 cohort_name sinusitis   sex         Male         age           8.13712697581… #>  7 cohort_name sinusitis   pharyngiti… 0            age           4.95620875824… #>  8 cohort_name sinusitis   pharyngiti… 1            age           11.9442270058… #>  9 cohort_name sinusitis   pharyngiti… 0            age           5.61220818358… #> 10 cohort_name sinusitis   pharyngiti… 1            age           8.85279666294… x |>   summariseResult(     variables = \"age\",     estimates = c(\"mean\", \"sd\"),     counts = TRUE   ) |>   select(strata_name, strata_level, variable_name, estimate_value) |>   print(n = Inf) #> ℹ The following estimates will be computed: #> • age: mean, sd #> → Start summary of data, at 2024-10-24 23:32:59.880702 #>  #> ✔ Summary finished, at 2024-10-24 23:33:00.100577 #> # A tibble: 4 × 4 #>   strata_name strata_level variable_name   estimate_value   #>   <chr>       <chr>        <chr>           <chr>            #> 1 overall     overall      number records  2689             #> 2 overall     overall      number subjects 2689             #> 3 overall     overall      age             7.61212346597248 #> 4 overall     overall      age             7.79743654397839 x |>   summariseResult(     strata = \"pharyngitis_before\",     includeOverallStrata = FALSE,     variables = list(c(\"age\", \"prior_observation\"), \"sex\"),     estimates = list(c(\"mean\", \"sd\"), c(\"count\", \"percentage\")),     counts = FALSE   ) |>   select(strata_name, strata_level, variable_name, estimate_value) |>   print(n = Inf) #> ℹ The following estimates will be computed: #> • age: mean, sd #> • prior_observation: mean, sd #> • sex: count, percentage #> → Start summary of data, at 2024-10-24 23:33:00.708486 #>  #> ✔ Summary finished, at 2024-10-24 23:33:01.101376 #> # A tibble: 16 × 4 #>    strata_name        strata_level variable_name     estimate_value   #>    <chr>              <chr>        <chr>             <chr>            #>  1 pharyngitis_before 0            age               4.95620875824835 #>  2 pharyngitis_before 1            age               11.9442270058708 #>  3 pharyngitis_before 0            age               5.61220818358422 #>  4 pharyngitis_before 1            age               8.8527966629461  #>  5 pharyngitis_before 0            sex               832              #>  6 pharyngitis_before 1            sex               539              #>  7 pharyngitis_before 0            sex               835              #>  8 pharyngitis_before 1            sex               483              #>  9 pharyngitis_before 0            sex               49.9100179964007 #> 10 pharyngitis_before 1            sex               52.7397260273973 #> 11 pharyngitis_before 0            sex               50.0899820035993 #> 12 pharyngitis_before 1            sex               47.2602739726027 #> 13 pharyngitis_before 0            prior_observation 1986.83443311338 #> 14 pharyngitis_before 1            prior_observation 4542.85812133072 #> 15 pharyngitis_before 0            prior_observation 2053.24325390978 #> 16 pharyngitis_before 1            prior_observation 3228.06460521219 drugs <- settings(cdm$drugs)$cohort_name x |>   addCohortName() |>   summariseResult(     group = \"cohort_name\",     includeOverallGroup = FALSE,     strata = list(\"pharyngitis_before\"),     includeOverallStrata = TRUE,     variables = list(       c(         \"age\", \"prior_observation\", \"future_observation\", paste0(\"prior_\", drugs),         paste0(\"future_\", drugs), \"days_to_next_visit\"       ),       c(\"sex\", \"pharyngitis_before\"),       c(\"first_visit\", \"cohort_start_date\", \"cohort_end_date\")     ),     estimates = list(       c(\"median\", \"q25\", \"q75\"),       c(\"count\", \"percentage\"),       c(\"median\", \"q25\", \"q75\", \"min\", \"max\")     ),     counts = TRUE   ) |>   select(group_name, group_level, strata_name, strata_level, variable_name, estimate_value) #> ℹ The following estimates will be computed: #> • age: median, q25, q75 #> • prior_observation: median, q25, q75 #> • future_observation: median, q25, q75 #> • prior_1191_aspirin: median, q25, q75 #> • prior_7052_morphine: median, q25, q75 #> • prior_7804_oxycodone: median, q25, q75 #> • future_1191_aspirin: median, q25, q75 #> • future_7052_morphine: median, q25, q75 #> • future_7804_oxycodone: median, q25, q75 #> • days_to_next_visit: median, q25, q75 #> • sex: count, percentage #> • pharyngitis_before: count, percentage #> • first_visit: median, q25, q75, min, max #> • cohort_start_date: median, q25, q75, min, max #> • cohort_end_date: median, q25, q75, min, max #> ! Table is collected to memory as not all requested estimates are supported on #>   the database side #> → Start summary of data, at 2024-10-24 23:33:01.996014 #>  #> ✔ Summary finished, at 2024-10-24 23:33:02.228364 #> # A tibble: 159 × 6 #>    group_name  group_level strata_name strata_level variable_name estimate_value #>    <chr>       <chr>       <chr>       <chr>        <chr>         <chr>          #>  1 cohort_name sinusitis   overall     overall      number recor… 2689           #>  2 cohort_name sinusitis   overall     overall      number subje… 2689           #>  3 cohort_name sinusitis   overall     overall      cohort_start… 1968-05-06     #>  4 cohort_name sinusitis   overall     overall      cohort_start… 1956-07-05     #>  5 cohort_name sinusitis   overall     overall      cohort_start… 1978-09-04     #>  6 cohort_name sinusitis   overall     overall      cohort_start… 1908-10-30     #>  7 cohort_name sinusitis   overall     overall      cohort_start… 2018-02-13     #>  8 cohort_name sinusitis   overall     overall      cohort_end_d… 2018-12-14     #>  9 cohort_name sinusitis   overall     overall      cohort_end_d… 2018-08-02     #> 10 cohort_name sinusitis   overall     overall      cohort_end_d… 2019-04-06     #> # ℹ 149 more rows"},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Marti Catala. Author, maintainer. Yuchen Guo. Author. Mike Du. Author. Kim Lopez-Guell. Author. Edward Burn. Author. Nuria Mercade-Besora. Author. Xintong Li. Contributor. Xihang Chen. Contributor.","code":""},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Catala M, Guo Y, Du M, Lopez-Guell K, Burn E, Mercade-Besora N (2024). PatientProfiles: Identify Characteristics Patients OMOP Common Data Model. R package version 1.2.0.900, https://darwin-eu-dev.github.io/PatientProfiles/.","code":"@Manual{,   title = {PatientProfiles: Identify Characteristics of Patients in the OMOP Common Data Model},   author = {Marti Catala and Yuchen Guo and Mike Du and Kim Lopez-Guell and Edward Burn and Nuria Mercade-Besora},   year = {2024},   note = {R package version 1.2.0.900},   url = {https://darwin-eu-dev.github.io/PatientProfiles/}, }"},{"path":[]},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/index.html","id":"package-overview","dir":"","previous_headings":"","what":"Package overview","title":"Identify Characteristics of Patients in the OMOP Common Data Model","text":"PatientProfiles contains functions adding characteristics OMOP CDM tables containing patient level data (e.g. condition occurrence, drug exposure, ) OMOP CDM cohort tables. characteristics can added include individual´s sex, age, days prior observation Time varying characteristics, age, can estimated relative date corresponding table. addition, PatientProfiles also provides functionality identifying intersections cohort table OMOP CDM tables containing patient level data cohort tables.","code":""},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/index.html","id":"package-installation","dir":"","previous_headings":"","what":"Package installation","title":"Identify Characteristics of Patients in the OMOP Common Data Model","text":"can install latest version PatientProfiles like :","code":"install.packages(\"PatientProfiles\")"},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/index.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Identify Characteristics of Patients in the OMOP Common Data Model","text":"","code":"citation(\"PatientProfiles\") #>  #> To cite package 'PatientProfiles' in publications use: #>  #>   Catala M, Guo Y, Du M, Lopez-Guell K, Burn E (????). #>   _PatientProfiles: Identify Characteristics of Patients in the OMOP #>   Common Data Model_. R package version 1.0.0, #>   <https://darwin-eu-dev.github.io/PatientProfiles/>. #>  #> A BibTeX entry for LaTeX users is #>  #>   @Manual{, #>     title = {PatientProfiles: Identify Characteristics of Patients in the OMOP Common Data Model}, #>     author = {Marti Catala and Yuchen Guo and Mike Du and Kim Lopez-Guell and Edward Burn}, #>     note = {R package version 1.0.0}, #>     url = {https://darwin-eu-dev.github.io/PatientProfiles/}, #>   }"},{"path":[]},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/index.html","id":"create-a-reference-to-data-in-the-omop-cdm-format","dir":"","previous_headings":"Example usage","what":"Create a reference to data in the OMOP CDM format","title":"Identify Characteristics of Patients in the OMOP Common Data Model","text":"PatientProfiles package designed work data OMOP CDM format, first step create reference data using CDMConnector package. Creating connection Postgres database example look like: see create reference database please consult CDMConnector package documentation. example though ’ll work simulated data, ’ll generate example cdm reference like :","code":"library(CDMConnector) library(PatientProfiles) library(dplyr) con <- DBI::dbConnect(   RPostgres::Postgres(),   dbname = Sys.getenv(\"CDM5_POSTGRESQL_DBNAME\"),   host = Sys.getenv(\"CDM5_POSTGRESQL_HOST\"),   user = Sys.getenv(\"CDM5_POSTGRESQL_USER\"),   password = Sys.getenv(\"CDM5_POSTGRESQL_PASSWORD\") )  cdm <- cdm_from_con(   con,   cdm_schema = Sys.getenv(\"CDM5_POSTGRESQL_CDM_SCHEMA\"),   write_schema = Sys.getenv(\"CDM5_POSTGRESQL_RESULT_SCHEMA\") ) cdm <- mockPatientProfiles(numberIndividuals = 1000)"},{"path":[]},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/index.html","id":"adding-characteristics-to-patient-level-data","dir":"","previous_headings":"Example usage > Adding individuals´ characteristics","what":"Adding characteristics to patient-level data","title":"Identify Characteristics of Patients in the OMOP Common Data Model","text":"Say wanted get individuals´sex age condition start date records condition occurrence table. can use addAge addSex functions : , example, limit data males aged 18 65","code":"cdm$condition_occurrence %>%   glimpse() #> Rows: ?? #> Columns: 6 #> Database: DuckDB v0.10.0 [martics@Windows 10 x64:R 4.2.1/:memory:] #> $ person_id                 <int> 343, 221, 690, 667, 366, 131, 929, 489, 196,… #> $ condition_start_date      <date> 2048-10-14, 1992-09-30, 2003-10-15, 1927-04… #> $ condition_end_date        <date> 2055-04-14, 2090-10-09, 2023-06-10, 1954-02… #> $ condition_occurrence_id   <int> 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 1… #> $ condition_concept_id      <int> 10, 8, 3, 4, 4, 4, 10, 2, 8, 8, 10, 2, 6, 5,… #> $ condition_type_concept_id <int> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,…  cdm$condition_occurrence <- cdm$condition_occurrence %>%   addAge(indexDate = \"condition_start_date\") %>%   addSex()  cdm$condition_occurrence %>%   glimpse() #> Rows: ?? #> Columns: 8 #> Database: DuckDB v0.10.0 [martics@Windows 10 x64:R 4.2.1/:memory:] #> $ person_id                 <int> 343, 221, 667, 366, 131, 929, 489, 196, 496,… #> $ condition_start_date      <date> 2048-10-14, 1992-09-30, 1927-04-02, 2107-05… #> $ condition_end_date        <date> 2055-04-14, 2090-10-09, 1954-02-01, 2135-04… #> $ condition_occurrence_id   <int> 1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, … #> $ condition_concept_id      <int> 10, 8, 4, 4, 4, 10, 2, 8, 8, 10, 2, 6, 5, 2,… #> $ condition_type_concept_id <int> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,… #> $ age                       <int> 46, 15, 7, 98, 11, 42, 33, 80, 15, 33, 82, 3… #> $ sex                       <chr> \"Female\", \"Male\", \"Female\", \"Female\", \"Femal… cdm$condition_occurrence %>%   filter(age >= 18 & age <= 65) %>%   filter(sex == \"Male\") #> # Source:   SQL [?? x 8] #> # Database: DuckDB v0.10.0 [martics@Windows 10 x64:R 4.2.1/:memory:] #>    person_id condition_start_date condition_end_date condition_occurrence_id #>        <int> <date>               <date>                               <int> #>  1       608 2000-09-08           2081-12-17                              13 #>  2       307 1980-02-14           2017-10-12                              15 #>  3       698 2022-09-13           2083-03-02                              19 #>  4       338 2025-12-14           2028-05-03                              30 #>  5       864 1964-11-09           2029-01-22                              38 #>  6        20 2020-09-21           2108-07-09                              65 #>  7       470 1961-08-02           1966-12-28                              68 #>  8       469 1984-03-16           2006-05-18                              70 #>  9       821 1954-08-11           1962-01-30                              79 #> 10       765 1934-02-08           1956-05-07                              80 #> # ℹ more rows #> # ℹ 4 more variables: condition_concept_id <int>, #> #   condition_type_concept_id <int>, age <int>, sex <chr>"},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/index.html","id":"adding-characteristics-of-a-cohort","dir":"","previous_headings":"Example usage > Adding individuals´ characteristics","what":"Adding characteristics of a cohort","title":"Identify Characteristics of Patients in the OMOP Common Data Model","text":"tables OMOP CDM, can work similar way cohort tables. example, say cohort table can add age, age groups, sex, days prior observation cohort like use information subset cohort. example limiting least 365 days prior observation available cohort start date like ","code":"cdm$cohort1 %>%   glimpse() #> Rows: ?? #> Columns: 4 #> Database: DuckDB v0.10.0 [martics@Windows 10 x64:R 4.2.1/:memory:] #> $ cohort_definition_id <int> 1, 2, 3, 3, 3, 3, 1, 3, 1, 1, 3, 3, 2, 3, 1, 3, 2… #> $ subject_id           <int> 260, 244, 759, 439, 113, 776, 327, 985, 707, 297,… #> $ cohort_start_date    <date> 2069-08-23, 1990-11-12, 2011-05-27, 1976-07-18, … #> $ cohort_end_date      <date> 2097-12-24, 2023-09-10, 2016-01-30, 2023-06-16, … cdm$cohort1 <- cdm$cohort1 %>%   addAge(     indexDate = \"cohort_start_date\",     ageGroup = list(c(0, 18), c(19, 65), c(66, 100))   ) %>%   addSex() %>%   addPriorObservation()  cdm$cohort1 %>%   glimpse() #> Rows: ?? #> Columns: 8 #> Database: DuckDB v0.10.0 [martics@Windows 10 x64:R 4.2.1/:memory:] #> $ cohort_definition_id <int> 1, 2, 3, 3, 3, 1, 1, 3, 2, 3, 1, 3, 2, 1, 3, 3, 1… #> $ subject_id           <int> 260, 244, 439, 113, 776, 327, 297, 27, 592, 378, … #> $ cohort_start_date    <date> 2069-08-23, 1990-11-12, 1976-07-18, 2055-08-21, … #> $ cohort_end_date      <date> 2097-12-24, 2023-09-10, 2023-06-16, 2077-06-10, … #> $ age                  <int> 63, 62, 3, 132, 24, 20, 65, 67, 70, 3, 122, 55, 2… #> $ age_group            <chr> \"19 to 65\", \"19 to 65\", \"0 to 18\", \"None\", \"19 to… #> $ sex                  <chr> \"Female\", \"Male\", \"Male\", \"Male\", \"Male\", \"Female… #> $ prior_observation    <int> 23245, 22961, 1294, 48445, 8844, 7562, 24057, 246… cdm$cohort1 %>%   filter(prior_observation >= 365) #> # Source:   SQL [?? x 8] #> # Database: DuckDB v0.10.0 [martics@Windows 10 x64:R 4.2.1/:memory:] #>    cohort_definition_id subject_id cohort_start_date cohort_end_date   age #>                   <int>      <int> <date>            <date>          <int> #>  1                    1        260 2069-08-23        2097-12-24         63 #>  2                    2        244 1990-11-12        2023-09-10         62 #>  3                    3        439 1976-07-18        2023-06-16          3 #>  4                    3        113 2055-08-21        2077-06-10        132 #>  5                    3        776 1989-03-20        2013-04-06         24 #>  6                    1        327 1989-09-15        2088-07-26         20 #>  7                    1        297 2017-11-12        2080-11-05         65 #>  8                    3         27 2033-07-08        2069-03-05         67 #>  9                    2        592 2045-05-28        2063-12-28         70 #> 10                    3        378 1936-09-05        2084-11-29          3 #> # ℹ more rows #> # ℹ 3 more variables: age_group <chr>, sex <chr>, prior_observation <int>"},{"path":[]},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/index.html","id":"detect-the-presence-of-another-cohort-in-a-certain-window","dir":"","previous_headings":"Example usage > Cohort intersections","what":"Detect the presence of another cohort in a certain window","title":"Identify Characteristics of Patients in the OMOP Common Data Model","text":"can use addCohortIntersectFlag add flag presence () cohort certain window.","code":"cdm$cohort1 %>%   glimpse() #> Rows: ?? #> Columns: 4 #> Database: DuckDB v0.10.0 [martics@Windows 10 x64:R 4.2.1/:memory:] #> $ cohort_definition_id <int> 3, 3, 3, 2, 3, 2, 1, 1, 2, 1 #> $ subject_id           <int> 5, 3, 1, 6, 7, 10, 2, 8, 9, 4 #> $ cohort_start_date    <date> 2106-03-21, 2078-07-16, 2107-03-02, 2036-12-07, 2… #> $ cohort_end_date      <date> 2112-08-12, 2151-05-18, 2110-05-11, 2040-01-08, 2…  cdm$cohort1 <- cdm$cohort1 %>%   addCohortIntersectFlag(     targetCohortTable = \"cohort2\",     window = c(-Inf, -1)   )  cdm$cohort1 %>%   glimpse() #> Rows: ?? #> Columns: 7 #> Database: DuckDB v0.10.0 [martics@Windows 10 x64:R 4.2.1/:memory:] #> $ cohort_definition_id <int> 3, 3, 3, 2, 3, 2, 1, 1, 2, 1 #> $ subject_id           <int> 5, 3, 1, 6, 7, 10, 2, 8, 9, 4 #> $ cohort_start_date    <date> 2106-03-21, 2078-07-16, 2107-03-02, 2036-12-07, 2… #> $ cohort_end_date      <date> 2112-08-12, 2151-05-18, 2110-05-11, 2040-01-08, 2… #> $ cohort_1_minf_to_m1  <dbl> 0, 0, 1, 0, 0, 0, 0, 0, 0, 0 #> $ cohort_2_minf_to_m1  <dbl> 1, 1, 0, 1, 0, 1, 0, 0, 0, 0 #> $ cohort_3_minf_to_m1  <dbl> 0, 0, 0, 0, 1, 0, 1, 1, 1, 0"},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/index.html","id":"count-appearances-of-a-certain-cohort-in-a-certain-window","dir":"","previous_headings":"Example usage > Cohort intersections","what":"Count appearances of a certain cohort in a certain window","title":"Identify Characteristics of Patients in the OMOP Common Data Model","text":"wanted number appearances, instead use addCohortIntersectCount function","code":"cdm$cohort1 %>%   glimpse() #> Rows: ?? #> Columns: 4 #> Database: DuckDB v0.10.0 [martics@Windows 10 x64:R 4.2.1/:memory:] #> $ cohort_definition_id <int> 3, 3, 2, 2, 3, 3, 3, 3, 1, 2 #> $ subject_id           <int> 10, 5, 1, 6, 7, 3, 4, 2, 9, 8 #> $ cohort_start_date    <date> 1979-02-05, 1945-07-26, 1964-06-02, 2025-10-20, 2… #> $ cohort_end_date      <date> 1999-05-30, 2009-10-12, 1968-10-19, 2105-06-01, 2…  cdm$cohort1 <- cdm$cohort1 %>%   addCohortIntersectCount(     targetCohortTable = \"cohort2\",     targetCohortId = 1,     window = list(\"short_term\" = c(1, 30), \"mid_term\" = c(31, 180))   )  cdm$cohort1 %>%   glimpse() #> Rows: ?? #> Columns: 6 #> Database: DuckDB v0.10.0 [martics@Windows 10 x64:R 4.2.1/:memory:] #> $ cohort_definition_id <int> 2, 3, 3, 2, 3, 3, 3, 3, 1, 2 #> $ subject_id           <int> 6, 10, 5, 1, 7, 3, 4, 2, 9, 8 #> $ cohort_start_date    <date> 2025-10-20, 1979-02-05, 1945-07-26, 1964-06-02, 2… #> $ cohort_end_date      <date> 2105-06-01, 1999-05-30, 2009-10-12, 1968-10-19, 2… #> $ cohort_1_mid_term    <dbl> 1, 0, 0, 0, 0, 0, 0, 0, 0, 0 #> $ cohort_1_short_term  <dbl> 1, 0, 0, 0, 0, 0, 0, 0, 0, 0"},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/index.html","id":"add-a-column-with-the-firstlast-event-in-a-certain-window","dir":"","previous_headings":"Example usage > Cohort intersections","what":"Add a column with the first/last event in a certain window","title":"Identify Characteristics of Patients in the OMOP Common Data Model","text":"Say wanted date individual another cohort can use addCohortIntersectDate function. might multiple records cohort, can also choose first last appearance cohort. First occurrence: Last occurrence:","code":"cdm$cohort1 %>%   glimpse() #> Rows: ?? #> Columns: 4 #> Database: DuckDB v0.10.0 [martics@Windows 10 x64:R 4.2.1/:memory:] #> $ cohort_definition_id <int> 3, 2, 3, 3, 1, 3, 2, 3, 1, 1 #> $ subject_id           <int> 2, 4, 6, 9, 3, 10, 1, 5, 7, 8 #> $ cohort_start_date    <date> 2005-11-08, 1999-07-08, 2069-10-11, 1999-10-16, 1… #> $ cohort_end_date      <date> 2012-08-06, 2047-07-13, 2074-12-30, 2104-04-26, 2…  cdm$cohort1 <- cdm$cohort1 %>%   addCohortIntersectDate(     targetCohortTable = \"cohort2\",     targetCohortId = 1,     order = \"first\",     window = c(-Inf, Inf)   )  cdm$cohort1 %>%   glimpse() #> Rows: ?? #> Columns: 5 #> Database: DuckDB v0.10.0 [martics@Windows 10 x64:R 4.2.1/:memory:] #> $ cohort_definition_id <int> 3, 3, 3, 2, 3, 3, 1, 2, 1, 1 #> $ subject_id           <int> 2, 10, 5, 4, 6, 9, 3, 1, 7, 8 #> $ cohort_start_date    <date> 2005-11-08, 1966-07-15, 2046-07-28, 1999-07-08, 2… #> $ cohort_end_date      <date> 2012-08-06, 1996-04-01, 2065-12-21, 2047-07-13, 2… #> $ cohort_1_minf_to_inf <date> 1922-03-06, 1959-03-23, 2039-10-15, NA, NA, NA, … cdm$cohort1 %>%   glimpse() #> Rows: ?? #> Columns: 4 #> Database: DuckDB v0.10.0 [martics@Windows 10 x64:R 4.2.1/:memory:] #> $ cohort_definition_id <int> 1, 1, 3, 3, 2, 1, 1, 3, 1, 3 #> $ subject_id           <int> 2, 10, 5, 1, 7, 3, 4, 9, 8, 6 #> $ cohort_start_date    <date> 1930-01-06, 1940-10-23, 1916-02-17, 2066-03-17, 1… #> $ cohort_end_date      <date> 2025-06-17, 1968-04-18, 1919-01-10, 2066-10-13, 1…  cdm$cohort1 <- cdm$cohort1 %>%   addCohortIntersectDate(     targetCohortTable = \"cohort2\",     targetCohortId = 1,     order = \"last\",     window = c(-Inf, Inf)   )  cdm$cohort1 %>%   glimpse() #> Rows: ?? #> Columns: 5 #> Database: DuckDB v0.10.0 [martics@Windows 10 x64:R 4.2.1/:memory:] #> $ cohort_definition_id <int> 1, 1, 2, 1, 3, 3, 3, 1, 1, 3 #> $ subject_id           <int> 2, 10, 7, 4, 9, 5, 1, 3, 8, 6 #> $ cohort_start_date    <date> 1930-01-06, 1940-10-23, 1958-11-08, 2077-04-26, 2… #> $ cohort_end_date      <date> 2025-06-17, 1968-04-18, 1959-08-14, 2077-05-10, 2… #> $ cohort_1_minf_to_inf <date> 1938-01-23, 1968-03-03, 1942-06-19, 2045-06-16, …"},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/index.html","id":"add-the-number-of-days-instead-of-the-date","dir":"","previous_headings":"Example usage > Cohort intersections","what":"Add the number of days instead of the date","title":"Identify Characteristics of Patients in the OMOP Common Data Model","text":"Instead returning date, return days intersection using addCohortIntersectDays","code":"cdm$cohort1 %>%   glimpse() #> Rows: ?? #> Columns: 4 #> Database: DuckDB v0.10.0 [martics@Windows 10 x64:R 4.2.1/:memory:] #> $ cohort_definition_id <int> 2, 3, 3, 2, 2, 3, 3, 3, 3, 2 #> $ subject_id           <int> 7, 4, 1, 9, 10, 5, 3, 8, 6, 2 #> $ cohort_start_date    <date> 2053-01-09, 1961-07-08, 2082-07-12, 1982-02-02, 1… #> $ cohort_end_date      <date> 2118-03-01, 2103-08-06, 2096-08-04, 1989-05-29, 1…  cdm$cohort1 <- cdm$cohort1 %>%   addCohortIntersectDays(     targetCohortTable = \"cohort2\",     targetCohortId = 1,     order = \"last\",     window = c(-Inf, Inf)   )  cdm$cohort1 %>%   glimpse() #> Rows: ?? #> Columns: 5 #> Database: DuckDB v0.10.0 [martics@Windows 10 x64:R 4.2.1/:memory:] #> $ cohort_definition_id <int> 3, 2, 3, 3, 2, 2, 3, 3, 3, 2 #> $ subject_id           <int> 3, 7, 4, 1, 9, 10, 5, 8, 6, 2 #> $ cohort_start_date    <date> 2058-05-14, 2053-01-09, 1961-07-08, 2082-07-12, 1… #> $ cohort_end_date      <date> 2158-06-30, 2118-03-01, 2103-08-06, 2096-08-04, 1… #> $ cohort_1_minf_to_inf <dbl> -13451, NA, NA, NA, NA, NA, NA, NA, NA, NA"},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/index.html","id":"combine-multiple-cohort-intersects","dir":"","previous_headings":"Example usage > Cohort intersections","what":"Combine multiple cohort intersects","title":"Identify Characteristics of Patients in the OMOP Common Data Model","text":"want combine multiple cohort intersects can concatenate operations using pipe operator:","code":"cdm$cohort1 %>%   glimpse() #> Rows: ?? #> Columns: 4 #> Database: DuckDB v0.10.0 [martics@Windows 10 x64:R 4.2.1/:memory:] #> $ cohort_definition_id <int> 3, 3, 1, 2, 3, 1, 2, 1, 3, 3 #> $ subject_id           <int> 7, 6, 9, 3, 1, 2, 8, 5, 4, 10 #> $ cohort_start_date    <date> 2017-03-21, 1961-10-26, 2078-03-01, 2000-12-20, 2… #> $ cohort_end_date      <date> 2137-02-07, 2068-12-02, 2088-09-29, 2046-05-16, 2…  cdm$cohort1 <- cdm$cohort1 %>%   addCohortIntersectDate(     targetCohortTable = \"cohort2\",     targetCohortId = 1,     order = \"last\",     window = c(-Inf, Inf)   ) %>%   addCohortIntersectCount(     targetCohortTable = \"cohort2\",     targetCohortId = 1,     window = c(-Inf, Inf)   )  cdm$cohort1 %>%   glimpse() #> Rows: ?? #> Columns: 5 #> Database: DuckDB v0.10.0 [martics@Windows 10 x64:R 4.2.1/:memory:] #> $ cohort_definition_id <int> 3, 1, 3, 3, 2, 1, 2, 1, 3, 3 #> $ subject_id           <int> 6, 9, 1, 7, 3, 2, 8, 5, 4, 10 #> $ cohort_start_date    <date> 1961-10-26, 2078-03-01, 2000-10-31, 2017-03-21, 2… #> $ cohort_end_date      <date> 2068-12-02, 2088-09-29, 2063-05-21, 2137-02-07, 2… #> $ cohort_1_minf_to_inf <dbl> 1, 1, 1, 0, 0, 0, 0, 0, 0, 0 mockDisconnect(cdm)"},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/PatientProfiles-package.html","id":null,"dir":"Reference","previous_headings":"","what":"PatientProfiles: Identify Characteristics of Patients in the OMOP Common Data Model — PatientProfiles-package","title":"PatientProfiles: Identify Characteristics of Patients in the OMOP Common Data Model — PatientProfiles-package","text":"Identify characteristics patients data mapped Observational Medical Outcomes Partnership (OMOP) common data model.","code":""},{"path":[]},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/PatientProfiles-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"PatientProfiles: Identify Characteristics of Patients in the OMOP Common Data Model — PatientProfiles-package","text":"Maintainer: Marti Catala marti.catalasabate@ndorms.ox.ac.uk (ORCID) Authors: Yuchen Guo yuchen.guo@ndorms.ox.ac.uk (ORCID) Mike Du mike.du@ndorms.ox.ac.uk (ORCID) Kim Lopez-Guell kim.lopez@spc.ox.ac.uk (ORCID) Edward Burn edward.burn@ndorms.ox.ac.uk (ORCID) Nuria Mercade-Besora nuria.mercadebesora@ndorms.ox.ac.uk (ORCID) contributors: Xintong Li xintong.li@ndorms.ox.ac.uk (ORCID) [contributor] Xihang Chen xihang.chen@ndorms.ox.ac.uk (ORCID) [contributor]","code":""},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/addAge.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute the age of the individuals at a certain date — addAge","title":"Compute the age of the individuals at a certain date — addAge","text":"Compute age individuals certain date","code":""},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/addAge.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute the age of the individuals at a certain date — addAge","text":"","code":"addAge(   x,   indexDate = \"cohort_start_date\",   ageName = \"age\",   ageGroup = NULL,   ageMissingMonth = 1,   ageMissingDay = 1,   ageImposeMonth = FALSE,   ageImposeDay = FALSE,   missingAgeGroupValue = \"None\",   name = NULL )"},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/addAge.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute the age of the individuals at a certain date — addAge","text":"x Table individuals cdm. indexDate Variable x contains date compute age. ageName Name new column contains age. ageGroup List age groups added. ageMissingMonth Month year assigned individuals missing month birth. default: 1. ageMissingDay day month assigned individuals missing day birth. default: 1. ageImposeMonth Whether month date birth considered missing individuals. ageImposeDay Whether day date birth considered missing individuals. missingAgeGroupValue Value include missing age. name Name new table, NULL temporary table returned.","code":""},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/addAge.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute the age of the individuals at a certain date — addAge","text":"tibble age column added.","code":""},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/addAge.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute the age of the individuals at a certain date — addAge","text":"","code":"# \\donttest{ cdm <- mockPatientProfiles() #> Note: method with signature ‘DBIConnection#Id’ chosen for function ‘dbExistsTable’, #>  target signature ‘duckdb_connection#Id’. #>  \"duckdb_connection#ANY\" would also be valid  cdm$cohort1 |>   addAge() #> # Source:   table<og_001_1729812595> [10 x 5] #> # Database: DuckDB v1.1.1 [unknown@Linux 6.5.0-1025-azure:R 4.4.1/:memory:] #>    cohort_definition_id subject_id cohort_start_date cohort_end_date   age #>                   <int>      <int> <date>            <date>          <int> #>  1                    1         10 1976-08-11        1983-08-14         33 #>  2                    2          4 1931-05-17        1931-07-22          7 #>  3                    3          6 2013-08-02        2013-08-19         36 #>  4                    1          7 1910-09-20        1913-06-22          8 #>  5                    3          9 1968-11-27        1977-01-19         13 #>  6                    1          2 1991-11-21        1997-10-31         22 #>  7                    1          3 1907-01-04        1912-07-22          2 #>  8                    1          5 1985-11-22        1992-12-18          6 #>  9                    1          1 1975-08-26        1983-02-11          2 #> 10                    2          8 1980-08-11        1985-10-05         18 mockDisconnect(cdm = cdm) # }"},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/addAgeQuery.html","id":null,"dir":"Reference","previous_headings":"","what":"Query to add the age of the individuals at a certain date — addAgeQuery","title":"Query to add the age of the individuals at a certain date — addAgeQuery","text":"`r lifecycle::badge(\"experimental\")` `addAge()`, except query computed table.","code":""},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/addAgeQuery.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Query to add the age of the individuals at a certain date — addAgeQuery","text":"","code":"addAgeQuery(   x,   indexDate = \"cohort_start_date\",   ageName = \"age\",   ageGroup = NULL,   ageMissingMonth = 1,   ageMissingDay = 1,   ageImposeMonth = FALSE,   ageImposeDay = FALSE,   missingAgeGroupValue = \"None\" )"},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/addAgeQuery.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Query to add the age of the individuals at a certain date — addAgeQuery","text":"x Table individuals cdm. indexDate Variable x contains date compute age. ageName Name new column contains age. ageGroup List age groups added. ageMissingMonth Month year assigned individuals missing month birth. default: 1. ageMissingDay day month assigned individuals missing day birth. default: 1. ageImposeMonth Whether month date birth considered missing individuals. ageImposeDay Whether day date birth considered missing individuals. missingAgeGroupValue Value include missing age.","code":""},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/addAgeQuery.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Query to add the age of the individuals at a certain date — addAgeQuery","text":"tibble age column added.","code":""},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/addAgeQuery.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Query to add the age of the individuals at a certain date — addAgeQuery","text":"","code":"# \\donttest{ cdm <- mockPatientProfiles()  cdm$cohort1 |>   addAgeQuery() #> # Source:   SQL [10 x 5] #> # Database: DuckDB v1.1.1 [unknown@Linux 6.5.0-1025-azure:R 4.4.1/:memory:] #>    cohort_definition_id subject_id cohort_start_date cohort_end_date   age #>                   <int>      <int> <date>            <date>          <int> #>  1                    2         10 1963-10-25        1963-10-26         29 #>  2                    2          9 1967-12-01        1968-06-23         19 #>  3                    2          5 1934-04-10        1937-03-23         27 #>  4                    3          8 1958-04-13        1963-06-18         22 #>  5                    1          6 1917-04-28        1919-11-25          7 #>  6                    1          4 1972-07-27        1986-04-07         28 #>  7                    1          2 1956-09-06        1957-10-01          1 #>  8                    2          1 1938-03-13        1944-04-07         26 #>  9                    2          3 1964-11-04        1967-06-11          6 #> 10                    1          7 1932-01-20        1937-10-27          6 mockDisconnect(cdm = cdm) # }"},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/addCategories.html","id":null,"dir":"Reference","previous_headings":"","what":"Categorize a numeric variable — addCategories","title":"Categorize a numeric variable — addCategories","text":"Categorize numeric variable","code":""},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/addCategories.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Categorize a numeric variable — addCategories","text":"","code":"addCategories(   x,   variable,   categories,   missingCategoryValue = \"None\",   overlap = FALSE,   name = NULL )"},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/addCategories.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Categorize a numeric variable — addCategories","text":"x Table individuals cdm. variable Target variable want categorize. categories List lists named categories lower upper limit. missingCategoryValue Value assign individuals named category. NULL NA, missing values given. overlap TRUE categories given overlap. name Name new table, NULL temporary table returned.","code":""},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/addCategories.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Categorize a numeric variable — addCategories","text":"x table categorical variable added.","code":""},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/addCategories.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Categorize a numeric variable — addCategories","text":"","code":"# \\donttest{ cdm <- mockPatientProfiles()  result <- cdm$cohort1 %>%   addAge() %>%   addCategories(     variable = \"age\",     categories = list(\"age_group\" = list(       \"0 to 39\" = c(0, 39), \"40 to 79\" = c(40, 79), \"80 to 150\" = c(80, 150)     ))   ) mockDisconnect(cdm = cdm) # }"},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/addCdmName.html","id":null,"dir":"Reference","previous_headings":"","what":"Add cdm name — addCdmName","title":"Add cdm name — addCdmName","text":"Add cdm name","code":""},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/addCdmName.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add cdm name — addCdmName","text":"","code":"addCdmName(table, cdm = omopgenerics::cdmReference(table))"},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/addCdmName.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add cdm name — addCdmName","text":"table Table cdm cdm cdm reference object","code":""},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/addCdmName.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add cdm name — addCdmName","text":"Table extra column cdm names","code":""},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/addCdmName.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add cdm name — addCdmName","text":"","code":"# \\donttest{ library(PatientProfiles)  cdm <- mockPatientProfiles() cdm$cohort1 %>%   addCdmName() #> # Source:   SQL [10 x 5] #> # Database: DuckDB v1.1.1 [unknown@Linux 6.5.0-1025-azure:R 4.4.1/:memory:] #>    cohort_definition_id subject_id cohort_start_date cohort_end_date cdm_name #>                   <int>      <int> <date>            <date>          <chr>    #>  1                    1          9 1940-08-13        1942-10-23      PP_MOCK  #>  2                    2          4 1981-11-14        1993-01-11      PP_MOCK  #>  3                    3          1 1942-08-05        1944-10-21      PP_MOCK  #>  4                    3          7 1980-08-05        1983-05-19      PP_MOCK  #>  5                    1          5 1974-08-24        1980-12-25      PP_MOCK  #>  6                    1          8 1929-04-01        1931-10-28      PP_MOCK  #>  7                    3          6 1981-02-19        1994-09-10      PP_MOCK  #>  8                    3          2 1958-04-14        1959-09-10      PP_MOCK  #>  9                    3         10 1938-06-17        1939-10-08      PP_MOCK  #> 10                    1          3 1945-08-22        1948-07-24      PP_MOCK  # }"},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/addCohortIntersectCount.html","id":null,"dir":"Reference","previous_headings":"","what":"It creates columns to indicate number of occurrences of intersection with a cohort — addCohortIntersectCount","title":"It creates columns to indicate number of occurrences of intersection with a cohort — addCohortIntersectCount","text":"creates columns indicate number occurrences intersection cohort","code":""},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/addCohortIntersectCount.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"It creates columns to indicate number of occurrences of intersection with a cohort — addCohortIntersectCount","text":"","code":"addCohortIntersectCount(   x,   targetCohortTable,   targetCohortId = NULL,   indexDate = \"cohort_start_date\",   censorDate = NULL,   targetStartDate = \"cohort_start_date\",   targetEndDate = \"cohort_end_date\",   window = list(c(0, Inf)),   nameStyle = \"{cohort_name}_{window_name}\",   name = NULL )"},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/addCohortIntersectCount.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"It creates columns to indicate number of occurrences of intersection with a cohort — addCohortIntersectCount","text":"x Table individuals cdm. targetCohortTable name cohort want check overlap. targetCohortId vector cohort definition ids include. indexDate Variable x contains date compute intersection. censorDate whether censor overlap events specific date column date x. targetStartDate date reference cohort table, either start (overlap) (incidence). targetEndDate date reference cohort table, either end (overlap) NULL (incidence). window window consider events . nameStyle naming added column columns, include required parameters. name Name new table, NULL temporary table returned.","code":""},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/addCohortIntersectCount.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"It creates columns to indicate number of occurrences of intersection with a cohort — addCohortIntersectCount","text":"table added columns overlap information.","code":""},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/addCohortIntersectCount.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"It creates columns to indicate number of occurrences of intersection with a cohort — addCohortIntersectCount","text":"","code":"# \\donttest{ cdm <- mockPatientProfiles()  cdm$cohort1 %>%   addCohortIntersectCount(     targetCohortTable = \"cohort2\"   ) #> # Source:   table<og_005_1729812602> [10 x 7] #> # Database: DuckDB v1.1.1 [unknown@Linux 6.5.0-1025-azure:R 4.4.1/:memory:] #>    cohort_definition_id subject_id cohort_start_date cohort_end_date #>                   <int>      <int> <date>            <date>          #>  1                    2          6 1958-06-17        1966-03-18      #>  2                    2          9 1959-07-30        1976-08-28      #>  3                    2          7 1973-01-14        1973-05-30      #>  4                    3          2 2025-01-15        2025-02-20      #>  5                    3          4 1955-03-12        1960-11-22      #>  6                    3         10 1966-01-03        1972-03-30      #>  7                    3          3 1989-07-01        2019-09-08      #>  8                    2          8 1925-03-26        1935-08-12      #>  9                    3          1 1943-03-07        1943-10-04      #> 10                    3          5 1947-03-30        1958-02-15      #> # ℹ 3 more variables: cohort_1_0_to_inf <dbl>, cohort_2_0_to_inf <dbl>, #> #   cohort_3_0_to_inf <dbl> mockDisconnect(cdm = cdm) # }"},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/addCohortIntersectDate.html","id":null,"dir":"Reference","previous_headings":"","what":"Date of cohorts that are present in a certain window — addCohortIntersectDate","title":"Date of cohorts that are present in a certain window — addCohortIntersectDate","text":"Date cohorts present certain window","code":""},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/addCohortIntersectDate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Date of cohorts that are present in a certain window — addCohortIntersectDate","text":"","code":"addCohortIntersectDate(   x,   targetCohortTable,   targetCohortId = NULL,   indexDate = \"cohort_start_date\",   censorDate = NULL,   targetDate = \"cohort_start_date\",   order = \"first\",   window = c(0, Inf),   nameStyle = \"{cohort_name}_{window_name}\",   name = NULL )"},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/addCohortIntersectDate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Date of cohorts that are present in a certain window — addCohortIntersectDate","text":"x Table individuals cdm. targetCohortTable Cohort table . targetCohortId Cohort IDs interest cohort table. NULL, cohorts used time variable added cohort interest. indexDate Variable x contains date compute intersection. censorDate whether censor overlap events specific date column date x. targetDate Date interest cohort table. Either cohort_start_date cohort_end_date. order date use multiple records individual window interest. Either first last. window Window time identify records relative indexDate. Records outside time period ignored. nameStyle naming added column columns, include required parameters. name Name new table, NULL temporary table returned.","code":""},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/addCohortIntersectDate.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Date of cohorts that are present in a certain window — addCohortIntersectDate","text":"x along additional columns cohort interest.","code":""},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/addCohortIntersectDate.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Date of cohorts that are present in a certain window — addCohortIntersectDate","text":"","code":"# \\donttest{ cdm <- mockPatientProfiles()  cdm$cohort1 %>%   addCohortIntersectDate(     targetCohortTable = \"cohort2\"   ) #> # Source:   table<og_016_1729812606> [10 x 7] #> # Database: DuckDB v1.1.1 [unknown@Linux 6.5.0-1025-azure:R 4.4.1/:memory:] #>    cohort_definition_id subject_id cohort_start_date cohort_end_date #>                   <int>      <int> <date>            <date>          #>  1                    3          6 1975-02-21        1991-05-08      #>  2                    2          7 1960-03-14        1961-03-20      #>  3                    1          1 1980-06-02        1986-12-30      #>  4                    1          8 1980-08-25        1986-07-05      #>  5                    3          3 1932-12-15        1949-05-21      #>  6                    1          5 1954-09-05        1955-07-15      #>  7                    2          2 1932-04-03        1933-03-11      #>  8                    3          4 2011-11-12        2011-11-22      #>  9                    3         10 1984-07-27        1986-04-05      #> 10                    2          9 1954-07-16        1972-07-03      #> # ℹ 3 more variables: cohort_3_0_to_inf <date>, cohort_2_0_to_inf <date>, #> #   cohort_1_0_to_inf <date> mockDisconnect(cdm = cdm) # }"},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/addCohortIntersectDays.html","id":null,"dir":"Reference","previous_headings":"","what":"It creates columns to indicate the number of days between the current table and a target cohort — addCohortIntersectDays","title":"It creates columns to indicate the number of days between the current table and a target cohort — addCohortIntersectDays","text":"creates columns indicate number days current table target cohort","code":""},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/addCohortIntersectDays.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"It creates columns to indicate the number of days between the current table and a target cohort — addCohortIntersectDays","text":"","code":"addCohortIntersectDays(   x,   targetCohortTable,   targetCohortId = NULL,   indexDate = \"cohort_start_date\",   censorDate = NULL,   targetDate = \"cohort_start_date\",   order = \"first\",   window = c(0, Inf),   nameStyle = \"{cohort_name}_{window_name}\",   name = NULL )"},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/addCohortIntersectDays.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"It creates columns to indicate the number of days between the current table and a target cohort — addCohortIntersectDays","text":"x Table individuals cdm. targetCohortTable Cohort table . targetCohortId Cohort IDs interest cohort table. NULL, cohorts used days variable added cohort interest. indexDate Variable x contains date compute intersection. censorDate whether censor overlap events specific date column date x. targetDate Date interest cohort table. Either cohort_start_date cohort_end_date. order date use multiple records individual window interest. Either first last. window Window time identify records relative indexDate. Records outside time period ignored. nameStyle naming added column columns, include required parameters. name Name new table, NULL temporary table returned.","code":""},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/addCohortIntersectDays.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"It creates columns to indicate the number of days between the current table and a target cohort — addCohortIntersectDays","text":"x along additional columns cohort interest.","code":""},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/addCohortIntersectDays.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"It creates columns to indicate the number of days between the current table and a target cohort — addCohortIntersectDays","text":"","code":"# \\donttest{ cdm <- mockPatientProfiles()  cdm$cohort1 %>%   addCohortIntersectDays(     targetCohortTable = \"cohort2\"   ) #> # Source:   table<og_023_1729812608> [10 x 7] #> # Database: DuckDB v1.1.1 [unknown@Linux 6.5.0-1025-azure:R 4.4.1/:memory:] #>    cohort_definition_id subject_id cohort_start_date cohort_end_date #>                   <int>      <int> <date>            <date>          #>  1                    1          7 1919-03-21        1925-01-30      #>  2                    3          3 1965-04-19        1977-09-17      #>  3                    1          6 1935-07-19        1982-03-27      #>  4                    2          2 1974-01-19        1976-01-31      #>  5                    3          9 1971-12-31        1973-05-13      #>  6                    1          1 1934-07-19        1949-06-19      #>  7                    1         10 1975-01-12        1977-07-09      #>  8                    1          5 1983-08-29        1991-03-27      #>  9                    3          8 1906-06-10        1916-04-08      #> 10                    1          4 1957-02-02        1958-05-19      #> # ℹ 3 more variables: cohort_3_0_to_inf <dbl>, cohort_1_0_to_inf <dbl>, #> #   cohort_2_0_to_inf <dbl> mockDisconnect(cdm = cdm) # }"},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/addCohortIntersectFlag.html","id":null,"dir":"Reference","previous_headings":"","what":"It creates columns to indicate the presence of cohorts — addCohortIntersectFlag","title":"It creates columns to indicate the presence of cohorts — addCohortIntersectFlag","text":"creates columns indicate presence cohorts","code":""},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/addCohortIntersectFlag.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"It creates columns to indicate the presence of cohorts — addCohortIntersectFlag","text":"","code":"addCohortIntersectFlag(   x,   targetCohortTable,   targetCohortId = NULL,   indexDate = \"cohort_start_date\",   censorDate = NULL,   targetStartDate = \"cohort_start_date\",   targetEndDate = \"cohort_end_date\",   window = list(c(0, Inf)),   nameStyle = \"{cohort_name}_{window_name}\",   name = NULL )"},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/addCohortIntersectFlag.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"It creates columns to indicate the presence of cohorts — addCohortIntersectFlag","text":"x Table individuals cdm. targetCohortTable name cohort want check overlap. targetCohortId vector cohort definition ids include. indexDate Variable x contains date compute intersection. censorDate whether censor overlap events specific date column date x. targetStartDate date reference cohort table, either start (overlap) (incidence). targetEndDate date reference cohort table, either end (overlap) NULL (incidence). window window consider events . nameStyle naming added column columns, include required parameters. name Name new table, NULL temporary table returned.","code":""},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/addCohortIntersectFlag.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"It creates columns to indicate the presence of cohorts — addCohortIntersectFlag","text":"table added columns overlap information.","code":""},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/addCohortIntersectFlag.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"It creates columns to indicate the presence of cohorts — addCohortIntersectFlag","text":"","code":"# \\donttest{ cdm <- mockPatientProfiles()  cdm$cohort1 %>%   addCohortIntersectFlag(     targetCohortTable = \"cohort2\"   ) #> # Source:   table<og_032_1729812611> [10 x 7] #> # Database: DuckDB v1.1.1 [unknown@Linux 6.5.0-1025-azure:R 4.4.1/:memory:] #>    cohort_definition_id subject_id cohort_start_date cohort_end_date #>                   <int>      <int> <date>            <date>          #>  1                    1          2 1953-03-04        1971-05-28      #>  2                    1          4 1966-01-22        1973-07-21      #>  3                    3          7 2007-11-16        2019-11-21      #>  4                    3          8 1981-07-21        1995-12-18      #>  5                    3          6 1911-03-15        1919-03-19      #>  6                    2          9 1923-07-13        1925-03-30      #>  7                    1         10 1941-06-06        1976-12-23      #>  8                    2          5 1987-11-20        1992-07-24      #>  9                    2          1 1988-07-10        2006-02-20      #> 10                    2          3 1959-03-16        1959-11-30      #> # ℹ 3 more variables: cohort_1_0_to_inf <dbl>, cohort_3_0_to_inf <dbl>, #> #   cohort_2_0_to_inf <dbl> mockDisconnect(cdm = cdm) # }"},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/addCohortName.html","id":null,"dir":"Reference","previous_headings":"","what":"Add cohort name for each cohort_definition_id — addCohortName","title":"Add cohort name for each cohort_definition_id — addCohortName","text":"Add cohort name cohort_definition_id","code":""},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/addCohortName.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add cohort name for each cohort_definition_id — addCohortName","text":"","code":"addCohortName(cohort)"},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/addCohortName.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add cohort name for each cohort_definition_id — addCohortName","text":"cohort cohort add cohort name","code":""},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/addCohortName.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add cohort name for each cohort_definition_id — addCohortName","text":"cohort extra column cohort names","code":""},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/addCohortName.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add cohort name for each cohort_definition_id — addCohortName","text":"","code":"# \\donttest{ library(PatientProfiles)  cdm <- mockPatientProfiles() cdm$cohort1 %>%   addCohortName() #> # Source:   SQL [10 x 5] #> # Database: DuckDB v1.1.1 [unknown@Linux 6.5.0-1025-azure:R 4.4.1/:memory:] #>    cohort_definition_id subject_id cohort_start_date cohort_end_date cohort_name #>                   <int>      <int> <date>            <date>          <chr>       #>  1                    2          1 1914-08-15        1930-02-14      cohort_2    #>  2                    2          7 1972-04-26        1990-01-12      cohort_2    #>  3                    2          8 1905-12-16        1911-08-26      cohort_2    #>  4                    2         10 1988-09-28        1988-10-03      cohort_2    #>  5                    3          5 1957-02-18        1959-10-28      cohort_3    #>  6                    2          4 1964-04-23        1966-07-15      cohort_2    #>  7                    1          2 1986-11-02        1987-08-24      cohort_1    #>  8                    2          3 1923-03-21        1923-06-06      cohort_2    #>  9                    2          6 1967-01-04        1970-09-09      cohort_2    #> 10                    3          9 1934-01-15        1937-01-05      cohort_3    # }"},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/addConceptIntersectCount.html","id":null,"dir":"Reference","previous_headings":"","what":"It creates column to indicate the count overlap information between a table and a concept — addConceptIntersectCount","title":"It creates column to indicate the count overlap information between a table and a concept — addConceptIntersectCount","text":"creates column indicate count overlap information table concept","code":""},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/addConceptIntersectCount.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"It creates column to indicate the count overlap information between a table and a concept — addConceptIntersectCount","text":"","code":"addConceptIntersectCount(   x,   conceptSet,   indexDate = \"cohort_start_date\",   censorDate = NULL,   window = list(c(0, Inf)),   targetStartDate = \"event_start_date\",   targetEndDate = \"event_end_date\",   nameStyle = \"{concept_name}_{window_name}\",   name = NULL )"},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/addConceptIntersectCount.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"It creates column to indicate the count overlap information between a table and a concept — addConceptIntersectCount","text":"x Table individuals cdm. conceptSet Concept set list. indexDate Variable x contains date compute intersection. censorDate whether censor overlap events date column x window window consider events . targetStartDate Event start date use intersection. targetEndDate Event end date use intersection. nameStyle naming added column columns, include required parameters. name Name new table, NULL temporary table returned.","code":""},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/addConceptIntersectCount.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"It creates column to indicate the count overlap information between a table and a concept — addConceptIntersectCount","text":"table added columns overlap information","code":""},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/addConceptIntersectCount.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"It creates column to indicate the count overlap information between a table and a concept — addConceptIntersectCount","text":"","code":"# \\donttest{ library(PatientProfiles) cdm <- mockPatientProfiles() concept <- dplyr::tibble(   concept_id = c(1125315),   domain_id = \"Drug\",   vocabulary_id = NA_character_,   concept_class_id = \"Ingredient\",   standard_concept = \"S\",   concept_code = NA_character_,   valid_start_date = as.Date(\"1900-01-01\"),   valid_end_date = as.Date(\"2099-01-01\"),   invalid_reason = NA_character_ ) %>%   dplyr::mutate(concept_name = paste0(\"concept: \", .data$concept_id)) cdm <- CDMConnector::insertTable(cdm, \"concept\", concept) result <- cdm$cohort1 %>%   addConceptIntersectCount(     conceptSet = list(\"acetaminophen\" = 1125315)   ) %>%   dplyr::collect() #> Warning: ! `codelist` contains numeric values, they are casted to integers. mockDisconnect(cdm = cdm) # }"},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/addConceptIntersectDate.html","id":null,"dir":"Reference","previous_headings":"","what":"It creates column to indicate the date overlap information between a table and a concept — addConceptIntersectDate","title":"It creates column to indicate the date overlap information between a table and a concept — addConceptIntersectDate","text":"creates column indicate date overlap information table concept","code":""},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/addConceptIntersectDate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"It creates column to indicate the date overlap information between a table and a concept — addConceptIntersectDate","text":"","code":"addConceptIntersectDate(   x,   conceptSet,   indexDate = \"cohort_start_date\",   censorDate = NULL,   window = list(c(0, Inf)),   targetDate = \"event_start_date\",   order = \"first\",   nameStyle = \"{concept_name}_{window_name}\",   name = NULL )"},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/addConceptIntersectDate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"It creates column to indicate the date overlap information between a table and a concept — addConceptIntersectDate","text":"x Table individuals cdm. conceptSet Concept set list. indexDate Variable x contains date compute intersection. censorDate whether censor overlap events date column x window window consider events . targetDate Event date use intersection. order last first date use date/days calculations. nameStyle naming added column columns, include required parameters. name Name new table, NULL temporary table returned.","code":""},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/addConceptIntersectDate.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"It creates column to indicate the date overlap information between a table and a concept — addConceptIntersectDate","text":"table added columns overlap information","code":""},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/addConceptIntersectDate.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"It creates column to indicate the date overlap information between a table and a concept — addConceptIntersectDate","text":"","code":"# \\donttest{ library(PatientProfiles) cdm <- mockPatientProfiles() concept <- dplyr::tibble(   concept_id = c(1125315),   domain_id = \"Drug\",   vocabulary_id = NA_character_,   concept_class_id = \"Ingredient\",   standard_concept = \"S\",   concept_code = NA_character_,   valid_start_date = as.Date(\"1900-01-01\"),   valid_end_date = as.Date(\"2099-01-01\"),   invalid_reason = NA_character_ ) %>%   dplyr::mutate(concept_name = paste0(\"concept: \", .data$concept_id)) cdm <- CDMConnector::insertTable(cdm, \"concept\", concept) result <- cdm$cohort1 %>%   addConceptIntersectDate(     conceptSet = list(\"acetaminophen\" = 1125315)   ) %>%   dplyr::collect() #> Warning: ! `codelist` contains numeric values, they are casted to integers. mockDisconnect(cdm = cdm) # }"},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/addConceptIntersectDays.html","id":null,"dir":"Reference","previous_headings":"","what":"It creates column to indicate the days of difference from an index date to a concept — addConceptIntersectDays","title":"It creates column to indicate the days of difference from an index date to a concept — addConceptIntersectDays","text":"creates column indicate days difference index date concept","code":""},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/addConceptIntersectDays.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"It creates column to indicate the days of difference from an index date to a concept — addConceptIntersectDays","text":"","code":"addConceptIntersectDays(   x,   conceptSet,   indexDate = \"cohort_start_date\",   censorDate = NULL,   window = list(c(0, Inf)),   targetDate = \"event_start_date\",   order = \"first\",   nameStyle = \"{concept_name}_{window_name}\",   name = NULL )"},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/addConceptIntersectDays.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"It creates column to indicate the days of difference from an index date to a concept — addConceptIntersectDays","text":"x Table individuals cdm. conceptSet Concept set list. indexDate Variable x contains date compute intersection. censorDate whether censor overlap events date column x window window consider events . targetDate Event date use intersection. order last first date use date/days calculations. nameStyle naming added column columns, include required parameters. name Name new table, NULL temporary table returned.","code":""},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/addConceptIntersectDays.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"It creates column to indicate the days of difference from an index date to a concept — addConceptIntersectDays","text":"table added columns overlap information","code":""},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/addConceptIntersectDays.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"It creates column to indicate the days of difference from an index date to a concept — addConceptIntersectDays","text":"","code":"# \\donttest{ library(PatientProfiles) cdm <- mockPatientProfiles() concept <- dplyr::tibble(   concept_id = c(1125315),   domain_id = \"Drug\",   vocabulary_id = NA_character_,   concept_class_id = \"Ingredient\",   standard_concept = \"S\",   concept_code = NA_character_,   valid_start_date = as.Date(\"1900-01-01\"),   valid_end_date = as.Date(\"2099-01-01\"),   invalid_reason = NA_character_ ) %>%   dplyr::mutate(concept_name = paste0(\"concept: \", .data$concept_id)) cdm <- CDMConnector::insertTable(cdm, \"concept\", concept) result <- cdm$cohort1 %>%   addConceptIntersectDays(     conceptSet = list(\"acetaminophen\" = 1125315)   ) %>%   dplyr::collect() #> Warning: ! `codelist` contains numeric values, they are casted to integers. mockDisconnect(cdm = cdm) # }"},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/addConceptIntersectFlag.html","id":null,"dir":"Reference","previous_headings":"","what":"It creates column to indicate the flag overlap information between a table and a concept — addConceptIntersectFlag","title":"It creates column to indicate the flag overlap information between a table and a concept — addConceptIntersectFlag","text":"creates column indicate flag overlap information table concept","code":""},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/addConceptIntersectFlag.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"It creates column to indicate the flag overlap information between a table and a concept — addConceptIntersectFlag","text":"","code":"addConceptIntersectFlag(   x,   conceptSet,   indexDate = \"cohort_start_date\",   censorDate = NULL,   window = list(c(0, Inf)),   targetStartDate = \"event_start_date\",   targetEndDate = \"event_end_date\",   nameStyle = \"{concept_name}_{window_name}\",   name = NULL )"},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/addConceptIntersectFlag.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"It creates column to indicate the flag overlap information between a table and a concept — addConceptIntersectFlag","text":"x Table individuals cdm. conceptSet Concept set list. indexDate Variable x contains date compute intersection. censorDate whether censor overlap events date column x window window consider events . targetStartDate Event start date use intersection. targetEndDate Event end date use intersection. nameStyle naming added column columns, include required parameters. name Name new table, NULL temporary table returned.","code":""},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/addConceptIntersectFlag.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"It creates column to indicate the flag overlap information between a table and a concept — addConceptIntersectFlag","text":"table added columns overlap information","code":""},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/addConceptIntersectFlag.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"It creates column to indicate the flag overlap information between a table and a concept — addConceptIntersectFlag","text":"","code":"# \\donttest{ library(PatientProfiles) cdm <- mockPatientProfiles() concept <- dplyr::tibble(   concept_id = c(1125315),   domain_id = \"Drug\",   vocabulary_id = NA_character_,   concept_class_id = \"Ingredient\",   standard_concept = \"S\",   concept_code = NA_character_,   valid_start_date = as.Date(\"1900-01-01\"),   valid_end_date = as.Date(\"2099-01-01\"),   invalid_reason = NA_character_ ) %>%   dplyr::mutate(concept_name = paste0(\"concept: \", .data$concept_id)) cdm <- CDMConnector::insertTable(cdm, \"concept\", concept) result <- cdm$cohort1 %>%   addConceptIntersectFlag(     conceptSet = list(\"acetaminophen\" = 1125315)   ) %>%   dplyr::collect() #> Warning: ! `codelist` contains numeric values, they are casted to integers. mockDisconnect(cdm = cdm) # }"},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/addDateOfBirth.html","id":null,"dir":"Reference","previous_headings":"","what":"Add a column with the individual birth date — addDateOfBirth","title":"Add a column with the individual birth date — addDateOfBirth","text":"Add column individual birth date","code":""},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/addDateOfBirth.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add a column with the individual birth date — addDateOfBirth","text":"","code":"addDateOfBirth(   x,   dateOfBirthName = \"date_of_birth\",   missingDay = 1,   missingMonth = 1,   imposeDay = FALSE,   imposeMonth = FALSE,   name = NULL )"},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/addDateOfBirth.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add a column with the individual birth date — addDateOfBirth","text":"x Table cdm contains 'person_id' 'subject_id'. dateOfBirthName Name column added date birth. missingDay Day individuals imposed day birth. missingMonth Month individuals imposed month birth. imposeDay Whether impose day birth. imposeMonth Whether impose month birth. name Name new table, NULL temporary table returned.","code":""},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/addDateOfBirth.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add a column with the individual birth date — addDateOfBirth","text":"function returns table x extra column contains date birth.","code":""},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/addDateOfBirth.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add a column with the individual birth date — addDateOfBirth","text":"","code":"# \\donttest{ library(PatientProfiles) cdm <- mockPatientProfiles() cdm$cohort1 %>%   addDateOfBirth() #> # Source:   table<og_095_1729812629> [10 x 5] #> # Database: DuckDB v1.1.1 [unknown@Linux 6.5.0-1025-azure:R 4.4.1/:memory:] #>    cohort_definition_id subject_id cohort_start_date cohort_end_date #>                   <int>      <int> <date>            <date>          #>  1                    3          1 1995-12-06        2000-02-18      #>  2                    1         10 1970-02-09        1971-05-02      #>  3                    2          5 1932-05-07        1979-02-05      #>  4                    1          6 1997-10-21        2000-05-11      #>  5                    2          9 1901-02-25        1905-02-05      #>  6                    1          8 1953-07-29        1957-02-01      #>  7                    2          2 1990-06-10        2005-07-27      #>  8                    2          3 1943-10-16        1951-02-27      #>  9                    2          7 1967-10-24        1969-10-11      #> 10                    1          4 1907-06-21        1908-02-22      #> # ℹ 1 more variable: date_of_birth <date> mockDisconnect(cdm = cdm) # }"},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/addDateOfBirthQuery.html","id":null,"dir":"Reference","previous_headings":"","what":"Query to add a column with the individual birth date — addDateOfBirthQuery","title":"Query to add a column with the individual birth date — addDateOfBirthQuery","text":"`r lifecycle::badge(\"experimental\")` `addDateOfBirth()`, except query computed table.","code":""},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/addDateOfBirthQuery.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Query to add a column with the individual birth date — addDateOfBirthQuery","text":"","code":"addDateOfBirthQuery(   x,   dateOfBirthName = \"date_of_birth\",   missingDay = 1,   missingMonth = 1,   imposeDay = FALSE,   imposeMonth = FALSE )"},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/addDateOfBirthQuery.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Query to add a column with the individual birth date — addDateOfBirthQuery","text":"x Table cdm contains 'person_id' 'subject_id'. dateOfBirthName Name column added date birth. missingDay Day individuals imposed day birth. missingMonth Month individuals imposed month birth. imposeDay Whether impose day birth. imposeMonth Whether impose month birth.","code":""},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/addDateOfBirthQuery.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Query to add a column with the individual birth date — addDateOfBirthQuery","text":"function returns table x extra column contains date birth.","code":""},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/addDateOfBirthQuery.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Query to add a column with the individual birth date — addDateOfBirthQuery","text":"","code":"# \\donttest{ library(PatientProfiles) cdm <- mockPatientProfiles() cdm$cohort1 %>%   addDateOfBirthQuery() #> # Source:   SQL [10 x 5] #> # Database: DuckDB v1.1.1 [unknown@Linux 6.5.0-1025-azure:R 4.4.1/:memory:] #>    cohort_definition_id subject_id cohort_start_date cohort_end_date #>                   <int>      <int> <date>            <date>          #>  1                    1          3 1985-10-10        1988-05-17      #>  2                    2          7 1917-07-19        1918-04-18      #>  3                    3          9 1981-04-20        1983-03-20      #>  4                    1         10 1912-03-25        1912-10-07      #>  5                    1          5 1948-10-10        1950-04-09      #>  6                    3          4 1983-11-17        1984-02-17      #>  7                    1          6 1925-05-09        1940-02-16      #>  8                    1          2 1960-05-13        1971-08-12      #>  9                    2          1 1908-07-14        1925-08-08      #> 10                    3          8 1996-03-06        2012-01-08      #> # ℹ 1 more variable: date_of_birth <date> mockDisconnect(cdm = cdm) # }"},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/addDeathDate.html","id":null,"dir":"Reference","previous_headings":"","what":"Add date of death for individuals. Only death within the same observation period than `indexDate` will be observed. — addDeathDate","title":"Add date of death for individuals. Only death within the same observation period than `indexDate` will be observed. — addDeathDate","text":"Add date death individuals. death within observation period `indexDate` observed.","code":""},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/addDeathDate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add date of death for individuals. Only death within the same observation period than `indexDate` will be observed. — addDeathDate","text":"","code":"addDeathDate(   x,   indexDate = \"cohort_start_date\",   censorDate = NULL,   window = c(0, Inf),   deathDateName = \"date_of_death\",   name = NULL )"},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/addDeathDate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add date of death for individuals. Only death within the same observation period than `indexDate` will be observed. — addDeathDate","text":"x Table individuals cdm. indexDate Variable x contains window origin. censorDate Name column stop followup. window window consider events . deathDateName name new column added. name Name new table, NULL temporary table returned.","code":""},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/addDeathDate.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add date of death for individuals. Only death within the same observation period than `indexDate` will be observed. — addDeathDate","text":"table x added column death information added.","code":""},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/addDeathDate.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add date of death for individuals. Only death within the same observation period than `indexDate` will be observed. — addDeathDate","text":"","code":"# \\donttest{ cdm <- mockPatientProfiles() cdm$cohort1 %>%   addDeathDate() #> # Source:   table<og_096_1729812633> [10 x 5] #> # Database: DuckDB v1.1.1 [unknown@Linux 6.5.0-1025-azure:R 4.4.1/:memory:] #>    cohort_definition_id subject_id cohort_start_date cohort_end_date #>                   <int>      <int> <date>            <date>          #>  1                    3          5 1983-08-14        1985-03-14      #>  2                    2         10 1932-03-19        1937-06-18      #>  3                    3          6 1982-10-28        1984-11-23      #>  4                    3          1 1970-09-08        1973-10-24      #>  5                    2          9 1964-12-08        1965-01-03      #>  6                    1          8 1973-11-18        1986-04-14      #>  7                    2          2 1971-11-12        1986-09-18      #>  8                    2          4 1982-09-22        1982-10-23      #>  9                    1          3 1949-03-02        1950-06-16      #> 10                    2          7 1961-07-25        1987-09-14      #> # ℹ 1 more variable: date_of_death <date> mockDisconnect(cdm = cdm) # }"},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/addDeathDays.html","id":null,"dir":"Reference","previous_headings":"","what":"Add days to death for individuals. Only death within the same observation period than `indexDate` will be observed. — addDeathDays","title":"Add days to death for individuals. Only death within the same observation period than `indexDate` will be observed. — addDeathDays","text":"Add days death individuals. death within observation period `indexDate` observed.","code":""},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/addDeathDays.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add days to death for individuals. Only death within the same observation period than `indexDate` will be observed. — addDeathDays","text":"","code":"addDeathDays(   x,   indexDate = \"cohort_start_date\",   censorDate = NULL,   window = c(0, Inf),   deathDaysName = \"days_to_death\",   name = NULL )"},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/addDeathDays.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add days to death for individuals. Only death within the same observation period than `indexDate` will be observed. — addDeathDays","text":"x Table individuals cdm. indexDate Variable x contains window origin. censorDate Name column stop followup. window window consider events . deathDaysName name new column added. name Name new table, NULL temporary table returned.","code":""},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/addDeathDays.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add days to death for individuals. Only death within the same observation period than `indexDate` will be observed. — addDeathDays","text":"table x added column death information added.","code":""},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/addDeathDays.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add days to death for individuals. Only death within the same observation period than `indexDate` will be observed. — addDeathDays","text":"","code":"# \\donttest{ cdm <- mockPatientProfiles() cdm$cohort1 %>%   addDeathDays() #> # Source:   table<og_105_1729812635> [10 x 5] #> # Database: DuckDB v1.1.1 [unknown@Linux 6.5.0-1025-azure:R 4.4.1/:memory:] #>    cohort_definition_id subject_id cohort_start_date cohort_end_date #>                   <int>      <int> <date>            <date>          #>  1                    1          5 1934-08-22        1950-08-29      #>  2                    2          2 1936-01-16        1936-04-04      #>  3                    2          3 1955-01-04        1956-03-20      #>  4                    2          8 1942-11-03        1943-06-16      #>  5                    3          1 1947-02-03        1977-02-19      #>  6                    1          6 1962-10-17        1965-05-01      #>  7                    2          9 1999-08-05        2000-10-01      #>  8                    3          4 1971-12-20        1987-07-27      #>  9                    2         10 1981-08-06        1983-02-11      #> 10                    3          7 1936-10-05        1949-08-05      #> # ℹ 1 more variable: days_to_death <dbl> mockDisconnect(cdm = cdm) # }"},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/addDeathFlag.html","id":null,"dir":"Reference","previous_headings":"","what":"Add flag for death for individuals. Only death within the same observation period than `indexDate` will be observed. — addDeathFlag","title":"Add flag for death for individuals. Only death within the same observation period than `indexDate` will be observed. — addDeathFlag","text":"Add flag death individuals. death within observation period `indexDate` observed.","code":""},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/addDeathFlag.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add flag for death for individuals. Only death within the same observation period than `indexDate` will be observed. — addDeathFlag","text":"","code":"addDeathFlag(   x,   indexDate = \"cohort_start_date\",   censorDate = NULL,   window = c(0, Inf),   deathFlagName = \"death\",   name = NULL )"},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/addDeathFlag.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add flag for death for individuals. Only death within the same observation period than `indexDate` will be observed. — addDeathFlag","text":"x Table individuals cdm. indexDate Variable x contains window origin. censorDate Name column stop followup. window window consider events . deathFlagName name new column added. name Name new table, NULL temporary table returned.","code":""},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/addDeathFlag.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add flag for death for individuals. Only death within the same observation period than `indexDate` will be observed. — addDeathFlag","text":"table x added column death information added.","code":""},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/addDeathFlag.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add flag for death for individuals. Only death within the same observation period than `indexDate` will be observed. — addDeathFlag","text":"","code":"# \\donttest{ cdm <- mockPatientProfiles() cdm$cohort1 %>%   addDeathFlag() #> # Source:   table<og_114_1729812638> [10 x 5] #> # Database: DuckDB v1.1.1 [unknown@Linux 6.5.0-1025-azure:R 4.4.1/:memory:] #>    cohort_definition_id subject_id cohort_start_date cohort_end_date death #>                   <int>      <int> <date>            <date>          <dbl> #>  1                    3          4 1971-09-27        1990-08-29          0 #>  2                    1         10 1975-10-13        1977-01-16          0 #>  3                    3          8 1939-02-13        1943-09-07          0 #>  4                    2          1 1957-08-08        1963-03-21          0 #>  5                    2          3 1920-07-08        1921-08-01          0 #>  6                    3          6 1933-03-17        1933-04-28          0 #>  7                    1          7 2016-11-07        2023-10-18          0 #>  8                    1          9 1991-03-27        2001-08-04          0 #>  9                    2          2 1981-11-18        1995-08-28          0 #> 10                    2          5 1983-05-05        1984-10-21          0 mockDisconnect(cdm = cdm) # }"},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/addDemographics.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute demographic characteristics at a certain date — addDemographics","title":"Compute demographic characteristics at a certain date — addDemographics","text":"Compute demographic characteristics certain date","code":""},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/addDemographics.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute demographic characteristics at a certain date — addDemographics","text":"","code":"addDemographics(   x,   indexDate = \"cohort_start_date\",   age = TRUE,   ageName = \"age\",   ageMissingMonth = 1,   ageMissingDay = 1,   ageImposeMonth = FALSE,   ageImposeDay = FALSE,   ageGroup = NULL,   missingAgeGroupValue = \"None\",   sex = TRUE,   sexName = \"sex\",   missingSexValue = \"None\",   priorObservation = TRUE,   priorObservationName = \"prior_observation\",   priorObservationType = \"days\",   futureObservation = TRUE,   futureObservationName = \"future_observation\",   futureObservationType = \"days\",   dateOfBirth = FALSE,   dateOfBirthName = \"date_of_birth\",   name = NULL )"},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/addDemographics.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute demographic characteristics at a certain date — addDemographics","text":"x Table individuals cdm. indexDate Variable x contains date compute demographics characteristics. age TRUE FALSE. TRUE, age calculated relative indexDate. ageName Age variable name. ageMissingMonth Month year assigned individuals missing month birth. ageMissingDay day month assigned individuals missing day birth. ageImposeMonth TRUE FALSE. Whether month date birth considered missing individuals. ageImposeDay TRUE FALSE. Whether day date birth considered missing individuals. ageGroup NULL, list ageGroup vectors. missingAgeGroupValue Value include missing age. sex TRUE FALSE. TRUE, sex identified. sexName Sex variable name. missingSexValue Value include missing sex. priorObservation TRUE FALSE. TRUE, days start current observation period indexDate calculated. priorObservationName Prior observation variable name. priorObservationType Whether return \"date\" number \"days\". futureObservation TRUE FALSE. TRUE, days indexDate end current observation period calculated. futureObservationName Future observation variable name. futureObservationType Whether return \"date\" number \"days\". dateOfBirth TRUE FALSE, true date birth return. dateOfBirthName dateOfBirth column name. name Name new table, NULL temporary table returned.","code":""},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/addDemographics.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute demographic characteristics at a certain date — addDemographics","text":"cohort table added demographic information columns.","code":""},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/addDemographics.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute demographic characteristics at a certain date — addDemographics","text":"","code":"# \\donttest{ library(PatientProfiles) cdm <- mockPatientProfiles() cdm$cohort1 %>%   addDemographics() #> # Source:   table<og_127_1729812641> [10 x 8] #> # Database: DuckDB v1.1.1 [unknown@Linux 6.5.0-1025-azure:R 4.4.1/:memory:] #>    cohort_definition_id subject_id cohort_start_date cohort_end_date   age sex   #>                   <int>      <int> <date>            <date>          <int> <chr> #>  1                    3          1 1956-09-28        1980-11-05         23 Male  #>  2                    2          2 1936-02-11        1948-05-26         29 Male  #>  3                    2          3 1901-01-02        1905-04-21          0 Fema… #>  4                    1          4 1983-12-07        1989-03-15         37 Fema… #>  5                    3          5 2005-05-07        2005-07-23         42 Male  #>  6                    3          6 1927-08-15        1928-04-28          2 Fema… #>  7                    2          7 1982-01-30        1996-07-07          3 Male  #>  8                    2          8 1977-03-24        1980-10-05         22 Male  #>  9                    1          9 1957-07-05        1958-07-23         12 Fema… #> 10                    3         10 1939-11-12        1950-11-07         12 Fema… #> # ℹ 2 more variables: prior_observation <int>, future_observation <int> mockDisconnect(cdm = cdm) # }"},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/addDemographicsQuery.html","id":null,"dir":"Reference","previous_headings":"","what":"Query to add demographic characteristics at a certain date — addDemographicsQuery","title":"Query to add demographic characteristics at a certain date — addDemographicsQuery","text":"`r lifecycle::badge(\"experimental\")` `addDemographics()`, except query computed table.","code":""},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/addDemographicsQuery.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Query to add demographic characteristics at a certain date — addDemographicsQuery","text":"","code":"addDemographicsQuery(   x,   indexDate = \"cohort_start_date\",   age = TRUE,   ageName = \"age\",   ageMissingMonth = 1,   ageMissingDay = 1,   ageImposeMonth = FALSE,   ageImposeDay = FALSE,   ageGroup = NULL,   missingAgeGroupValue = \"None\",   sex = TRUE,   sexName = \"sex\",   missingSexValue = \"None\",   priorObservation = TRUE,   priorObservationName = \"prior_observation\",   priorObservationType = \"days\",   futureObservation = TRUE,   futureObservationName = \"future_observation\",   futureObservationType = \"days\",   dateOfBirth = FALSE,   dateOfBirthName = \"date_of_birth\" )"},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/addDemographicsQuery.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Query to add demographic characteristics at a certain date — addDemographicsQuery","text":"x Table individuals cdm. indexDate Variable x contains date compute demographics characteristics. age TRUE FALSE. TRUE, age calculated relative indexDate. ageName Age variable name. ageMissingMonth Month year assigned individuals missing month birth. ageMissingDay day month assigned individuals missing day birth. ageImposeMonth TRUE FALSE. Whether month date birth considered missing individuals. ageImposeDay TRUE FALSE. Whether day date birth considered missing individuals. ageGroup NULL, list ageGroup vectors. missingAgeGroupValue Value include missing age. sex TRUE FALSE. TRUE, sex identified. sexName Sex variable name. missingSexValue Value include missing sex. priorObservation TRUE FALSE. TRUE, days start current observation period indexDate calculated. priorObservationName Prior observation variable name. priorObservationType Whether return \"date\" number \"days\". futureObservation TRUE FALSE. TRUE, days indexDate end current observation period calculated. futureObservationName Future observation variable name. futureObservationType Whether return \"date\" number \"days\". dateOfBirth TRUE FALSE, true date birth return. dateOfBirthName dateOfBirth column name.","code":""},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/addDemographicsQuery.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Query to add demographic characteristics at a certain date — addDemographicsQuery","text":"cohort table added demographic information columns.","code":""},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/addDemographicsQuery.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Query to add demographic characteristics at a certain date — addDemographicsQuery","text":"","code":"# \\donttest{ library(PatientProfiles) cdm <- mockPatientProfiles() cdm$cohort1 %>%   addDemographicsQuery() #> # Source:   SQL [10 x 8] #> # Database: DuckDB v1.1.1 [unknown@Linux 6.5.0-1025-azure:R 4.4.1/:memory:] #>    cohort_definition_id subject_id cohort_start_date cohort_end_date   age sex   #>                   <int>      <int> <date>            <date>          <int> <chr> #>  1                    3          1 1983-04-25        1993-07-26         23 Male  #>  2                    1          2 1905-10-24        1908-08-13          3 Male  #>  3                    3          3 1921-01-15        1924-04-30          2 Fema… #>  4                    2          4 1950-06-13        1950-07-10         45 Male  #>  5                    3          5 1979-06-02        1981-09-09          4 Fema… #>  6                    1          6 1946-05-25        1971-02-17         25 Fema… #>  7                    2          7 1947-04-22        1962-11-15         18 Fema… #>  8                    1          8 2009-05-22        2015-03-29         32 Male  #>  9                    2          9 1960-02-10        1960-04-23         36 Fema… #> 10                    3         10 1995-12-11        1997-12-04         15 Fema… #> # ℹ 2 more variables: prior_observation <int>, future_observation <int> mockDisconnect(cdm = cdm) # }"},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/addFutureObservation.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute the number of days till the end of the observation period at a certain date — addFutureObservation","title":"Compute the number of days till the end of the observation period at a certain date — addFutureObservation","text":"Compute number days till end observation period certain date","code":""},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/addFutureObservation.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute the number of days till the end of the observation period at a certain date — addFutureObservation","text":"","code":"addFutureObservation(   x,   indexDate = \"cohort_start_date\",   futureObservationName = \"future_observation\",   futureObservationType = \"days\",   name = NULL )"},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/addFutureObservation.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute the number of days till the end of the observation period at a certain date — addFutureObservation","text":"x Table individuals cdm. indexDate Variable x contains date compute future observation. futureObservationName name new column added. futureObservationType Whether return \"date\" number \"days\". name Name new table, NULL temporary table returned.","code":""},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/addFutureObservation.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute the number of days till the end of the observation period at a certain date — addFutureObservation","text":"cohort table added column containing future observation individuals.","code":""},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/addFutureObservation.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute the number of days till the end of the observation period at a certain date — addFutureObservation","text":"","code":"# \\donttest{ cdm <- mockPatientProfiles()  cdm$cohort1 %>%   addFutureObservation() #> # Source:   table<og_128_1729812645> [10 x 5] #> # Database: DuckDB v1.1.1 [unknown@Linux 6.5.0-1025-azure:R 4.4.1/:memory:] #>    cohort_definition_id subject_id cohort_start_date cohort_end_date #>                   <int>      <int> <date>            <date>          #>  1                    1          1 1991-07-07        2000-10-09      #>  2                    1          2 1951-05-23        1952-08-27      #>  3                    3          3 1914-06-22        1941-06-28      #>  4                    3          4 1965-10-17        1985-05-25      #>  5                    2          5 1983-04-22        1986-04-23      #>  6                    2          6 1955-05-27        1958-12-17      #>  7                    2          7 1980-06-12        1991-07-27      #>  8                    2          8 1973-03-12        1979-05-29      #>  9                    1          9 2001-03-28        2002-12-07      #> 10                    2         10 1964-03-14        1974-10-16      #> # ℹ 1 more variable: future_observation <int> mockDisconnect(cdm = cdm) # }"},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/addFutureObservationQuery.html","id":null,"dir":"Reference","previous_headings":"","what":"Query to add the number of days till the end of the observation period at a certain date — addFutureObservationQuery","title":"Query to add the number of days till the end of the observation period at a certain date — addFutureObservationQuery","text":"`r lifecycle::badge(\"experimental\")` `addFutureObservation()`, except query computed table.","code":""},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/addFutureObservationQuery.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Query to add the number of days till the end of the observation period at a certain date — addFutureObservationQuery","text":"","code":"addFutureObservationQuery(   x,   indexDate = \"cohort_start_date\",   futureObservationName = \"future_observation\",   futureObservationType = \"days\" )"},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/addFutureObservationQuery.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Query to add the number of days till the end of the observation period at a certain date — addFutureObservationQuery","text":"x Table individuals cdm. indexDate Variable x contains date compute future observation. futureObservationName name new column added. futureObservationType Whether return \"date\" number \"days\".","code":""},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/addFutureObservationQuery.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Query to add the number of days till the end of the observation period at a certain date — addFutureObservationQuery","text":"cohort table added column containing future observation individuals.","code":""},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/addFutureObservationQuery.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Query to add the number of days till the end of the observation period at a certain date — addFutureObservationQuery","text":"","code":"# \\donttest{ cdm <- mockPatientProfiles()  cdm$cohort1 %>%   addFutureObservationQuery() #> # Source:   SQL [10 x 5] #> # Database: DuckDB v1.1.1 [unknown@Linux 6.5.0-1025-azure:R 4.4.1/:memory:] #>    cohort_definition_id subject_id cohort_start_date cohort_end_date #>                   <int>      <int> <date>            <date>          #>  1                    3          1 2013-02-02        2013-03-12      #>  2                    2          2 1936-10-05        1968-09-14      #>  3                    3          3 1949-03-17        1951-03-09      #>  4                    1          4 1967-01-14        1972-08-10      #>  5                    3          5 1988-05-20        1996-03-03      #>  6                    3          6 1999-03-12        2000-04-26      #>  7                    3          7 1935-11-12        1938-02-26      #>  8                    3          8 1918-08-31        1935-04-14      #>  9                    2          9 1969-12-14        1969-12-15      #> 10                    1         10 1926-05-17        1930-07-01      #> # ℹ 1 more variable: future_observation <int> mockDisconnect(cdm = cdm) # }"},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/addInObservation.html","id":null,"dir":"Reference","previous_headings":"","what":"Indicate if a certain record is within the observation period — addInObservation","title":"Indicate if a certain record is within the observation period — addInObservation","text":"Indicate certain record within observation period","code":""},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/addInObservation.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Indicate if a certain record is within the observation period — addInObservation","text":"","code":"addInObservation(   x,   indexDate = \"cohort_start_date\",   window = c(0, 0),   completeInterval = FALSE,   nameStyle = \"in_observation\",   name = NULL )"},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/addInObservation.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Indicate if a certain record is within the observation period — addInObservation","text":"x Table individuals cdm. indexDate Variable x contains date compute observation flag. window window consider events . completeInterval individuals observation full window. nameStyle Name new columns create, must contain \"window_name\" multiple windows provided. name Name new table, NULL temporary table returned.","code":""},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/addInObservation.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Indicate if a certain record is within the observation period — addInObservation","text":"cohort table added binary column assessing inObservation.","code":""},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/addInObservation.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Indicate if a certain record is within the observation period — addInObservation","text":"","code":"# \\donttest{ cdm <- mockPatientProfiles() cdm$cohort1 %>%   addInObservation() #> # Source:   table<og_130_1729812649> [10 x 5] #> # Database: DuckDB v1.1.1 [unknown@Linux 6.5.0-1025-azure:R 4.4.1/:memory:] #>    cohort_definition_id subject_id cohort_start_date cohort_end_date #>                   <int>      <int> <date>            <date>          #>  1                    2          9 1975-09-27        1987-04-04      #>  2                    2         10 1966-07-24        1975-12-24      #>  3                    2          7 1939-09-05        1946-06-23      #>  4                    3          4 1979-10-18        1982-12-15      #>  5                    2          6 1939-03-18        1941-07-16      #>  6                    2          3 1987-05-07        1988-02-24      #>  7                    3          2 1997-04-14        1999-01-24      #>  8                    3          5 1975-11-14        1979-07-31      #>  9                    2          1 1969-07-29        1969-10-18      #> 10                    3          8 1961-03-12        1966-02-02      #> # ℹ 1 more variable: in_observation <int> mockDisconnect(cdm = cdm) # }"},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/addInObservationQuery.html","id":null,"dir":"Reference","previous_headings":"","what":"Query to add a new column to indicate if a certain record is within the observation period — addInObservationQuery","title":"Query to add a new column to indicate if a certain record is within the observation period — addInObservationQuery","text":"`r lifecycle::badge(\"experimental\")` `addInObservation()`, except query computed table.","code":""},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/addInObservationQuery.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Query to add a new column to indicate if a certain record is within the observation period — addInObservationQuery","text":"","code":"addInObservationQuery(   x,   indexDate = \"cohort_start_date\",   window = c(0, 0),   completeInterval = FALSE,   nameStyle = \"in_observation\" )"},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/addInObservationQuery.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Query to add a new column to indicate if a certain record is within the observation period — addInObservationQuery","text":"x Table individuals cdm. indexDate Variable x contains date compute observation flag. window window consider events . completeInterval individuals observation full window. nameStyle Name new columns create, must contain \"window_name\" multiple windows provided.","code":""},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/addInObservationQuery.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Query to add a new column to indicate if a certain record is within the observation period — addInObservationQuery","text":"cohort table added binary column assessing inObservation.","code":""},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/addInObservationQuery.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Query to add a new column to indicate if a certain record is within the observation period — addInObservationQuery","text":"","code":"# \\donttest{ cdm <- mockPatientProfiles() cdm$cohort1 %>%   addInObservationQuery() #> # Source:   SQL [10 x 5] #> # Database: DuckDB v1.1.1 [unknown@Linux 6.5.0-1025-azure:R 4.4.1/:memory:] #>    cohort_definition_id subject_id cohort_start_date cohort_end_date #>                   <int>      <int> <date>            <date>          #>  1                    2          1 1946-05-20        1965-01-25      #>  2                    2          2 1998-12-23        1999-08-08      #>  3                    2          3 1926-08-03        1927-01-13      #>  4                    3          4 1995-11-26        2001-02-07      #>  5                    1          5 1953-07-20        1968-01-20      #>  6                    3          6 1979-02-04        1981-11-02      #>  7                    2          7 1957-01-27        1960-07-25      #>  8                    2          8 1915-06-28        1937-04-22      #>  9                    2          9 1967-10-06        1987-10-15      #> 10                    1         10 1978-06-22        1979-08-27      #> # ℹ 1 more variable: in_observation <int> mockDisconnect(cdm = cdm) # }"},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/addObservationPeriodId.html","id":null,"dir":"Reference","previous_headings":"","what":"Add the ordinal number of the observation period associated that a given date is in. — addObservationPeriodId","title":"Add the ordinal number of the observation period associated that a given date is in. — addObservationPeriodId","text":"Add ordinal number observation period associated given date .","code":""},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/addObservationPeriodId.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add the ordinal number of the observation period associated that a given date is in. — addObservationPeriodId","text":"","code":"addObservationPeriodId(   x,   indexDate = \"cohort_start_date\",   nameObservationPeriodId = \"observation_period_id\",   name = NULL )"},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/addObservationPeriodId.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add the ordinal number of the observation period associated that a given date is in. — addObservationPeriodId","text":"x Table individuals cdm. indexDate Variable x contains date compute observation flag. nameObservationPeriodId Name new colum. name Name new table, NULL temporary table returned.","code":""},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/addObservationPeriodId.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add the ordinal number of the observation period associated that a given date is in. — addObservationPeriodId","text":"Table current observation period id added.","code":""},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/addObservationPeriodId.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add the ordinal number of the observation period associated that a given date is in. — addObservationPeriodId","text":"","code":"# \\donttest{ cdm <- mockPatientProfiles() cdm$cohort1 %>%   addObservationPeriodId() #> # Source:   table<og_131_1729812652> [10 x 5] #> # Database: DuckDB v1.1.1 [unknown@Linux 6.5.0-1025-azure:R 4.4.1/:memory:] #>    cohort_definition_id subject_id cohort_start_date cohort_end_date #>                   <int>      <int> <date>            <date>          #>  1                    1          7 1963-09-01        1970-06-15      #>  2                    3          4 1967-10-29        1982-02-25      #>  3                    3          9 1969-04-02        2003-01-13      #>  4                    2          2 1988-03-12        1989-06-19      #>  5                    1          5 1914-06-18        1915-06-05      #>  6                    3         10 1967-11-15        1985-06-29      #>  7                    1          3 1919-09-25        1945-11-26      #>  8                    3          1 1978-01-28        1979-09-11      #>  9                    3          8 1949-04-18        1952-07-19      #> 10                    2          6 1941-09-17        1952-02-12      #> # ℹ 1 more variable: observation_period_id <int> mockDisconnect(cdm = cdm) # }"},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/addObservationPeriodIdQuery.html","id":null,"dir":"Reference","previous_headings":"","what":"Add the ordinal number of the observation period associated that a given date is in. Result is not computed, only query is added. — addObservationPeriodIdQuery","title":"Add the ordinal number of the observation period associated that a given date is in. Result is not computed, only query is added. — addObservationPeriodIdQuery","text":"Add ordinal number observation period associated given date . Result computed, query added.","code":""},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/addObservationPeriodIdQuery.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add the ordinal number of the observation period associated that a given date is in. Result is not computed, only query is added. — addObservationPeriodIdQuery","text":"","code":"addObservationPeriodIdQuery(   x,   indexDate = \"cohort_start_date\",   nameObservationPeriodId = \"observation_period_id\" )"},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/addObservationPeriodIdQuery.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add the ordinal number of the observation period associated that a given date is in. Result is not computed, only query is added. — addObservationPeriodIdQuery","text":"x Table individuals cdm. indexDate Variable x contains date compute observation flag. nameObservationPeriodId Name new colum.","code":""},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/addObservationPeriodIdQuery.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add the ordinal number of the observation period associated that a given date is in. Result is not computed, only query is added. — addObservationPeriodIdQuery","text":"Table current observation period id added.","code":""},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/addObservationPeriodIdQuery.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add the ordinal number of the observation period associated that a given date is in. Result is not computed, only query is added. — addObservationPeriodIdQuery","text":"","code":"# \\donttest{ cdm <- mockPatientProfiles() cdm$cohort1 %>%   addObservationPeriodIdQuery() #> # Source:   SQL [10 x 5] #> # Database: DuckDB v1.1.1 [unknown@Linux 6.5.0-1025-azure:R 4.4.1/:memory:] #>    cohort_definition_id subject_id cohort_start_date cohort_end_date #>                   <int>      <int> <date>            <date>          #>  1                    1          4 1971-09-27        1973-01-15      #>  2                    1          6 1962-02-23        1966-12-24      #>  3                    1          9 1933-05-29        1938-08-25      #>  4                    3         10 1911-09-06        1925-12-25      #>  5                    1          1 1979-09-10        1982-09-10      #>  6                    3          2 1944-01-15        1952-01-20      #>  7                    2          7 1977-07-27        1997-12-15      #>  8                    1          3 1948-02-24        1950-08-03      #>  9                    1          8 1933-05-09        1938-02-16      #> 10                    2          5 1914-05-22        1937-10-07      #> # ℹ 1 more variable: observation_period_id <int> mockDisconnect(cdm = cdm) # }"},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/addPriorObservation.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute the number of days of prior observation in the current observation period at a certain date — addPriorObservation","title":"Compute the number of days of prior observation in the current observation period at a certain date — addPriorObservation","text":"Compute number days prior observation current observation period certain date","code":""},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/addPriorObservation.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute the number of days of prior observation in the current observation period at a certain date — addPriorObservation","text":"","code":"addPriorObservation(   x,   indexDate = \"cohort_start_date\",   priorObservationName = \"prior_observation\",   priorObservationType = \"days\",   name = NULL )"},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/addPriorObservation.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute the number of days of prior observation in the current observation period at a certain date — addPriorObservation","text":"x Table individuals cdm. indexDate Variable x contains date compute prior observation. priorObservationName name new column added. priorObservationType Whether return \"date\" number \"days\". name Name new table, NULL temporary table returned.","code":""},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/addPriorObservation.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute the number of days of prior observation in the current observation period at a certain date — addPriorObservation","text":"cohort table added column containing prior observation individuals.","code":""},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/addPriorObservation.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute the number of days of prior observation in the current observation period at a certain date — addPriorObservation","text":"","code":"# \\donttest{ cdm <- mockPatientProfiles()  cdm$cohort1 %>%   addPriorObservation() #> # Source:   table<og_132_1729812656> [10 x 5] #> # Database: DuckDB v1.1.1 [unknown@Linux 6.5.0-1025-azure:R 4.4.1/:memory:] #>    cohort_definition_id subject_id cohort_start_date cohort_end_date #>                   <int>      <int> <date>            <date>          #>  1                    1          1 1968-11-03        1971-01-10      #>  2                    1          2 1948-01-28        1957-12-17      #>  3                    2          3 1924-04-27        1932-10-04      #>  4                    3          4 1916-10-19        1920-09-01      #>  5                    2          5 1985-06-29        1987-12-31      #>  6                    2          6 1993-04-29        1996-06-11      #>  7                    3          7 1922-11-18        1949-08-28      #>  8                    1          8 1977-08-06        1995-12-04      #>  9                    1          9 1991-06-24        2005-05-09      #> 10                    1         10 1948-02-23        1951-09-25      #> # ℹ 1 more variable: prior_observation <int> mockDisconnect(cdm = cdm) # }"},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/addPriorObservationQuery.html","id":null,"dir":"Reference","previous_headings":"","what":"Query to add the number of days of prior observation in the current observation period at a certain date — addPriorObservationQuery","title":"Query to add the number of days of prior observation in the current observation period at a certain date — addPriorObservationQuery","text":"`r lifecycle::badge(\"experimental\")` `addPriorObservation()`, except query computed table.","code":""},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/addPriorObservationQuery.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Query to add the number of days of prior observation in the current observation period at a certain date — addPriorObservationQuery","text":"","code":"addPriorObservationQuery(   x,   indexDate = \"cohort_start_date\",   priorObservationName = \"prior_observation\",   priorObservationType = \"days\" )"},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/addPriorObservationQuery.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Query to add the number of days of prior observation in the current observation period at a certain date — addPriorObservationQuery","text":"x Table individuals cdm. indexDate Variable x contains date compute prior observation. priorObservationName name new column added. priorObservationType Whether return \"date\" number \"days\".","code":""},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/addPriorObservationQuery.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Query to add the number of days of prior observation in the current observation period at a certain date — addPriorObservationQuery","text":"cohort table added column containing prior observation individuals.","code":""},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/addPriorObservationQuery.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Query to add the number of days of prior observation in the current observation period at a certain date — addPriorObservationQuery","text":"","code":"# \\donttest{ cdm <- mockPatientProfiles()  cdm$cohort1 %>%   addPriorObservationQuery() #> # Source:   SQL [10 x 5] #> # Database: DuckDB v1.1.1 [unknown@Linux 6.5.0-1025-azure:R 4.4.1/:memory:] #>    cohort_definition_id subject_id cohort_start_date cohort_end_date #>                   <int>      <int> <date>            <date>          #>  1                    2          1 1990-08-27        1993-08-19      #>  2                    1          2 1991-03-07        1993-01-31      #>  3                    2          3 1970-07-16        1993-09-24      #>  4                    3          4 1972-11-17        1981-03-07      #>  5                    3          5 1947-02-10        1971-01-04      #>  6                    1          6 1965-09-11        1975-07-07      #>  7                    3          7 1947-08-01        1980-08-22      #>  8                    2          8 1907-07-11        1914-09-12      #>  9                    3          9 1923-09-13        1933-05-30      #> 10                    2         10 1909-11-27        1913-06-11      #> # ℹ 1 more variable: prior_observation <int> mockDisconnect(cdm = cdm) # }"},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/addSex.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute the sex of the individuals — addSex","title":"Compute the sex of the individuals — addSex","text":"Compute sex individuals","code":""},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/addSex.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute the sex of the individuals — addSex","text":"","code":"addSex(x, sexName = \"sex\", missingSexValue = \"None\", name = NULL)"},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/addSex.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute the sex of the individuals — addSex","text":"x Table individuals cdm. sexName name new column added. missingSexValue Value include missing sex. name Name new table, NULL temporary table returned.","code":""},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/addSex.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute the sex of the individuals — addSex","text":"table x added column sex information.","code":""},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/addSex.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute the sex of the individuals — addSex","text":"","code":"# \\donttest{ cdm <- mockPatientProfiles() cdm$cohort1 %>%   addSex() #> # Source:   table<og_133_1729812659> [10 x 5] #> # Database: DuckDB v1.1.1 [unknown@Linux 6.5.0-1025-azure:R 4.4.1/:memory:] #>    cohort_definition_id subject_id cohort_start_date cohort_end_date sex    #>                   <int>      <int> <date>            <date>          <chr>  #>  1                    1          1 1977-03-19        1995-01-21      Male   #>  2                    1          2 1957-05-17        1961-07-10      Male   #>  3                    3          3 1913-05-16        1919-06-20      Male   #>  4                    2          4 1993-06-03        1994-04-13      Female #>  5                    3          5 1975-03-20        1975-10-08      Female #>  6                    2          6 1993-01-05        1993-06-19      Female #>  7                    3          7 1923-03-19        1923-08-07      Male   #>  8                    2          8 1983-06-26        1985-04-18      Female #>  9                    2          9 1921-12-31        1934-11-18      Female #> 10                    3         10 1988-03-05        2011-12-10      Male   mockDisconnect(cdm = cdm) # }"},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/addSexQuery.html","id":null,"dir":"Reference","previous_headings":"","what":"Query to add the sex of the individuals — addSexQuery","title":"Query to add the sex of the individuals — addSexQuery","text":"`r lifecycle::badge(\"experimental\")` `addSex()`, except query computed table.","code":""},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/addSexQuery.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Query to add the sex of the individuals — addSexQuery","text":"","code":"addSexQuery(x, sexName = \"sex\", missingSexValue = \"None\")"},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/addSexQuery.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Query to add the sex of the individuals — addSexQuery","text":"x Table individuals cdm. sexName name new column added. missingSexValue Value include missing sex.","code":""},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/addSexQuery.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Query to add the sex of the individuals — addSexQuery","text":"table x added column sex information.","code":""},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/addSexQuery.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Query to add the sex of the individuals — addSexQuery","text":"","code":"# \\donttest{ cdm <- mockPatientProfiles() cdm$cohort1 %>%   addSexQuery() #> # Source:   SQL [10 x 5] #> # Database: DuckDB v1.1.1 [unknown@Linux 6.5.0-1025-azure:R 4.4.1/:memory:] #>    cohort_definition_id subject_id cohort_start_date cohort_end_date sex    #>                   <int>      <int> <date>            <date>          <chr>  #>  1                    3          1 1942-07-01        1943-09-09      Male   #>  2                    1          2 1914-07-19        1930-06-17      Male   #>  3                    3          3 1947-02-06        1965-07-28      Male   #>  4                    2          4 1989-09-05        2008-12-12      Male   #>  5                    1          5 1976-10-10        1981-04-21      Male   #>  6                    3          6 1991-11-20        1999-10-16      Female #>  7                    2          7 1941-02-28        1942-08-11      Male   #>  8                    1          8 1949-05-10        1950-02-06      Male   #>  9                    3          9 1931-09-17        1931-09-17      Male   #> 10                    1         10 1936-10-29        1942-05-20      Female mockDisconnect(cdm = cdm) # }"},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/addTableIntersectCount.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute number of intersect with an omop table. — addTableIntersectCount","title":"Compute number of intersect with an omop table. — addTableIntersectCount","text":"Compute number intersect omop table.","code":""},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/addTableIntersectCount.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute number of intersect with an omop table. — addTableIntersectCount","text":"","code":"addTableIntersectCount(   x,   tableName,   indexDate = \"cohort_start_date\",   censorDate = NULL,   window = list(c(0, Inf)),   targetStartDate = startDateColumn(tableName),   targetEndDate = endDateColumn(tableName),   nameStyle = \"{table_name}_{window_name}\",   name = NULL )"},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/addTableIntersectCount.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute number of intersect with an omop table. — addTableIntersectCount","text":"x Table individuals cdm. tableName Name table intersect . Options: visit_occurrence, condition_occurrence, drug_exposure, procedure_occurrence, device_exposure, measurement, observation, drug_era, condition_era, specimen, episode. indexDate Variable x contains date compute intersection. censorDate whether censor overlap events specific date column date x. window window consider events . targetStartDate Column name start date comparison. targetEndDate Column name end date comparison. nameStyle naming added column columns, include required parameters. name Name new table, NULL temporary table returned.","code":""},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/addTableIntersectCount.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute number of intersect with an omop table. — addTableIntersectCount","text":"table added columns intersect information.","code":""},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/addTableIntersectCount.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute number of intersect with an omop table. — addTableIntersectCount","text":"","code":"# \\donttest{ cdm <- mockPatientProfiles()  cdm$cohort1 %>%   addTableIntersectCount(tableName = \"visit_occurrence\") #> # Source:   table<og_134_1729812662> [10 x 5] #> # Database: DuckDB v1.1.1 [unknown@Linux 6.5.0-1025-azure:R 4.4.1/:memory:] #>    cohort_definition_id subject_id cohort_start_date cohort_end_date #>                   <int>      <int> <date>            <date>          #>  1                    3          7 1961-08-01        1968-12-17      #>  2                    2          5 1908-12-14        1922-08-03      #>  3                    3         10 1957-03-23        1965-09-11      #>  4                    2          6 1968-01-30        1978-11-03      #>  5                    3          9 1947-03-18        1948-08-07      #>  6                    3          1 1970-07-16        1994-08-01      #>  7                    2          4 1995-01-25        1995-10-10      #>  8                    1          8 1970-06-17        1976-01-27      #>  9                    1          2 1947-05-18        1954-05-28      #> 10                    2          3 2009-11-01        2019-10-29      #> # ℹ 1 more variable: visit_occurrence_0_to_inf <dbl>  mockDisconnect(cdm = cdm) # }"},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/addTableIntersectDate.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute date of intersect with an omop table. — addTableIntersectDate","title":"Compute date of intersect with an omop table. — addTableIntersectDate","text":"Compute date intersect omop table.","code":""},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/addTableIntersectDate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute date of intersect with an omop table. — addTableIntersectDate","text":"","code":"addTableIntersectDate(   x,   tableName,   indexDate = \"cohort_start_date\",   censorDate = NULL,   window = list(c(0, Inf)),   targetDate = startDateColumn(tableName),   order = \"first\",   nameStyle = \"{table_name}_{window_name}\",   name = NULL )"},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/addTableIntersectDate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute date of intersect with an omop table. — addTableIntersectDate","text":"x Table individuals cdm. tableName Name table intersect . Options: visit_occurrence, condition_occurrence, drug_exposure, procedure_occurrence, device_exposure, measurement, observation, drug_era, condition_era, specimen, episode. indexDate Variable x contains date compute intersection. censorDate whether censor overlap events specific date column date x. window window consider events . targetDate Target date tableName. order record considered case multiple records (required date days options). nameStyle naming added column columns, include required parameters. name Name new table, NULL temporary table returned.","code":""},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/addTableIntersectDate.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute date of intersect with an omop table. — addTableIntersectDate","text":"table added columns intersect information.","code":""},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/addTableIntersectDate.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute date of intersect with an omop table. — addTableIntersectDate","text":"","code":"# \\donttest{ cdm <- mockPatientProfiles()  cdm$cohort1 %>%   addTableIntersectDate(tableName = \"visit_occurrence\") #> # Source:   table<og_145_1729812665> [10 x 5] #> # Database: DuckDB v1.1.1 [unknown@Linux 6.5.0-1025-azure:R 4.4.1/:memory:] #>    cohort_definition_id subject_id cohort_start_date cohort_end_date #>                   <int>      <int> <date>            <date>          #>  1                    3          3 1971-07-28        1990-03-18      #>  2                    2          5 1950-05-02        1955-12-29      #>  3                    1          8 1953-04-23        1957-02-13      #>  4                    1         10 1922-12-18        1932-01-30      #>  5                    2          7 1964-10-03        1966-09-03      #>  6                    1          1 1948-10-15        1950-02-18      #>  7                    3          2 1946-09-21        1963-06-21      #>  8                    1          6 1931-12-19        1943-01-30      #>  9                    1          9 1920-12-23        1921-07-20      #> 10                    1          4 1945-02-03        1947-10-08      #> # ℹ 1 more variable: visit_occurrence_0_to_inf <date>  mockDisconnect(cdm = cdm) # }"},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/addTableIntersectDays.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute time to intersect with an omop table. — addTableIntersectDays","title":"Compute time to intersect with an omop table. — addTableIntersectDays","text":"Compute time intersect omop table.","code":""},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/addTableIntersectDays.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute time to intersect with an omop table. — addTableIntersectDays","text":"","code":"addTableIntersectDays(   x,   tableName,   indexDate = \"cohort_start_date\",   censorDate = NULL,   window = list(c(0, Inf)),   targetDate = startDateColumn(tableName),   order = \"first\",   nameStyle = \"{table_name}_{window_name}\",   name = NULL )"},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/addTableIntersectDays.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute time to intersect with an omop table. — addTableIntersectDays","text":"x Table individuals cdm. tableName Name table intersect . Options: visit_occurrence, condition_occurrence, drug_exposure, procedure_occurrence, device_exposure, measurement, observation, drug_era, condition_era, specimen, episode. indexDate Variable x contains date compute intersection. censorDate whether censor overlap events specific date column date x. window window consider events . targetDate Target date tableName. order record considered case multiple records (required date days options). nameStyle naming added column columns, include required parameters. name Name new table, NULL temporary table returned.","code":""},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/addTableIntersectDays.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute time to intersect with an omop table. — addTableIntersectDays","text":"table added columns intersect information.","code":""},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/addTableIntersectDays.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute time to intersect with an omop table. — addTableIntersectDays","text":"","code":"# \\donttest{ cdm <- mockPatientProfiles()  cdm$cohort1 %>%   addTableIntersectDays(tableName = \"visit_occurrence\") #> # Source:   table<og_152_1729812668> [10 x 5] #> # Database: DuckDB v1.1.1 [unknown@Linux 6.5.0-1025-azure:R 4.4.1/:memory:] #>    cohort_definition_id subject_id cohort_start_date cohort_end_date #>                   <int>      <int> <date>            <date>          #>  1                    2          1 1925-07-01        1936-01-22      #>  2                    1          5 1960-05-25        1982-02-15      #>  3                    2          8 1955-06-07        1966-12-14      #>  4                    1          7 1974-01-25        1986-01-19      #>  5                    2          9 1978-03-26        1979-02-02      #>  6                    1          4 1926-06-19        1936-09-06      #>  7                    2          3 1962-07-19        1963-09-12      #>  8                    1          2 1986-09-26        1988-08-08      #>  9                    2         10 1985-01-30        1990-07-26      #> 10                    2          6 1926-02-04        1932-08-08      #> # ℹ 1 more variable: visit_occurrence_0_to_inf <dbl>  mockDisconnect(cdm = cdm) # }"},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/addTableIntersectField.html","id":null,"dir":"Reference","previous_headings":"","what":"Intersecting the cohort with columns of an OMOP table of user's choice. It will add an extra column to the cohort, indicating the intersected entries with the target columns in a window of the user's choice. — addTableIntersectField","title":"Intersecting the cohort with columns of an OMOP table of user's choice. It will add an extra column to the cohort, indicating the intersected entries with the target columns in a window of the user's choice. — addTableIntersectField","text":"Intersecting cohort columns OMOP table user's choice. add extra column cohort, indicating intersected entries target columns window user's choice.","code":""},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/addTableIntersectField.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Intersecting the cohort with columns of an OMOP table of user's choice. It will add an extra column to the cohort, indicating the intersected entries with the target columns in a window of the user's choice. — addTableIntersectField","text":"","code":"addTableIntersectField(   x,   tableName,   field,   indexDate = \"cohort_start_date\",   censorDate = NULL,   window = list(c(0, Inf)),   targetDate = startDateColumn(tableName),   order = \"first\",   nameStyle = \"{table_name}_{extra_value}_{window_name}\",   name = NULL )"},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/addTableIntersectField.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Intersecting the cohort with columns of an OMOP table of user's choice. It will add an extra column to the cohort, indicating the intersected entries with the target columns in a window of the user's choice. — addTableIntersectField","text":"x Table individuals cdm. tableName Name table intersect . Options: visit_occurrence, condition_occurrence, drug_exposure, procedure_occurrence, device_exposure, measurement, observation, drug_era, condition_era, specimen, episode. field columns table tableName intersect . example, user uses visit_occurrence tableName field possible options include visit_occurrence_id, visit_concept_id, visit_type_concept_id. indexDate Variable x contains date compute intersection. censorDate whether censor overlap events specific date column date x. window window consider events intersecting chosen column. targetDate dates target columns tableName user may want restrict . order record considered case multiple records (required date days options). nameStyle naming added column columns, include required parameters. name Name new table, NULL temporary table returned.","code":""},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/addTableIntersectField.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Intersecting the cohort with columns of an OMOP table of user's choice. It will add an extra column to the cohort, indicating the intersected entries with the target columns in a window of the user's choice. — addTableIntersectField","text":"table added columns intersect information.","code":""},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/addTableIntersectField.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Intersecting the cohort with columns of an OMOP table of user's choice. It will add an extra column to the cohort, indicating the intersected entries with the target columns in a window of the user's choice. — addTableIntersectField","text":"","code":"# \\donttest{ cdm <- mockPatientProfiles() cdm$cohort1 %>%   addTableIntersectField(     tableName = \"visit_occurrence\",     field = \"visit_concept_id\",     order = \"last\",     window = c(-Inf, -1)   ) #> # Source:   table<og_159_1729812671> [10 x 5] #> # Database: DuckDB v1.1.1 [unknown@Linux 6.5.0-1025-azure:R 4.4.1/:memory:] #>    cohort_definition_id subject_id cohort_start_date cohort_end_date #>                   <int>      <int> <date>            <date>          #>  1                    3          5 1993-04-14        1994-06-18      #>  2                    1          2 2010-11-18        2011-08-04      #>  3                    2         10 1956-05-20        1958-04-22      #>  4                    2          9 1960-08-12        1964-11-18      #>  5                    3          7 1957-05-26        1958-09-29      #>  6                    1          1 1932-07-13        1934-01-27      #>  7                    3          6 1958-10-10        1964-03-03      #>  8                    2          4 1937-11-10        1946-04-03      #>  9                    3          3 1926-09-19        1931-01-16      #> 10                    3          8 1966-09-15        1987-03-22      #> # ℹ 1 more variable: visit_occurrence_visit_concept_id_minf_to_m1 <chr> mockDisconnect(cdm = cdm) # }"},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/addTableIntersectFlag.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute a flag intersect with an omop table. — addTableIntersectFlag","title":"Compute a flag intersect with an omop table. — addTableIntersectFlag","text":"Compute flag intersect omop table.","code":""},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/addTableIntersectFlag.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute a flag intersect with an omop table. — addTableIntersectFlag","text":"","code":"addTableIntersectFlag(   x,   tableName,   indexDate = \"cohort_start_date\",   censorDate = NULL,   window = list(c(0, Inf)),   targetStartDate = startDateColumn(tableName),   targetEndDate = endDateColumn(tableName),   nameStyle = \"{table_name}_{window_name}\",   name = NULL )"},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/addTableIntersectFlag.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute a flag intersect with an omop table. — addTableIntersectFlag","text":"x Table individuals cdm. tableName Name table intersect . Options: visit_occurrence, condition_occurrence, drug_exposure, procedure_occurrence, device_exposure, measurement, observation, drug_era, condition_era, specimen, episode. indexDate Variable x contains date compute intersection. censorDate whether censor overlap events specific date column date x. window window consider events . targetStartDate Column name start date comparison. targetEndDate Column name end date comparison. nameStyle naming added column columns, include required parameters. name Name new table, NULL temporary table returned.","code":""},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/addTableIntersectFlag.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute a flag intersect with an omop table. — addTableIntersectFlag","text":"table added columns intersect information.","code":""},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/addTableIntersectFlag.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute a flag intersect with an omop table. — addTableIntersectFlag","text":"","code":"# \\donttest{ cdm <- mockPatientProfiles()  cdm$cohort1 %>%   addTableIntersectFlag(tableName = \"visit_occurrence\") #> # Source:   table<og_166_1729812673> [10 x 5] #> # Database: DuckDB v1.1.1 [unknown@Linux 6.5.0-1025-azure:R 4.4.1/:memory:] #>    cohort_definition_id subject_id cohort_start_date cohort_end_date #>                   <int>      <int> <date>            <date>          #>  1                    3          8 1937-07-11        1960-04-25      #>  2                    1          6 1962-01-08        1988-05-30      #>  3                    1         10 1949-07-02        1952-12-18      #>  4                    2          2 1952-07-30        1974-07-14      #>  5                    3          7 1997-08-08        2002-02-13      #>  6                    1          3 1980-10-22        1993-07-03      #>  7                    1          1 2002-04-17        2007-07-18      #>  8                    3          4 1922-10-13        1923-10-25      #>  9                    1          9 2004-11-02        2009-11-03      #> 10                    2          5 1999-05-03        1999-06-05      #> # ℹ 1 more variable: visit_occurrence_0_to_inf <dbl> mockDisconnect(cdm = cdm) # }"},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/availableEstimates.html","id":null,"dir":"Reference","previous_headings":"","what":"Show the available estimates that can be used for the different variable_type supported. — availableEstimates","title":"Show the available estimates that can be used for the different variable_type supported. — availableEstimates","text":"Show available estimates can used different variable_type supported.","code":""},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/availableEstimates.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Show the available estimates that can be used for the different variable_type supported. — availableEstimates","text":"","code":"availableEstimates(variableType = NULL, fullQuantiles = FALSE)"},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/availableEstimates.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Show the available estimates that can be used for the different variable_type supported. — availableEstimates","text":"variableType set variable types. fullQuantiles Whether display exact quantiles can computed qXX summarise .","code":""},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/availableEstimates.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Show the available estimates that can be used for the different variable_type supported. — availableEstimates","text":"tibble available estimates.","code":""},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/availableEstimates.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Show the available estimates that can be used for the different variable_type supported. — availableEstimates","text":"","code":"# \\donttest{ library(PatientProfiles)  availableEstimates() #> # A tibble: 37 × 4 #>    variable_type estimate_name      estimate_description           estimate_type #>    <chr>         <chr>              <chr>                          <chr>         #>  1 date          mean               mean of the variable of inter… date          #>  2 date          sd                 standard deviation of the var… date          #>  3 date          median             median of the variable of int… date          #>  4 date          qXX                qualtile of XX% the variable … date          #>  5 date          min                minimum of the variable of in… date          #>  6 date          max                maximum of the variable of in… date          #>  7 date          count_missing      number of missing values.      integer       #>  8 date          percentage_missing percentage of missing values   percentage    #>  9 numeric       sum                sum of all the values for the… numeric       #> 10 numeric       mean               mean of the variable of inter… numeric       #> # ℹ 27 more rows availableEstimates(\"numeric\") #> # A tibble: 12 × 4 #>    variable_type estimate_name      estimate_description           estimate_type #>    <chr>         <chr>              <chr>                          <chr>         #>  1 numeric       sum                sum of all the values for the… numeric       #>  2 numeric       mean               mean of the variable of inter… numeric       #>  3 numeric       sd                 standard deviation of the var… numeric       #>  4 numeric       median             median of the variable of int… numeric       #>  5 numeric       qXX                qualtile of XX% the variable … numeric       #>  6 numeric       min                minimum of the variable of in… numeric       #>  7 numeric       max                maximum of the variable of in… numeric       #>  8 numeric       count_missing      number of missing values.      integer       #>  9 numeric       percentage_missing percentage of missing values   percentage    #> 10 numeric       count              count number of `1`.           integer       #> 11 numeric       percentage         percentage of occurrences of … percentage    #> 12 numeric       density            density distribution           multiple      availableEstimates(c(\"numeric\", \"categorical\")) #> # A tibble: 14 × 4 #>    variable_type estimate_name      estimate_description           estimate_type #>    <chr>         <chr>              <chr>                          <chr>         #>  1 numeric       sum                sum of all the values for the… numeric       #>  2 numeric       mean               mean of the variable of inter… numeric       #>  3 numeric       sd                 standard deviation of the var… numeric       #>  4 numeric       median             median of the variable of int… numeric       #>  5 numeric       qXX                qualtile of XX% the variable … numeric       #>  6 numeric       min                minimum of the variable of in… numeric       #>  7 numeric       max                maximum of the variable of in… numeric       #>  8 numeric       count_missing      number of missing values.      integer       #>  9 numeric       percentage_missing percentage of missing values   percentage    #> 10 numeric       count              count number of `1`.           integer       #> 11 numeric       percentage         percentage of occurrences of … percentage    #> 12 categorical   count              number of times that each cat… integer       #> 13 categorical   percentage         percentage of individuals wit… percentage    #> 14 numeric       density            density distribution           multiple      # }"},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/endDateColumn.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the name of the end date column for a certain table in the cdm — endDateColumn","title":"Get the name of the end date column for a certain table in the cdm — endDateColumn","text":"Get name end date column certain table cdm","code":""},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/endDateColumn.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the name of the end date column for a certain table in the cdm — endDateColumn","text":"","code":"endDateColumn(tableName)"},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/endDateColumn.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get the name of the end date column for a certain table in the cdm — endDateColumn","text":"tableName Name table.","code":""},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/endDateColumn.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the name of the end date column for a certain table in the cdm — endDateColumn","text":"Name end date column table.","code":""},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/endDateColumn.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get the name of the end date column for a certain table in the cdm — endDateColumn","text":"","code":"# \\donttest{ library(PatientProfiles) endDateColumn(\"condition_occurrence\") #> [1] \"condition_end_date\" # }"},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/mockDisconnect.html","id":null,"dir":"Reference","previous_headings":"","what":"Function to disconnect from the mock — mockDisconnect","title":"Function to disconnect from the mock — mockDisconnect","text":"Function disconnect mock","code":""},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/mockDisconnect.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function to disconnect from the mock — mockDisconnect","text":"","code":"mockDisconnect(cdm)"},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/mockDisconnect.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Function to disconnect from the mock — mockDisconnect","text":"cdm cdm_reference object.","code":""},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/mockPatientProfiles.html","id":null,"dir":"Reference","previous_headings":"","what":"It creates a mock database for testing PatientProfiles package — mockPatientProfiles","title":"It creates a mock database for testing PatientProfiles package — mockPatientProfiles","text":"creates mock database testing PatientProfiles package","code":""},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/mockPatientProfiles.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"It creates a mock database for testing PatientProfiles package — mockPatientProfiles","text":"","code":"mockPatientProfiles(   con = NULL,   writeSchema = NULL,   numberIndividuals = 10,   ...,   seed = NULL )"},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/mockPatientProfiles.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"It creates a mock database for testing PatientProfiles package — mockPatientProfiles","text":"con DBI connection create cdm mock object. writeSchema Name schema connection writing permisions. numberIndividuals Number individuals create cdm reference. ... User self defined tables put cdm, can input many user want. seed number set seed. NULL seed used.","code":""},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/mockPatientProfiles.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"It creates a mock database for testing PatientProfiles package — mockPatientProfiles","text":"mock cdm_reference object created following user's specifications.","code":""},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/mockPatientProfiles.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"It creates a mock database for testing PatientProfiles package — mockPatientProfiles","text":"","code":"# \\donttest{ library(PatientProfiles) library(CDMConnector)  cdm <- mockPatientProfiles()  mockDisconnect(cdm = cdm) # }"},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/pipe.html","id":null,"dir":"Reference","previous_headings":"","what":"Pipe operator — %>%","title":"Pipe operator — %>%","text":"See magrittr::%>% details.","code":""},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/pipe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pipe operator — %>%","text":"","code":"lhs %>% rhs"},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/pipe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pipe operator — %>%","text":"lhs value magrittr placeholder. rhs function call using magrittr semantics.","code":""},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/pipe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pipe operator — %>%","text":"result calling `rhs(lhs)`.","code":""},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/reexports.html","id":null,"dir":"Reference","previous_headings":"","what":"Objects exported from other packages — reexports","title":"Objects exported from other packages — reexports","text":"objects imported packages. Follow links see documentation. omopgenerics settings, suppress","code":""},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/sourceConceptIdColumn.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the name of the source concept_id column for a certain table in the cdm — sourceConceptIdColumn","title":"Get the name of the source concept_id column for a certain table in the cdm — sourceConceptIdColumn","text":"Get name source concept_id column certain table cdm","code":""},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/sourceConceptIdColumn.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the name of the source concept_id column for a certain table in the cdm — sourceConceptIdColumn","text":"","code":"sourceConceptIdColumn(tableName)"},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/sourceConceptIdColumn.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get the name of the source concept_id column for a certain table in the cdm — sourceConceptIdColumn","text":"tableName Name table.","code":""},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/sourceConceptIdColumn.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the name of the source concept_id column for a certain table in the cdm — sourceConceptIdColumn","text":"Name source_concept_id column table.","code":""},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/sourceConceptIdColumn.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get the name of the source concept_id column for a certain table in the cdm — sourceConceptIdColumn","text":"","code":"# \\donttest{ library(PatientProfiles) sourceConceptIdColumn(\"condition_occurrence\") #> [1] \"condition_source_concept_id\" # }"},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/standardConceptIdColumn.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the name of the standard concept_id column for a certain table in the cdm — standardConceptIdColumn","title":"Get the name of the standard concept_id column for a certain table in the cdm — standardConceptIdColumn","text":"Get name standard concept_id column certain table cdm","code":""},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/standardConceptIdColumn.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the name of the standard concept_id column for a certain table in the cdm — standardConceptIdColumn","text":"","code":"standardConceptIdColumn(tableName)"},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/standardConceptIdColumn.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get the name of the standard concept_id column for a certain table in the cdm — standardConceptIdColumn","text":"tableName Name table.","code":""},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/standardConceptIdColumn.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the name of the standard concept_id column for a certain table in the cdm — standardConceptIdColumn","text":"Name concept_id column table.","code":""},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/standardConceptIdColumn.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get the name of the standard concept_id column for a certain table in the cdm — standardConceptIdColumn","text":"","code":"# \\donttest{ library(PatientProfiles) standardConceptIdColumn(\"condition_occurrence\") #> [1] \"condition_concept_id\" # }"},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/startDateColumn.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the name of the start date column for a certain table in the cdm — startDateColumn","title":"Get the name of the start date column for a certain table in the cdm — startDateColumn","text":"Get name start date column certain table cdm","code":""},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/startDateColumn.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the name of the start date column for a certain table in the cdm — startDateColumn","text":"","code":"startDateColumn(tableName)"},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/startDateColumn.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get the name of the start date column for a certain table in the cdm — startDateColumn","text":"tableName Name table.","code":""},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/startDateColumn.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the name of the start date column for a certain table in the cdm — startDateColumn","text":"Name start date column table.","code":""},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/startDateColumn.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get the name of the start date column for a certain table in the cdm — startDateColumn","text":"","code":"# \\donttest{ library(PatientProfiles) startDateColumn(\"condition_occurrence\") #> [1] \"condition_start_date\" # }"},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/summariseResult.html","id":null,"dir":"Reference","previous_headings":"","what":"Summarise variables using a set of estimate functions. The output will be a formatted summarised_result object. — summariseResult","title":"Summarise variables using a set of estimate functions. The output will be a formatted summarised_result object. — summariseResult","text":"Summarise variables using set estimate functions. output formatted summarised_result object.","code":""},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/summariseResult.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summarise variables using a set of estimate functions. The output will be a formatted summarised_result object. — summariseResult","text":"","code":"summariseResult(   table,   group = list(),   includeOverallGroup = FALSE,   strata = list(),   includeOverallStrata = TRUE,   variables = NULL,   estimates = c(\"min\", \"q25\", \"median\", \"q75\", \"max\", \"count\", \"percentage\"),   counts = TRUE )"},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/summariseResult.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summarise variables using a set of estimate functions. The output will be a formatted summarised_result object. — summariseResult","text":"table Table different records. group List groups considered. includeOverallGroup TRUE FALSE. TRUE, results overall group reported list groups specified. strata List stratifications within group considered. includeOverallStrata TRUE FALSE. TRUE, results overall strata reported list strata specified. variables Variables summarise, can list point different set estimate names. estimates Estimates obtain, can list point different set variables. counts Whether compute number records number subjects.","code":""},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/summariseResult.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Summarise variables using a set of estimate functions. The output will be a formatted summarised_result object. — summariseResult","text":"summarised_result object summarised data interest.","code":""},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/summariseResult.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Summarise variables using a set of estimate functions. The output will be a formatted summarised_result object. — summariseResult","text":"","code":"# \\donttest{ library(PatientProfiles) library(dplyr) #>  #> Attaching package: ‘dplyr’ #> The following objects are masked from ‘package:stats’: #>  #>     filter, lag #> The following objects are masked from ‘package:base’: #>  #>     intersect, setdiff, setequal, union  cdm <- mockPatientProfiles() x <- cdm$cohort1 %>%   addDemographics() %>%   collect() result <- summariseResult(x) #> ℹ The following estimates will be computed: #> • cohort_start_date: min, q25, median, q75, max #> • cohort_end_date: min, q25, median, q75, max #> • age: min, q25, median, q75, max #> • sex: count, percentage #> • prior_observation: min, q25, median, q75, max #> • future_observation: min, q25, median, q75, max #> ! Table is collected to memory as not all requested estimates are supported on #>   the database side #> → Start summary of data, at 2024-10-24 23:31:19.701628 #> ✔ Summary finished, at 2024-10-24 23:31:19.77569 mockDisconnect(cdm = cdm) # }"},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/variableTypes.html","id":null,"dir":"Reference","previous_headings":"","what":"Classify the variables between 5 types: ","title":"Classify the variables between 5 types: ","text":"Classify variables 5 types: \"numeric\", \"categorical\", \"binary\", \"date\", NA.","code":""},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/variableTypes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Classify the variables between 5 types: ","text":"","code":"variableTypes(table)"},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/variableTypes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Classify the variables between 5 types: ","text":"table Tibble.","code":""},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/variableTypes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Classify the variables between 5 types: ","text":"Tibble variables type classification.","code":""},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/reference/variableTypes.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Classify the variables between 5 types: ","text":"","code":"# \\donttest{ library(PatientProfiles) x <- dplyr::tibble(   person_id = c(1, 2),   start_date = as.Date(c(\"2020-05-02\", \"2021-11-19\")),   asthma = c(0, 1) ) variableTypes(x) #> # A tibble: 3 × 2 #>   variable_name variable_type #>   <chr>         <chr>         #> 1 person_id     numeric       #> 2 start_date    date          #> 3 asthma        numeric       # }"},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/news/index.html","id":"patientprofiles-120","dir":"Changelog","previous_headings":"","what":"PatientProfiles 1.2.0","title":"PatientProfiles 1.2.0","text":"CRAN release: 2024-09-11 addObservationPeriodId() new function adds number observation period observation . Add density estimate summariseResult()","code":""},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/news/index.html","id":"patientprofiles-111","dir":"Changelog","previous_headings":"","what":"PatientProfiles 1.1.1","title":"PatientProfiles 1.1.1","text":"CRAN release: 2024-07-28 addCohortName overwrites already exists cohort_name column #680 #682. Correct nan Inf missing values #674 Fix #670 #671","code":""},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/news/index.html","id":"patientprofiles-110","dir":"Changelog","previous_headings":"","what":"PatientProfiles 1.1.0","title":"PatientProfiles 1.1.0","text":"CRAN release: 2024-06-11 addConceptIntersect now includes records missing end date assumption end date equal start date. add* functions new argument called name decide want resultant temp table (name = NULL) permanent table certain name. Additional functions provided, e.g. addDemographicsQuery, result computed.","code":""},{"path":"https://darwin-eu-dev.github.io/PatientProfiles/news/index.html","id":"patientprofiles-100","dir":"Changelog","previous_headings":"","what":"PatientProfiles 1.0.0","title":"PatientProfiles 1.0.0","text":"CRAN release: 2024-05-16 Stable release package","code":""}]
